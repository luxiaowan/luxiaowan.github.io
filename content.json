{"meta":{"title":"串一串","subtitle":"断舍离","description":null,"author":"cc","url":"http://luxiaowan.github.io","root":"/"},"pages":[{"title":"关于本人","date":"2019-10-21T15:26:09.000Z","updated":"2019-10-21T15:28:30.066Z","comments":true,"path":"about/index.html","permalink":"http://luxiaowan.github.io/about/index.html","excerpt":"","text":"串一串 浪人 非常懒，偶尔写一下 文笔很烂，写的不好 凑合看吧"},{"title":"推荐书单","date":"2019-10-21T15:38:29.000Z","updated":"2019-10-21T15:56:47.928Z","comments":true,"path":"books/index.html","permalink":"http://luxiaowan.github.io/books/index.html","excerpt":"","text":"书名 购买地址 JavaScript权威指南（第6版） JavaScript高级程序设计 Java编程思想（第4版） java并发编程实战 Netty权威指南（第2版） Spring Boot实战 Spring微服务实战 Word Excel PPT 2016入门与提高 编程珠玑（第2版） 操作系统真象还原 大型网站系统与Java中间件实践 高性能JavaScript 高性能MySQL（第3版） 机器学习 极简思维 技术运营 人性的弱点 设计模式解析（第2版） 设计模式之禅 深度思维 深入理解Java虚拟机 深入浅出Node.js 深入浅出React和Redux 移动Web前端高效开发实战 亿级流量网站架构核心技术 原则 怎样管精力就怎样过一生 重构改善既有代码的设计 Excel高效办公：数据处理与分析（修订版） 项目管理艺术 周鸿祎自述 我的互联网方法论 奇点临近 高效能人士的七个习惯 三板斧：阿里巴巴管理之道 掘金移动互联：跨境电商如何挑战海外市场 微信思维 系统之美:决策者的系统思考 思考，快与慢 创新者的窘境 微服务设计 Scrum敏捷软件开发 管理的实践"},{"title":"分类","date":"2019-10-21T15:29:38.000Z","updated":"2019-10-21T15:32:44.295Z","comments":true,"path":"categories/index.html","permalink":"http://luxiaowan.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-10-21T15:42:43.000Z","updated":"2019-10-21T15:57:01.607Z","comments":true,"path":"links/index.html","permalink":"http://luxiaowan.github.io/links/index.html","excerpt":"","text":"本人还没友链，孤独小客"},{"title":"个人项目","date":"2019-10-21T15:54:25.000Z","updated":"2019-10-21T15:57:51.353Z","comments":true,"path":"repository/index.html","permalink":"http://luxiaowan.github.io/repository/index.html","excerpt":"","text":"https://github.com/luxiaowan"},{"title":"标签","date":"2019-10-21T15:35:35.000Z","updated":"2019-10-21T15:35:54.071Z","comments":true,"path":"tags/index.html","permalink":"http://luxiaowan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git Stash用法","slug":"git stash命令","date":"2019-10-21T14:10:13.841Z","updated":"2019-10-21T15:47:13.957Z","comments":true,"path":"2019/10/21/git stash命令/","link":"","permalink":"http://luxiaowan.github.io/2019/10/21/git stash命令/","excerpt":"","text":"创建仓库 git init echo 123 &gt; test.txt git add . git commit -m “add test file” git remote add origin git@git.xx.xx.xx:xxx/xxx.git git push origin master 以上内容比较简单，就不作详细讲述，如果上面的内容看不懂，下面的请放弃 使用git stash暂存 随意修改test.txt文件的内容，比如：画个心形，你正热火朝天修改中…… 这时领导走过来拍了拍你的肩膀说到：”小伙子啊，创建个朕.txt文件提交上来，内容就写我还想再活五百年，test.txt文件这一版不作修改“。 你面露笑容的回答：“好的，没问题！”，内心却是：“MMP,MMP,MMP……” 辛辛苦苦修改的test.txt文件怎么办？眼瞅着就要完成了，难道复制出去，然后等解决领导需求后再粘贴回来？low不low？肯定不low啊，一个文件而已，这种方法很简单，*但是当你实际项目中修改了几十个文件的时候呢？*挨个儿复制出去？累傻小子呐？！！！！！ git stash命令帮你解决问题，stash是存储的意思，也就是将当前工作区内的所有东西都存储起来，然后工作区所有文件恢复到修改之前的状态(并不是最新状态，不会和仓库中进行自动同步，需要你自己去pull)，然后你就可以继续完成任务了。(在执行git stash之前需要先执行git add命令) stash可以进行多次操作，每次操作都会将当前工作区的文件情况暂存起来，stash是类栈存储，每次stash的序号都为0，此次之前stash的序号会自动+1 使用git stash pop取出 git stash pop取出栈顶元素，也就是序号为0的那个，即最近一次执行git stash保存的内容。pop之后，暂存列表中就会自动将其清除掉，这个时候你再执行git stash list会发现毛都没有 这个时候可能就会纳闷了，我保存了好几次，但是我这次是想使用最开始stash的那份内容，怎么办？一直pop，直到最后一次？当然不行，上面刚讲过pop之后暂存列表中就没有stash的信息了，已经被pop出去的就找不回来了，等于是自杀式攻击，那咋整呢？ git stash apply stash@{序号}可以将指定序号的stash内容弹出到工作区，此时工作区里文件的状态就和stash@{序号}里的一致了，但是这个命令无法将stash记录从暂存列表中删除，仅仅只是将文件恢复而已 git stash drop stash@{序号}来丢弃暂存列表中的记录，可以配合apply使用 查看暂存记录中的信息 查看暂存列表：git stash list查看当前stash的列表 查看暂存内容：git stash show stash@{序号}查看指定序号的stash的内容 git stash save ‘msg’ 等于是在stash的时候打了个标签，妖娆！！！！","categories":[{"name":"Git","slug":"Git","permalink":"http://luxiaowan.github.io/categories/Git/"}],"tags":[]},{"title":"Hash索引相关","slug":"Hash索引相关","date":"2019-10-12T15:42:43.000Z","updated":"2019-10-21T15:48:05.043Z","comments":true,"path":"2019/10/12/Hash索引相关/","link":"","permalink":"http://luxiaowan.github.io/2019/10/12/Hash索引相关/","excerpt":"","text":"hash索引结构使用方式较为局限，仅适用于=、IN和&lt;=&gt;三种，但是由于通过hash可以直接查找到具体的值，而不用像BT那样每次都从root节点开始遍历，所以在通常情况下，hash的查找效率要比BT高。 hash的缺陷： 1. hash不能进行范围查找 值在计算hash后，并不能保证计算后的hash值和计算前的大小排列一样，所以hash不适用于范围查找 2. hash不能进行排序查询 值计算后的hash值无法保证与原值大小顺序一样，所以无法进行排序 3. 组合索引不能使用部分字段查询 组合索引的hash值是所有索引字段的值组合在一起进行计算的，若仅使用部分字段进行查询的话，计算出的hash值基本不会与索引的hash值相同 4. hash在出现大量值碰撞的时候，性能会降低 hash出现大量的值相等的时候，需要进行表扫描以进行精确匹配，效率较低","categories":[{"name":"Java","slug":"Java","permalink":"http://luxiaowan.github.io/categories/Java/"}],"tags":[{"name":"Java基础知识","slug":"Java基础知识","permalink":"http://luxiaowan.github.io/tags/Java基础知识/"}]},{"title":"Char和varchar简单介绍","slug":"char与varchar简单介绍","date":"2019-10-12T04:10:43.000Z","updated":"2019-10-21T16:19:50.476Z","comments":true,"path":"2019/10/12/char与varchar简单介绍/","link":"","permalink":"http://luxiaowan.github.io/2019/10/12/char与varchar简单介绍/","excerpt":"","text":"1. 数据长度 1) char(最大长度255个字节) 长度固定（字段存入数据长度始终等于字段长度） 2) varchar(最大长度65535个字节) 可变长度，存入数据长度为N个字节，则实际使用了N+1(255以上长度则+2)个字节的空间，多出来的1字节是用来存储数据实际长度。 存入数据对比 存入&quot;ab&quot; char查询出&quot;ab&quot; varchar查询出&quot;ab&quot; 存入&quot;ab &quot;，ab后面有两个空格， char查询出&quot;ab&quot; varchar查询出&quot;ab &quot; 解析： ​ 在入库时，数据库会自动在ab后面添加两位空格，让入库的数据长度保证等于4 char(4) ，这种操作很容易理解，但是如果你去数据表里面去查这条数据，会发现表中数据并没有空格，所以可以推断出这里是逻辑追加，所以在查询数据的时候会并不会出现引擎自动添加的空格。 2. 实操(技术一定要**实操**) 1）无空格数据 先创建一张表 1create table cv(c char(4), v varchar(4)); 插入数据 1insert into cv values(&quot;ab&quot;, &quot;ab&quot;); 查询数据 1select concat(&apos;(&apos;, c, &apos;)&apos;) AS c, concat(&apos;(&apos;, v, &apos;)&apos;) AS v from cv; 结果 结果中char和varchar均查出来为无空格的ab ####2）有空格数据 插入数据 1insert into cv values(&quot;ab &quot;, &quot;ab &quot;); 查询数据 1select concat(&apos;(&apos;, c, &apos;)&apos;) AS c, concat(&apos;(&apos;, v, &apos;)&apos;) AS v from cv; 结果 结果中可以看出，char类型将数据后面的空格自动去掉了，varchar则保留了所有的空格","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://luxiaowan.github.io/categories/MySQL/"}],"tags":[]},{"title":"MySQL使用查询缓存","slug":"MySQL使用查询缓存","date":"2019-10-11T05:01:23.000Z","updated":"2019-10-21T15:48:59.282Z","comments":true,"path":"2019/10/11/MySQL使用查询缓存/","link":"","permalink":"http://luxiaowan.github.io/2019/10/11/MySQL使用查询缓存/","excerpt":"","text":"查询服务是否已开启缓存 执行show variables like '%query_cache%';查看缓存状态 Variable_name: query_cache_type为缓存状态，ON表示开启，OFF表示关闭 开启/关闭使用查询缓存 修改my.cnf文件进行开启和关闭 [mysqld]中添加/修改： query_cache_size = 20M query_cache_type = ON/OFF **修改完成后重启MySQL服务：service mysql restart/systemctl mysql restart ** 查询缓存使用情况 执行show status like 'qcache%';查询缓存使用情况 因为本机MySQL未开启查询缓存，所以此处和使用相关的属性均为0 属性解释: 属性 释义 Qcache_free_blocks 缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。 Qcache_free_memory 缓存中空闲内存大小 Qcache_hits 缓存命中次数，命中一次就+1 Qcache_inserts 查询次数，命中次数/查询次数=缓存命中率 Qcache_lowmem_prunes 缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数，如果数字不断增长，就可能碎片非常严重，或者内存很少，通过Qcache_free_blocks、Qcache_free_memory来分析具体情况 Qcache_not_cached 不适合进行缓存的查询的数量 Qcache_queries_in_cache 当前缓存的查询(和响应)的数量 Qcache_total_blocks 缓存中块的数量","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://luxiaowan.github.io/categories/MySQL/"}],"tags":[]},{"title":"Java基础面试题","slug":"蚂蚁Java基础面试题","date":"2019-10-10T15:21:56.000Z","updated":"2019-10-21T15:49:27.313Z","comments":true,"path":"2019/10/10/蚂蚁Java基础面试题/","link":"","permalink":"http://luxiaowan.github.io/2019/10/10/蚂蚁Java基础面试题/","excerpt":"","text":"一 map怎么实现hashcode和equals,为什么重写equals必须重写hashcode 使用过concurrent包下的哪些类，使用场景等等。 concurrentHashMap怎么实现？concurrenthashmap在1.8和1.7里面有什么区别 CountDownLatch、LinkedHashMap、AQS实现原理 线程池有哪些RejectedExecutionHandler,分别对应的使用场景 多线程的锁？怎么优化的？偏向锁、轻量级锁、重量级锁？ 组合索引？B+树如何存储的？ 为什么缓存更新策略是先更新数据库后删除缓存 OOM说一下？怎么排查？哪些会导致OOM? OSI七层结构，每层结构都是干什么的？ java的线程安全queue需要注意的点 死锁的原因，如何避免 二 jvm虚拟机老年代什么情况下会发生gc，给你一个场景，一台4核8G的服务器，每隔两个小时就要出现一次老年代gc，现在有日志，怎么分析是哪里出了问题 数据库索引有哪些？底层怎么实现的？数据库怎么优化？ 数据库的事务，四个性质说一下，分别有什么用，怎么实现的？ 服务器如何负载均衡，有哪些算法，哪个比较好，一致性哈希原理，怎么避免DDOS攻击请求打到少数机器 volatile讲讲 哪些设计模式？装饰器、代理讲讲？ redis集群会吗？ mysql存储引擎 事务隔离级别 不可重复度和幻读，怎么避免，底层怎么实现（行锁表锁） 三 项目介绍 分布式锁是怎么实现的 MySQL有哪几种join方式，底层原理是什么 Redis有哪些数据结构？底层的编码有哪些？有序链表采用了哪些不同的编码？ Redis扩容，失效key清理策略 Redis的持久化怎么做，aof和rdb，有什么区别，有什么优缺点。 MySQL数据库怎么实现分库分表，以及数据同步？ 单点登录如何是实现？ 谈谈SpringBoot和SpringCloud的理解 未来的技术职业怎么规划？ 为什么选择我们公司？","categories":[{"name":"Java","slug":"Java","permalink":"http://luxiaowan.github.io/categories/Java/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://luxiaowan.github.io/tags/面试/"},{"name":"阿里","slug":"阿里","permalink":"http://luxiaowan.github.io/tags/阿里/"}]}]}