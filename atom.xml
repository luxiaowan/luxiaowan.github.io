<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>串一串</title>
  
  <subtitle>断舍离</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luxiaowan.github.io/"/>
  <updated>2020-03-12T13:35:37.430Z</updated>
  <id>http://luxiaowan.github.io/</id>
  
  <author>
    <name>cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux更换yum源</title>
    <link href="http://luxiaowan.github.io/2020/03/12/Centos%E6%9B%B4%E6%8D%A2yum%E6%BA%90/"/>
    <id>http://luxiaowan.github.io/2020/03/12/Centos更换yum源/</id>
    <published>2020-03-12T05:05:00.000Z</published>
    <updated>2020-03-12T13:35:37.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们安装的Linux虚拟机或购买的云服务器上默认使用的yum源在国内有时候会传输很慢，现在大多我们在使用Linux之前都会修改一下yum源，以下以centos为例，将yum源修改为阿里云的。可以到https://developer.aliyun.com/mirror/中查看帮助</p></blockquote><h4 id="备份机器中的源文件"><a class="markdownIt-Anchor" href="#备份机器中的源文件"></a> 备份机器中的源文件</h4><p>备份的目的是为了操作失败后可以随时回滚</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure><h4 id="下载新的-centos-baserepo-到-etcyumreposd"><a class="markdownIt-Anchor" href="#下载新的-centos-baserepo-到-etcyumreposd"></a> 下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/</h4><p>我们的yum源配置文件在/etc/yum.repos.d/目录中，所以我们将阿里云的repo文件下载到该目录下（可以根据系统版本到http://mirrors.aliyun.com/repo/查看对应的文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 要下载与系统版本一致的repo文件</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><h4 id="运行yum-makecache生成缓存"><a class="markdownIt-Anchor" href="#运行yum-makecache生成缓存"></a> 运行yum makecache生成缓存</h4><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><p>若出现Couldn’t resolve host '<a href="http://mirrors.cloud.aliyuncs.com" target="_blank" rel="noopener">mirrors.cloud.aliyuncs.com</a>’的信息，则表示网络不通，可以使用下面命令修改repo文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们安装的Linux虚拟机或购买的云服务器上默认使用的yum源在国内有时候会传输很慢，现在大多我们在使用Linux之前都会修改一下yum源，以下以centos为例，将yum源修改为阿里云的。可以到https://developer.aliyun.c
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://luxiaowan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>kubernates调整nodePort端口范围</title>
    <link href="http://luxiaowan.github.io/2020/03/11/kubernates%E8%B0%83%E6%95%B4nodePort%E7%AB%AF%E5%8F%A3%E8%8C%83%E5%9B%B4/"/>
    <id>http://luxiaowan.github.io/2020/03/11/kubernates调整nodePort端口范围/</id>
    <published>2020-03-11T08:02:00.000Z</published>
    <updated>2020-03-11T08:12:05.657Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，k8s 集群 nodePort 分配的端口范围为：30000-32767，如果我们指定的端口不在这个范围就会报错：</p><blockquote><p>Error: release kong failed: Service “xxx” is invalid: spec.ports[0].nodePort: Invalid value: 12306: provided port is not in the valid range. The range of valid ports is 30000-32767</p></blockquote><p>所以我们修改 /etc/kubernetes/manifests/kube-apiserver.yaml 文件，在 command 下添加 <code>--service-node-port-range=1-65535</code> 参数，添加 nodePort 范围参数后会自动生效，无需进行其他操作：<br><code>vim /etc/kubernetes/manifests/kube-apiserver.yaml</code></p><p><img src="/images/image-20200311160941739.png" alt="image-20200311160941739"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认情况下，k8s 集群 nodePort 分配的端口范围为：30000-32767，如果我们指定的端口不在这个范围就会报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: release kong failed: Service “xxx” is invalid:
      
    
    </summary>
    
    
      <category term="kubernates" scheme="http://luxiaowan.github.io/categories/kubernates/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7.7安装kubernates集群</title>
    <link href="http://luxiaowan.github.io/2020/03/11/Centos7.7%E5%AE%89%E8%A3%85kubernates%E9%9B%86%E7%BE%A4/"/>
    <id>http://luxiaowan.github.io/2020/03/11/Centos7.7安装kubernates集群/</id>
    <published>2020-03-11T05:11:00.000Z</published>
    <updated>2020-03-11T06:52:52.764Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h4><p>本文主要讲解使用kubeadm搭建高可用的集群，这种方式是最简单最快的。</p><h4 id="安装步骤"><a class="markdownIt-Anchor" href="#安装步骤"></a> 安装步骤</h4><p>我们安装k8s的机器资源条件如下：</p><ul><li>centos7.7</li><li>内存不低于2G，CPU不少于2核，否则在安装的时候会报错</li><li>集群中的所有机器都要保证网络连通性</li><li>相关端口开放</li><li>swap关闭</li></ul><ol><li><p>更新系统</p><p>在开始安装服务之前，我们先更新一下yum源，然后安装相关的软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新yum源</span></span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装git(可选)</span></span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure></li><li><p>禁用swap分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭swap分区，该命令只是临时关闭，机器重启后还会自动打开</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久性关闭swap分区，禁止机器重启后自动打开</span></span><br><span class="line">sed -i '/ swap / s/^/#/' /etc/fstab</span><br></pre></td></tr></table></figure></li><li><p>更换yum源为国内镜像</p><p>centos的yum源默认为国外的，如果你的服务器是在国内，那么可能访问不了，所以我们需要把yum的源更换为国内的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里有一个注意点，就是下面的Centos-7.repo，这里因为我们使用的centos7，如果你的系统是centos8，那么就改成Centos-8.repo，也就是改成相对应的版本，否则yum安装不了软件</span></span><br><span class="line">cd /etc/yum.repos.d  &amp;&amp; \</span><br><span class="line">sudo mv CentOS-Base.repo CentOS-Base.repo.bak &amp;&amp; \</span><br><span class="line">sudo wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo &amp;&amp; \</span><br><span class="line">yum clean all &amp;&amp; \</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li><li><p>安装docker环境</p><p>k8s内部可以支持多种容器，我们最常使用的就是docker，所以我们这里也以docker为基础</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装docker依赖包</span></span><br><span class="line">yum install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加docker库</span></span><br><span class="line">yum-config-manager --add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新源</span></span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装docker</span></span><br><span class="line">yum install containerd.io-1.2.10 \</span><br><span class="line">  docker-ce-19.03.4 \</span><br><span class="line">  docker-ce-cli-19.03.4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置docker daemon</span></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  "exec-opts": ["native.cgroupdriver=systemd"],</span><br><span class="line">  "log-driver": "json-file",</span><br><span class="line">  "log-opts": &#123;</span><br><span class="line">    "max-size": "100m"</span><br><span class="line">  &#125;,</span><br><span class="line">  "storage-driver": "overlay2",</span><br><span class="line">  "storage-opts": [</span><br><span class="line">    "overlay2.override_kernel_check=true"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建docker.service.d</span></span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用docker.service</span></span><br><span class="line">systemctl enable docker.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载&amp;重启docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>安装完之后使用docker -v查看版本</p></li><li><p>更换docker为国内源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">"registry-mirrors": ["https://registry.docker-cn.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启docker</span></span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure></li><li><p>安装kubeadm、kubelet、和kubectl</p><blockquote><p>kubeadm 负责引导集群，kubelet 在集群的所有节点运行，负责启动 pods 和 containers，kubectl 则负责与集群交互，我们需要在所有节点安装这些组件</p></blockquote><ol><li><p>配置k8s国内源</p><p>我们把k8s的源修改为阿里云的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置国内源</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>关闭SELinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</span><br></pre></td></tr></table></figure></li><li><p>配置网络参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保 br_netfilter 模块已经加载</span></span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure></li><li><p>安装并启动kubeadm、kubelet、和kubectl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">systemctl enable --now kubelet</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用kubeadm初始化集群</p><blockquote><p>因为我的服务器在国内，且由于 kubeadm 初始化集群的依赖镜像在国内访问不了，所以初始化集群之前先使用国内源拉取依赖镜像</p></blockquote><ol><li><p>拉取依赖镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取依赖镜像列表</span></span><br><span class="line">kubeadm config images list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用阿里源下载 K8s 依赖镜像</span></span><br><span class="line">kubeadm config images list |sed -e 's/^/docker pull /g' -e 's#k8s.gcr.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g' |sh -x</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过docker tag修改镜像与国外镜像名称相同，这样的目的是在初始化的时候，docker会先在本地查找，若本地已有镜像则不会再去远程拉取，等于来了一招瞒天过海</span></span><br><span class="line">docker images |grep registry.cn-hangzhou.aliyuncs.com/google_containers |awk '&#123;print "docker tag ",$1":"$2,$1":"$2&#125;' |sed -e 's#registry.cn-hangzhou.aliyuncs.com/google_containers#k8s.gcr.io#2' |sh -x</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除原镜像，这个可选</span></span><br><span class="line">docker images |grep registry.cn-hangzhou.aliyuncs.com/google_containers |awk '&#123;print "docker rmi ", $1":"$2&#125;' |sh -x</span><br></pre></td></tr></table></figure></li><li><p>master节点初始化</p><p>我们使用kubeadm init指令初始化master节点，具体的参数可参考官方文档：<a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> local_ip是本机局域网ip，kubectl_version是我们镜像的版本</span></span><br><span class="line">kubeadm init --apiserver-advertise-address=&lt;local_ip&gt; --kubernetes-version=&lt;kubectl_version&gt; --pod-network-cidr=10.244.0.0/16 --v=5</span><br></pre></td></tr></table></figure><p>执行成功之后，日志会打印出下面语句，并且会告知我们节点加入的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> root或非root用户均可执行</span></span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure></li><li><p>开启使用master节点资源</p><p>默认master节点是不参与pod调度的，这样对于master节点的资源来说有点太过浪费，所以我们通过下面的命令使master节点也参与pod调度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure></li></ol></li><li><p>添加网络组件</p><p>我们通过kubectl get nodes查看集群内的节点，当前应该只有master一个节点，但是节点的状态为NotReady，查看coredns的pod（kubectl get pod --all-namespaces），会发现coredns处于pending状态，原因就是我们还未安装网络组件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 网络组件我们选择WeaveNet，安装完之后稍等一会就可以了</span></span><br><span class="line">kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"</span><br></pre></td></tr></table></figure></li><li><p>向集群中添加node节点</p><p>每一台node都需要操作从1~6的步骤，然后我们使用kubeadm join来添加到集群中，这里的token是在master节点创建的，我们可以使用<code>kubeadm token list</code>命令查看可用的token，如果没有可用的token，那么我们使用<code>kubeadm token create</code>创建新的token，一个token的有效期为24小时</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.0.54:6443 --token 9dmyq2.c50cvh32r62o6jlx \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:4640dd5d3788968d86ce3cb792c1e368586ee6731de5a07ad8ad331926a2f233</span><br></pre></td></tr></table></figure></li><li><p>验证</p><p>加入之后我们在master节点通过<code>kubectl get nodes</code>来查看所有的节点，验证是否加入成功。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础&quot;&gt;&lt;/a&gt; 基础&lt;/h4&gt;
&lt;p&gt;本文主要讲解使用kubeadm搭建高可用的集群，这种方式是最简单最快的。&lt;/p&gt;
&lt;h4 id=&quot;安装步骤&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
    
      <category term="kubernates" scheme="http://luxiaowan.github.io/categories/kubernates/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos中安装rz和sz替代ftp</title>
    <link href="http://luxiaowan.github.io/2020/03/10/Centos%E4%B8%AD%E5%AE%89%E8%A3%85rz%E5%92%8Csz%E6%9B%BF%E4%BB%A3ftp/"/>
    <id>http://luxiaowan.github.io/2020/03/10/Centos中安装rz和sz替代ftp/</id>
    <published>2020-03-10T04:44:00.000Z</published>
    <updated>2020-03-10T04:47:26.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>lrzsz 官网入口：<a href="http://freecode.com/projects/lrzsz/" target="_blank" rel="noopener">http://freecode.com/projects/lrzsz/</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装lrzsz</span></span><br><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure><p>安装完成之后就可以直接使用了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 上传文件</span></span><br><span class="line">rz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载文件</span></span><br><span class="line">sz</span><br></pre></td></tr></table></figure><p>操作很简单</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;lrzsz 官网入口：&lt;a href=&quot;http://freecode.com/projects/lrzsz/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://freecode.com/projects/lrzsz/&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://luxiaowan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s中YAML文件解释</title>
    <link href="http://luxiaowan.github.io/2020/03/10/k8s%E4%B8%ADYAML%E6%96%87%E4%BB%B6%E8%A7%A3%E9%87%8A/"/>
    <id>http://luxiaowan.github.io/2020/03/10/k8s中YAML文件解释/</id>
    <published>2020-03-09T16:30:00.000Z</published>
    <updated>2020-03-09T16:34:54.823Z</updated>
    
    <content type="html"><![CDATA[<h4 id="yaml语法规则"><a class="markdownIt-Anchor" href="#yaml语法规则"></a> YAML语法规则</h4><blockquote><p>大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tal键，只允许使用空格 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 ”#” 表示注释，从这个字符一直到行尾，都会被解析器忽略</p><p>在Kubernetes中，只需要知道两种结构类型即可： Lists Maps</p></blockquote><p>####YAML属性解释</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml格式的pod定义文件完整内容：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>       <span class="comment">#必选，版本号，例如v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span>       <span class="comment">#必选，Pod</span></span><br><span class="line"><span class="attr">metadata:</span>       <span class="comment">#必选，元数据</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">string</span>       <span class="comment">#必选，Pod名称</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">string</span>    <span class="comment">#必选，Pod所属的命名空间</span></span><br><span class="line"><span class="attr">  labels:</span>      <span class="comment">#自定义标签</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span>     <span class="comment">#自定义标签名字</span></span><br><span class="line"><span class="attr">  annotations:</span>       <span class="comment">#自定义注释列表</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">spec:</span>         <span class="comment">#必选，Pod中容器的详细定义</span></span><br><span class="line"><span class="attr">  containers:</span>      <span class="comment">#必选，Pod中容器列表</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">string</span>     <span class="comment">#必选，容器名称</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">string</span>    <span class="comment">#必选，容器的镜像名称</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">[Always</span> <span class="string">| Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span></span><br><span class="line"><span class="string"></span><span class="attr">    command:</span> <span class="string">[string]</span>    <span class="comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class="line"><span class="attr">    args:</span> <span class="string">[string]</span>     <span class="comment">#容器的启动命令参数列表</span></span><br><span class="line"><span class="attr">    workingDir:</span> <span class="string">string</span>     <span class="comment">#容器的工作目录</span></span><br><span class="line"><span class="attr">    volumeMounts:</span>    <span class="comment">#挂载到容器内部的存储卷配置</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span>     <span class="comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">string</span>    <span class="comment">#存储卷在容器内mount的绝对路径，应少于512字符</span></span><br><span class="line"><span class="attr">      readOnly:</span> <span class="string">boolean</span>    <span class="comment">#是否为只读模式</span></span><br><span class="line"><span class="attr">    ports:</span>       <span class="comment">#需要暴露的端口库号列表</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span>     <span class="comment">#端口号名称</span></span><br><span class="line"><span class="attr">      containerPort:</span> <span class="string">int</span>   <span class="comment">#容器需要监听的端口号</span></span><br><span class="line"><span class="attr">      hostPort:</span> <span class="string">int</span>    <span class="comment">#容器所在主机需要监听的端口号，默认与Container相同</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">string</span>     <span class="comment">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line"><span class="attr">    env:</span>       <span class="comment">#容器运行前需设置的环境变量列表</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span>     <span class="comment">#环境变量名称</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">string</span>    <span class="comment">#环境变量的值</span></span><br><span class="line"><span class="attr">    resources:</span>       <span class="comment">#资源限制和请求的设置</span></span><br><span class="line"><span class="attr">      limits:</span>      <span class="comment">#资源限制的设置</span></span><br><span class="line"><span class="attr">        cpu:</span> <span class="string">string</span>    <span class="comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span><br><span class="line"><span class="attr">        memory:</span> <span class="string">string</span>     <span class="comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span><br><span class="line"><span class="attr">      requests:</span>      <span class="comment">#资源请求的设置</span></span><br><span class="line"><span class="attr">        cpu:</span> <span class="string">string</span>    <span class="comment">#Cpu请求，容器启动的初始可用数量</span></span><br><span class="line"><span class="attr">        memory:</span> <span class="string">string</span>     <span class="comment">#内存清楚，容器启动的初始可用数量</span></span><br><span class="line"><span class="attr">    livenessProbe:</span>     <span class="comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span></span><br><span class="line"><span class="attr">      exec:</span>      <span class="comment">#对Pod容器内检查方式设置为exec方式</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">[string]</span>  <span class="comment">#exec方式需要制定的命令或脚本</span></span><br><span class="line"><span class="attr">      httpGet:</span>       <span class="comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        port:</span> <span class="string">number</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        scheme:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        HttpHeaders:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      tcpSocket:</span>     <span class="comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span><br><span class="line"><span class="attr">         port:</span> <span class="string">number</span></span><br><span class="line"><span class="attr">       initialDelaySeconds:</span> <span class="number">0</span>  <span class="comment">#容器启动完成后首次探测的时间，单位为秒</span></span><br><span class="line"><span class="attr">       timeoutSeconds:</span> <span class="number">0</span>   <span class="comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span><br><span class="line"><span class="attr">       periodSeconds:</span> <span class="number">0</span>    <span class="comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span><br><span class="line"><span class="attr">       successThreshold:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">       failureThreshold:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">       securityContext:</span></span><br><span class="line"><span class="attr">         privileged:</span><span class="literal">false</span></span><br><span class="line"><span class="attr">    restartPolicy:</span> <span class="string">[Always</span> <span class="string">| Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span></span><br><span class="line"><span class="string"></span><span class="attr">    nodeSelector:</span> <span class="string">obeject</span>  <span class="comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span></span><br><span class="line"><span class="attr">    imagePullSecrets:</span>    <span class="comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    hostNetwork:</span><span class="literal">false</span>      <span class="comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span><br><span class="line"><span class="attr">    volumes:</span>       <span class="comment">#在该pod上定义共享存储卷列表</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span>     <span class="comment">#共享存储卷名称 （volumes类型有很多种）</span></span><br><span class="line"><span class="attr">      emptyDir:</span> <span class="string">&#123;&#125;</span>     <span class="comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span><br><span class="line"><span class="attr">      hostPath:</span> <span class="string">string</span>     <span class="comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">string</span>     <span class="comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span><br><span class="line"><span class="attr">      secret:</span>      <span class="comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span></span><br><span class="line"><span class="attr">        scretname:</span> <span class="string">string</span>  </span><br><span class="line"><span class="attr">        items:</span>     </span><br><span class="line"><span class="attr">        - key:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      configMap:</span>     <span class="comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        items:</span></span><br><span class="line"><span class="attr">        - key:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;yaml语法规则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#yaml语法规则&quot;&gt;&lt;/a&gt; YAML语法规则&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tal键，只允许使用空格 缩进的
      
    
    </summary>
    
    
      <category term="kubernates" scheme="http://luxiaowan.github.io/categories/kubernates/"/>
    
    
  </entry>
  
  <entry>
    <title>Git修改已提交用户信息</title>
    <link href="http://luxiaowan.github.io/2020/02/11/Git%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/"/>
    <id>http://luxiaowan.github.io/2020/02/11/Git修改已提交用户信息/</id>
    <published>2020-02-11T08:46:00.000Z</published>
    <updated>2020-02-11T10:03:16.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改git用户名和邮箱"><a class="markdownIt-Anchor" href="#修改git用户名和邮箱"></a> 修改Git用户名和邮箱</h3><ol><li>修改某一项目配置</li></ol><p>终端进入到项目所在目录下，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config user.name "cc"</span><br><span class="line"></span><br><span class="line">git config user.email "cc@cc.cc"</span><br></pre></td></tr></table></figure><ol start="2"><li>修改全局配置</li></ol><p>打开终端，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "cc"</span><br><span class="line"></span><br><span class="line">git config --global user.email "cc@cc.cc"</span><br></pre></td></tr></table></figure><h3 id="修改项目最近一次提交信息"><a class="markdownIt-Anchor" href="#修改项目最近一次提交信息"></a> 修改项目最近一次提交信息</h3><ol><li>修改提交用户</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author="username &lt;email&gt;"</span><br></pre></td></tr></table></figure><ol start="2"><li>修改提交备注信息</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>然后执行之后跳转到新的页面</p><p><img src="/images/image-20200211171804477.png" alt="image-20200211171804477"></p><p>修改顶部备注信息然后保存即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修改git用户名和邮箱&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#修改git用户名和邮箱&quot;&gt;&lt;/a&gt; 修改Git用户名和邮箱&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;修改某一项目配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;终端进入到项目所在目录下，执行以
      
    
    </summary>
    
    
      <category term="Git" scheme="http://luxiaowan.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux禁止root用户远程登录</title>
    <link href="http://luxiaowan.github.io/2020/02/11/Linux%E7%A6%81%E6%AD%A2root%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>http://luxiaowan.github.io/2020/02/11/Linux禁止root用户远程登录/</id>
    <published>2020-02-11T03:35:00.000Z</published>
    <updated>2020-02-11T05:05:54.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加一个新用户"><a class="markdownIt-Anchor" href="#添加一个新用户"></a> 添加一个新用户</h3><ol><li><p>添加新用户</p><p>useradd cc</p></li><li><p>设置新用户密码</p><p>passwd cc</p></li></ol><h3 id="修改etcsudoers文件"><a class="markdownIt-Anchor" href="#修改etcsudoers文件"></a> 修改/etc/sudoers文件</h3><p>找到## Allow root to run any commands anywhere</p><p>在<code>root ALL=(ALL) ALL</code>下方添加语句<code>cc ALL=(ALL) ALL</code></p><p><img src="/images/image-20200211113749629.png" alt="image-20200211113749629"></p><blockquote><p>此文件为readonly文件，保存使用<code>wq!</code>命令</p></blockquote><h3 id="修改etcsshsshd_config文件"><a class="markdownIt-Anchor" href="#修改etcsshsshd_config文件"></a> 修改/etc/ssh/sshd_config文件</h3><p>找到<code>PermitRootLogin yes</code>修改为<code>PermitRootLogin no</code></p><p>保存之后执行<code>service sshd restart</code>命令即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;添加一个新用户&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#添加一个新用户&quot;&gt;&lt;/a&gt; 添加一个新用户&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加新用户&lt;/p&gt;
&lt;p&gt;useradd cc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置新用户
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://luxiaowan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>MacBook连接iPhone不稳定</title>
    <link href="http://luxiaowan.github.io/2020/02/11/MacBook%E8%BF%9E%E6%8E%A5iPhone%E4%B8%8D%E7%A8%B3%E5%AE%9A/"/>
    <id>http://luxiaowan.github.io/2020/02/11/MacBook连接iPhone不稳定/</id>
    <published>2020-02-11T01:32:00.000Z</published>
    <updated>2020-02-11T01:34:27.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p>MacBook经常在使用USB连接iPhone的时候不稳定，连接一跳一跳的</p><h1 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h1><p>在电脑终端下运行<code>sudo killall -STOP -c usbd</code>，然后输入电脑密码，然后重新插上连接线，就OK了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题&quot;&gt;&lt;/a&gt; 问题&lt;/h1&gt;
&lt;p&gt;MacBook经常在使用USB连接iPhone的时候不稳定，连接一跳一跳的&lt;/p&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a class=&quot;markdown
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://luxiaowan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>头条、美团、滴滴、京东等大厂面试题</title>
    <link href="http://luxiaowan.github.io/2019/12/25/%E5%88%B7%E9%A2%98/"/>
    <id>http://luxiaowan.github.io/2019/12/25/刷题/</id>
    <published>2019-12-24T16:35:00.000Z</published>
    <updated>2019-12-24T16:36:27.409Z</updated>
    
    <content type="html"><![CDATA[<h4 id="头条"><a class="markdownIt-Anchor" href="#头条"></a> 头条</h4><ol><li><p>聊项目，画项目架构图，画一个用户从发起请求到接收到响应，中间经过哪些服务，每个服务做什么事情的流程图。</p></li><li><p>讲项目中的难点、挑战，你是如何解决的？</p></li><li><p>Redis 中有几种类型 &amp; 各自底层怎么实现的 &amp; 项目中哪个地方用了什么类型，怎么使用的？</p></li><li><p>Redis如何实现分布式锁，zk如何实现分布式锁，两者的区别。如果service还没执行完，分布式锁在Redis中已经过期了，怎么解决这种问题？</p></li><li><p>synchronized底层实现，加在方法上和加在同步代码块中编译后的区别、类锁、对象锁。</p></li><li><p>锁升级的过程。</p></li><li><p>Java运行时区域及各个区域的作用、对GC的了解、Java内存模型及为什么要这么设计？</p></li><li><p>对索引的理解，组合索引，索引的最佳实践</p></li><li><p>countDownLatch用过没有，在项目中如何使用的，对AQS的了解。</p></li><li><p>写生产者消费者问题，考虑高并发的情况，可以使用Java 类库，白纸写代码。</p></li><li><p>设计一个发号器，考虑集群和高并发的情况，要求发号器生成的id是递增趋势，通过id可以区分出来是今天生成的id还是昨天生成的id，但是生成的id中不能直接带有日期，要具有一定的混淆功能，白纸写代码。</p></li><li><p>一个二位数组，每个元素都可以往上下左右四个方向走，寻找最长递增路径。如下图所示，最长递增路径即红色字体路径。白纸写代码。</p><p>![image-20190924230411189](/Users/chuan/Library/Application Support/typora-user-images/image-20190924230411189.png)</p></li></ol><h4 id="美团"><a class="markdownIt-Anchor" href="#美团"></a> 美团</h4><ol><li><p>数据库和缓存的一致性问题。先更新数据库，再更新缓存，若更新完数据库了，还没有更新缓存，此时有请求过来了，访问到了缓存中的数据，怎么办？</p></li><li><p>聚簇索引/非聚簇索引，MySQL索引底层实现，为什么不用B-Tree，为什么不用hash，叶子结点存放的是数据还是指向数据的内存地址，使用索引需要注意的几个地方？</p></li><li><p>MySQL默认的事务隔离级别，MVCC、RR怎么实现的？RC如何实现的？</p></li><li><p>MySQL间隙锁有没有了解，死锁有没有了解，写一段会造成死锁的SQL语句，死锁发生了如何解决，MySQL有没有提供什么机制去解决死锁</p></li><li><p>谈下对GC的了解，何为垃圾，有哪些GC算法，有哪些垃圾回收器，cms和g1的区别，还有一个直击灵魂的问题，看过cms的源码吗？</p></li><li><p>有没有排查过线上OOM的问题，如何排查的？</p></li><li><p>有没有使用过JVM自带的工具，如何使用的？</p></li><li><p>假设有下图所示的一个Full GC 的图，纵向是内存使用情况，横向是时间，你如何排查这个Full GC 的问题，怎么去解决你说出来的这些问题？</p><p>![image-20190924230348754](/Users/chuan/Library/Application Support/typora-user-images/image-20190924230348754.png)</p></li><li><p>说说对Java中集合类的理解，项目中用过哪些，哪个地方用的，如何使用的？</p></li><li><p>对CAS的理解，CAS带来的问题，如何解决这些问题？</p></li><li><p>volatile底层、synchronized底层、锁升级的过程、MESI</p></li><li><p>Ehcache支持哪些缓存？</p></li><li><p>JUC有研究没有，讲一讲？</p></li><li><p>聊项目，画项目架构图，画一个用户从发起请求到接收到响应，中间经过哪些服务，每个服务做什么事情的流程图。</p></li><li><p>讲项目中的难点、挑战，如何解决的，项目这一块会问的特别细。</p></li><li><p>如何保证RocketMQ 消息的顺序性，如何解决重复消费问题。</p></li><li><p>项目中如何保证接口的幂等操作。</p></li><li><p>讲一讲对Redis 的了解，项目中如何使用的，哪个地方使用的，为什么要使用？</p></li><li><p>哨兵机制、Redis 两种备份方式的区别，项目中用的哪种，为什么？</p></li><li><p>讲一讲对分布式锁的了解</p></li><li><p>项目中系统监控怎么做的？</p></li><li><p>如何理解Spring中的AOP 和 IOC，以及DI，读过Spring源码没有？</p></li><li><p>读过MyBatis源码没有？</p></li><li><p>说一个你了解最多的框架，说出你的理解。</p></li><li><p>如何理解分布式事务，为什么会出现这个问题，如何去解决，了解哪些分布式事务中间件？</p></li><li><p>聊一聊对分库分表的理解。</p></li><li><p>Hystrix功能和在项目中怎么使用的？Hystrix怎么检测断路器是否要开启/关闭？Hystrix实现原理？除Hystrix之外的其他熔断限流中间件有了解没有，了解多少说多少？</p></li><li><p>Dubbo有了解没有？</p></li><li><p>怎么理解Java 中和 MySQL中的乐观锁、悲观锁？</p></li><li><p>一致性hash</p></li></ol><h4 id="滴滴"><a class="markdownIt-Anchor" href="#滴滴"></a> 滴滴</h4><ol><li>聊项目，画项目架构图，画一个用户从发起请求到接收到响应，中间经过哪些服务，每个服务做什么事情的流程图，讲数据库设计。</li><li>处理过线上OOM问题没有，如何处理的？</li><li>遇到过线上服务器CPU飙高的情况没有，如何处理的？</li><li>线上有没有遇到其他问题，如何处理的？</li><li>对线程池的理解，项目中哪个地方使用了，如何使用的，用的Excutor框架中的哪个实现类，为什么用这个</li><li>对CAS的理解，CAS带来的问题，如何解决这些问题?</li><li>volatile底层、synchronized底层、锁升级的过程、MESI</li><li>对MySQL索引的理解、对组合索引的理解、索引的最佳实践</li><li>分布式锁的实现、对比Redis分布式锁 &amp; ZK分布式锁</li><li>唯一ID如何实现的，Snowflake实现原理，Snowflake有哪些问题，如何避免根据订单号可以推算出今天的订单量</li><li>如果线上一个功能是用栈结构实现的，使用过程中要注意哪些问题，为什么？</li><li>怎么理解线程安全？</li><li>怎么理解接口幂等？项目中如何保证的接口幂等？</li><li>怎么理解微服务，服务如何划分，可以从哪几个方面去划分，为什么这样划分，微服务带来了哪些好处，哪些坏处，如何看待这个问题？</li><li>如何理解网关，网关带来的好处和坏处，如何解决</li><li>Hystrix功能  &amp; 在项目中怎么使用的 &amp; Hystrix怎么检测断路器是否要开启/关闭 &amp;Hystrix实现原理</li><li>怎么理解命令模式和观察者模式，手写一个观察者模式或者命令模式的代码，策略模式也行</li><li>掌握哪些设计模式，常用哪些，项目中如何使用的，为什么用这个，不用那个？手写一个线程安全的单例模式</li><li>如何设计一个秒杀系统？</li><li>如果我现在就是要实现每秒10w请求，不能熔断限流，如何去设计？</li><li>假设现在双十一零点，大量下单请求，如何对这些订单进行分库分表，为什么？</li><li>服务A调用服务B中一个接口，服务B调用服务C中一个接口，如何实现若服务B响应服务A成功，则服务C一定响应服务B成功，需要考虑系统性能问题？</li><li>递归使用中有什么需要注意的地方，递归写法一般可以用什么去替换？</li><li>有两个表，table a，table b，写SQL查询出仅在table a中的数据、仅在table b中的数据、既在table a 又在table b 中的数据？</li><li>Spring 源码有了解没有？</li><li>MyBatis源码有了解没有？</li><li>MySQL事务隔离级别、MVCC？</li></ol><h4 id="京东"><a class="markdownIt-Anchor" href="#京东"></a> 京东</h4><ol><li>一个final修饰的属性，定义的时候没有初始化，在无参构造函数中初始化，可以吗，为什么</li><li>说说对Java中集合类的理解，项目中用过哪些，哪个地方用的，如何使用的，为什么不用其他的集合类</li><li>HashMap，concurrentHashMap底层实现</li><li>List删除是怎么实现的，遍历的时候可以删除吗？为什么?</li><li>Redis中有哪些数据结构，了解过其底层怎么实现的吗，和Java中相似的数据结构的对比？</li><li>Redis是单线程的还是多线程的，为什么这么快？</li><li>Redis Hash中某个key过大，变为String类型的大key，怎么处理，使用中如何避免出现这种问题?</li><li>设计模式在项目中哪个地方用到了，怎么使用的，能不能画一个你熟悉的设计模式的UML图，手写单例模式，手写静态内部类实现的单例模式。</li><li>讲一讲MySQL索引，实际工作中，哪些场景用了B+Tree索引，哪些场景用了hash索引？</li><li>explain 可以看到哪些信息，什么信息说明什么，explain的结果列讲一下</li><li>Spring源码看过没有，会多少讲多少？</li><li>MyBatis源码看过没有，会多少讲多少？</li><li>CAS的缺点，如何解决？</li><li>AQS、countDownLatch如何实现？</li><li>线程池如何实现，核心线程数和最大线程数设置成多少，为什么这么设置，项目中哪个地方使用了线程池，使用时需要注意什么</li><li>MySQL事务隔离级别，幻读，脏读，项目中用什么事务隔离级别，为什么？</li><li>volatile底层原理、synchronized实现机制</li><li>对XA、TCC的理解，了解哪些分布式事务框架，有什么缺点？</li><li>Feign 和 Dubbo，了解多少说多少？</li><li>Eureka 和 Zookeeper，了解多少说多少？</li><li>Hystrix 和 sentinel，了解多少说多少？</li><li>Spring Cloud Alibaba，了解多少说多少？</li><li>对分库分表、读写分离的了解，了解多少说多少？</li><li>画一下Java 线程几个状态及状态之间互相转换的图？</li><li>聊项目，画项目架构图，画一个用户从发起请求到接收到响应，中间经过哪些服务，每个服务做什么事情的流程图，讲数据库设计具体到部分表中有哪些字段？</li><li>部门体量比较大，可能需要加班，到凌晨两三点的那种，也可能通宵，通宵是大促期间，你能接受吗？</li><li>也会加班到十点，这个不是大促期间，但也不是每天，非常态情况，你能接受吗，你在哪里住，过来要多久，有男朋友吗？</li></ol><h4 id="火币"><a class="markdownIt-Anchor" href="#火币"></a> 火币</h4><ol><li>Kafka 如何保证消息顺序消费、在consumer group 中新增一个consumer  会提高消费消息的速度吗、那如果我想提高消息消费的速度，我要怎么办？</li><li>Redis几种数据结构及底层，项目中如何使用的Redis？</li><li>哨兵机制、选举算法</li><li>一致性hash</li><li>Redis是单线程的还是多线程的，为什么速度这么快？</li><li>多路复用的几种方式以及区别？</li><li>对线程池的理解，在项目中如何使用的，多个线程之间如何共享数据，多个进程之间如何共享数据？</li><li>HashMap、concurrentHashMap的区别及底层实现、HashMap和HashTable 的区别？</li><li>什么是红黑树，什么是B-Tree，为什么HashMap中用红黑树不用其他树？</li><li>对MySQL索引的理解，为什么MySQL索引中用B+Tree，不用B-Tree 或者其他树，为什么不用hash 索引？</li><li>数据库和缓存的双写一致性问题？</li></ol><h4 id="每日一淘"><a class="markdownIt-Anchor" href="#每日一淘"></a> 每日一淘</h4><ol><li>用过哪些Object类的方法，如何使用的</li><li>Java如何实现序列化的，Serialization底层如何实现的</li><li>countDownLatch如何实现的</li><li>项目中监控报警机制如何做的，说说你的了解</li><li>线上服务器CPU飙高，如何处理这个问题</li><li>服务A调用服务B，用户请求服务A，发现返回较慢，如何定位这个问题</li><li>TIME_WAIT是什么状态还记得吗，什么情况下网络会出现这个状态</li></ol><h4 id="linkedme"><a class="markdownIt-Anchor" href="#linkedme"></a> linkedme</h4><ol><li>内核态和用户态、cas 和 sout 哪个用到了内核态和用户态的切换</li><li>哪些典型的应用用的是UDP？</li><li>线程池有了解吗，项目中如何使用的？</li><li>计算密集型/IO密集型任务分别如何设置线程池的核心线程数和最大线程数，为什么这么设置？</li><li>假如我下午5点要和5个人一起开会，但是这5个人现在都出去了，不在公司，但是今天会回来，问，我如何开这场会，用Java 并发方面的知识回答。</li></ol><h4 id="算法题"><a class="markdownIt-Anchor" href="#算法题"></a> 算法题</h4><ol><li><p>[1,1,2,2,3,4,4,5,5,5]  找出不重复的元素（黄包车）</p></li><li><p>反转链表，要求时间复杂度O(N)，空间复杂度O(1)  （火币）</p></li><li><p>非递归实现斐波那契数列 （爱奇艺）</p></li><li><p>这一周股市价格为[2,6,1,4,8]，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少 （爱奇艺）</p></li><li><p>按照箭头方向查找二叉树 （金山云）</p><p>![image-20190924230728819](/Users/chuan/Library/Application Support/typora-user-images/image-20190924230728819.png)</p></li><li><p>表a b c之间用ID关联，求阴影部分的数据  （金山云）</p><p>![image-20190924230750484](/Users/chuan/Library/Application Support/typora-user-images/image-20190924230750484.png)</p></li><li><p>一个整形无序数组，里面三个数只和等于一个目标值，求这三个数  （小米）</p></li><li><p>链表问题  （小米）</p><p>![image-20190924230830166](/Users/chuan/Library/Application Support/typora-user-images/image-20190924230830166.png)</p></li><li><p>扑克牌问题  （小米）<br>有十张扑克牌，从上面开始抽，抽出一张放桌子上，然后再抽出一张放扑克牌的最下面，这样循环往复的操作，直到手里的牌都没有了。这时，桌子上牌的顺序正好是1 2 3 4 5 6 7 8 9 10。要求写代码求出原顺序</p></li><li><p>手写大顶堆 （linkedMe）</p></li><li><p>手写LRU 算法 （火币）</p></li><li><p>字符串相加  （滴滴）<br>两个数字类型的字符串，直接转int或者double肯定都放不下，然后求这两个数的和，返回值还是字符串，15分钟时间，要求无Bug</p></li><li><p>寻找目标值位置  （滴滴）<br>有一个二维数组，数组横向有序，纵向有序，求目标值的位置，10分钟时间</p></li><li><p>求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）</p></li><li><p>反转int类型的值x，不要借用String，只用int 即可。&amp;&amp; 针对该程序，写出其应有的测试用例 （美团）</p></li><li><p>top K 问题（每日一淘）</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;头条&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#头条&quot;&gt;&lt;/a&gt; 头条&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;聊项目，画项目架构图，画一个用户从发起请求到接收到响应，中间经过哪些服务，每个服务做什么事情的流程图。&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
      <category term="面试" scheme="http://luxiaowan.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>工程师和程序员的区别</title>
    <link href="http://luxiaowan.github.io/2019/12/21/%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%92%8C%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://luxiaowan.github.io/2019/12/21/工程师和程序员的区别/</id>
    <published>2019-12-20T17:03:00.000Z</published>
    <updated>2019-12-20T17:03:48.136Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开一个杂谈的类目，探讨平时工作中遇到的趣事，可能偶尔也会转载一些其他地方看到的有意思的行业趣事，纯属一乐。</p></blockquote><h4 id="开端"><a class="markdownIt-Anchor" href="#开端"></a> 开端</h4><p>今天下班后，公司里一个工作多年的小朋友找我闲聊，然后聊着聊着不知为啥聊到了行业上：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">小朋友：串串，你为什么不愿意带团队？</span><br><span class="line">串  串：不感兴趣！</span><br><span class="line">小朋友：你打算敲代码到<span class="number">35</span>岁吗😅</span><br><span class="line">串  串：<span class="number">40</span></span><br><span class="line">小朋友：就算技术上再牛逼，程序员在中国，到了四十也到头了吧</span><br><span class="line">串  串：工程师和程序员是两码事</span><br><span class="line">小朋友：本质区别在哪呢？你指有架构的能力吗？</span><br><span class="line">串  串：。。。。。。</span><br></pre></td></tr></table></figure><h4 id="我想说"><a class="markdownIt-Anchor" href="#我想说"></a> 我想说</h4><p>其实聊到这里，我突然发现很多做开发的同学对程序员和工程师这两个职业的认知好像并不是那么的分明，其实上面的对话还没有结束，我把工程师和程序员对等为进程和线程，做开发的同学应该都知道进程和线程的区别<code>(说不了解的回去把操作系统再细学一遍)</code>，为什么这么比喻呢<code>(其实这个比喻也不恰当，就是想把两者的区别扩大化一下，各位不要挑这个比喻啦，挑了我也不改)</code>，因为进程是由很多线程组成的，每一个线程都只处理进程中很小很小的一个模块，可能仅仅就是去把磁盘上的数据读到内存中而已，进程就像是一片森林，线程只是一棵树，我想表达的意思就是工程师所要掌握的知识技能，要比程序员多的多的多，也就是需要有大局观、知识广度、知识深度、行军线路等，而程序员是什么？<strong>你可以认为会写代码的都叫程序员，但只会写代码的程序员不能叫做工程师!!!</strong></p><h4 id="我还想说"><a class="markdownIt-Anchor" href="#我还想说"></a> 我还想说</h4><p>我们来看一下BOSS直聘上招聘程序员和工程师岗位JD的区别，这里可能要有图：</p><img src="/images/20711576856538.png" alt="Java高级程序员" style="zoom:25%;"><img src="/images/20721576856562.png" alt="20721576856562_.pic_hd" style="zoom:25%;">    <p>看到没，同样是高级岗位，但是岗位JD差别却很大，我们来分析一下区别：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java高级程序员：                            Java高级研发工程师：</span><br><span class="line">  无学历要求，会写代码就行                      最低科班出身</span><br><span class="line">  能用技术框架写代码，其他低要求                 业务、产品、研发均要擅长，自我驱动，技术攻坚，架构设计</span><br><span class="line">  强调技术要求，罗列一堆技术框架                 无技术框架要求，对软技能提到多次(代码洁癖、计算机原理、算法、行业经验、职责、质量、业务<span class="regexp">/产品/</span>设计<span class="regexp">/研发)</span></span><br></pre></td></tr></table></figure><p>我们从分析结果可以看出，一样的职级，一样的岗位，一样的技术，对程序员的要求是<strong>你会写代码就行</strong>，对工程师的要求是<strong>你不仅要会写代码，还要懂业务、产品、设计、产品和研发质量、数据结构和算法、计算机原理、软件工程学</strong>，现在是不是很清晰的知道了程序员和工程师的区别？</p><h4 id="我再说一下"><a class="markdownIt-Anchor" href="#我再说一下"></a> 我再说一下</h4><p>很多人会问：为什么国外的程序员到60岁还可以写代码，而中国的程序员35岁就要被淘汰？</p><p>其实行业淘汰的是程序员而不是工程师，一个有思想有眼界有能力的工程师是每一个公司都想聘用的，这一类人只会越老越吃香。</p><p>那么程序员为什么到35岁就会被淘汰呢？因为35岁还只是会写代码的人，身体已经被加班摧残的&quot;风烛残年&quot;了，每一年都会有一大批毕业生/培训生走入社会，他们身体健康、强壮、任劳任怨、爱加班，身为35岁的&quot;老年人&quot;，除了年龄大、发际线高、体重超标、脑子迟钝，还有哪一点比得过那么一群小鲜肉？哦~还有上有老下有小的山一般大的压力!!!</p><p>那么工程师为什么越老越吃香呢？因为工程师靠的不是写代码，靠的是自我沉淀和行业经验。</p><h4 id="总结下"><a class="markdownIt-Anchor" href="#总结下"></a> 总结下</h4><p>大家一开始都是从程序员做起的，为什么有的人可以成为工程师，有的人还是程序员呢？这就在于个人平时的积累了。</p><h4 id="玩"><a class="markdownIt-Anchor" href="#玩"></a> 玩</h4><p>最近一年面试了二十多个7、8年工作经验的人，很多人连最基本的技术知识和数据结构都不知道，记忆最深的就是有一个跟着7年的人跟我说：我会写代码，我能实现业务需求，不就行了么，我要知道那些原理干啥？</p><p>是不是又很多人也这么想的？这么想就对啦，等着30岁就被淘汰吧，35都不用等啦！</p><p><strong><font color="red">知道的越多，不知道的就越多</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开一个杂谈的类目，探讨平时工作中遇到的趣事，可能偶尔也会转载一些其他地方看到的有意思的行业趣事，纯属一乐。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;开端&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#开端&quot;&gt;
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://luxiaowan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker安装phpmyadmin</title>
    <link href="http://luxiaowan.github.io/2019/12/20/Docker%E5%AE%89%E8%A3%85phpmyadmin/"/>
    <id>http://luxiaowan.github.io/2019/12/20/Docker安装phpmyadmin/</id>
    <published>2019-12-20T09:00:00.000Z</published>
    <updated>2019-12-20T15:07:26.882Z</updated>
    
    <content type="html"><![CDATA[<p>我们在云服务器上的MySQL数据库在暴露端口和开启远程连接的情况下，是非常不安全的，昨天我的一台服务器就遭到了勒索病毒的攻击，让我支付0.06比特币赎回我的数据。还好那个库中没有重要数据，只是一个弃用了半年的数据库，密码我自己都忘记了，还好通过手段找回了密码，登上去之后就傻眼了。那么如果我们不想开启远程登录还想操作数据库，怎么办？怎么办？用phpmyadmin就可以解决了，不过phpmyadmin也有一定的风险，下面看下怎么玩。</p><h3 id="使用docker发布phpmyadmin并且连接已经存在的mysql容器"><a class="markdownIt-Anchor" href="#使用docker发布phpmyadmin并且连接已经存在的mysql容器"></a> 使用Docker发布phpmyadmin并且连接已经存在的MySQL容器</h3><ol><li><p>首先下载phpmyadmin的docker镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先查询镜像仓库里有哪些镜像</span></span><br><span class="line">docker search phpmyadmin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取star最多的镜像or拉取你想用的镜像</span></span><br><span class="line">docker pull docker.io/phpmyadmin/phpmyadmin</span><br><span class="line"></span><br><span class="line">拉取镜像需要一段时间，这个要看服务器的带宽网速了</span><br></pre></td></tr></table></figure></li><li><p>启动镜像，连接到已存在的MySQL容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动镜像</span></span><br><span class="line">docker run --name myadmin -p 80:80 -d --link mysql-db:db docker.io/phpmyadmin/phpmyadmin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改容器配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 将配置文件复制到宿主机中</span></span></span><br><span class="line">docker cp myadmin:/etc/phpmyadmin/config.inc.php .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改配置文件信息(这里修改的db就是在启动的时候--link后面指定的别名)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">cfg[<span class="string">'Servers'</span>][<span class="variable">$i</span>][<span class="string">'host'</span>] = <span class="string">'localhost'</span> ——&gt; <span class="variable">$cfg</span>[<span class="string">'Servers'</span>][<span class="variable">$i</span>][<span class="string">'host'</span>] = <span class="string">'db'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 将修改后的配置文件复制回容器中</span></span></span><br><span class="line">docker cp ./config.inc.php myadmin:/etc/phpmyadmin/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启phpmyadmin容器</span></span><br></pre></td></tr></table></figure></li><li><p>此处就可以连接了，当然你也可以修改配置文件限制连接的用户，然后在MySQL中给连接用户授权</p></li></ol><h3 id="使用docker-compose创建"><a class="markdownIt-Anchor" href="#使用docker-compose创建"></a> 使用docker-compose创建</h3><ol><li><p>安装docker-compose，这里就不赘述了，回头专门用篇文章来解释</p></li><li><p>编写docker-compose.yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">version: "2"</span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    image: hub.c.163.com/library/mysql</span><br><span class="line">    container_name: test-mysql</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - "3306:3306"</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_USER: "root"</span><br><span class="line">      MYSQL_PASSWORD: "root"</span><br><span class="line">      MYSQL_ROOT_PASSWORD: "root"</span><br><span class="line">    networks:</span><br><span class="line">      - net-mysql</span><br><span class="line"></span><br><span class="line">  phpmyadmin:</span><br><span class="line">    image: docker.io/phpmyadmin/phpmyadmin</span><br><span class="line">    container_name: test-myadmin</span><br><span class="line">    ports:</span><br><span class="line">      - "80:80"</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_USER: "root"</span><br><span class="line">      MYSQL_PASSWORD: "root"</span><br><span class="line">      MYSQL_ROOT_PASSWORD: "root"</span><br><span class="line">    networks:</span><br><span class="line">      - net-mysql</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  net-mysql:</span><br></pre></td></tr></table></figure></li><li><p>发布容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用命令发布容器</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>然后就可以使用了，不需要修改任何配置文件</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在云服务器上的MySQL数据库在暴露端口和开启远程连接的情况下，是非常不安全的，昨天我的一台服务器就遭到了勒索病毒的攻击，让我支付0.06比特币赎回我的数据。还好那个库中没有重要数据，只是一个弃用了半年的数据库，密码我自己都忘记了，还好通过手段找回了密码，登上去之后就傻
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://luxiaowan.github.io/categories/Docker/"/>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/tags/MySQL/"/>
    
      <category term="Docker" scheme="http://luxiaowan.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nacos基本使用</title>
    <link href="http://luxiaowan.github.io/2019/12/20/Nacos%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://luxiaowan.github.io/2019/12/20/Nacos基本使用/</id>
    <published>2019-12-20T01:30:00.000Z</published>
    <updated>2019-12-20T15:07:26.882Z</updated>
    
    <content type="html"><![CDATA[<h3 id="啥"><a class="markdownIt-Anchor" href="#啥"></a> 啥</h3><ol><li>Nacos是什么</li><li>Nacos解决什么问题</li><li>Nacos怎么使用</li><li>Nacos架构图</li><li>Nacos作为配置中心</li><li>Nacos作为服务注册中心</li></ol><hr><p><strong>以上问题，在Nacos官网都有详细的说明，要学会查看官方文档，其他地方写的基本也都是copy的官方文档，所以我这里就不再赘述了，直接上官网地址给你们：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></strong></p><h3 id="在使用过程中如果遇到什么问题可以去提issuehttpsgithubcomalibabanacosissues"><a class="markdownIt-Anchor" href="#在使用过程中如果遇到什么问题可以去提issuehttpsgithubcomalibabanacosissues"></a> 在使用过程中如果遇到什么问题，可以去提issue：<a href="https://github.com/alibaba/nacos/issues" target="_blank" rel="noopener">https://github.com/alibaba/nacos/issues</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;啥&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#啥&quot;&gt;&lt;/a&gt; 啥&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Nacos是什么&lt;/li&gt;
&lt;li&gt;Nacos解决什么问题&lt;/li&gt;
&lt;li&gt;Nacos怎么使用&lt;/li&gt;
&lt;li&gt;Nacos架构图&lt;/l
      
    
    </summary>
    
    
      <category term="Nacos" scheme="http://luxiaowan.github.io/categories/Nacos/"/>
    
    
  </entry>
  
  <entry>
    <title>忘记MySQL的root用户密码怎么办</title>
    <link href="http://luxiaowan.github.io/2019/12/20/%E5%BF%98%E8%AE%B0MySQL%E7%9A%84root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <id>http://luxiaowan.github.io/2019/12/20/忘记MySQL的root用户密码怎么办/</id>
    <published>2019-12-19T16:53:00.000Z</published>
    <updated>2019-12-20T15:07:26.883Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中，如果我们忘记了数据库的密码，那么我们该怎么办？其实方法很多，下面我们主要说一下如何修改宿主机上的MySQL以及Docker容器中的MySQL。</p><h3 id="1-docker容器中的mysql"><a class="markdownIt-Anchor" href="#1-docker容器中的mysql"></a> 1. Docker容器中的MySQL</h3><ol><li><p>启动MySQL的容器</p></li><li><p>通过docker命令进入到容器中<code>docker exec -it container_id /bin/bash</code></p></li><li><p>找到docker.cnf配置文件，大概在<code>/etc/mysql/conf.d/</code>目录下</p></li><li><p>打开docker.cnf文件，在最后一行后添加<code>skip-grant-tables</code>跳过用户权限验证</p></li><li><p>退出docker容器，然后重启容器<code>docker restart container_id</code></p></li><li><p>再次进入到容器中，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 进入mysql控制台</span><br><span class="line">mysql</span><br><span class="line">2. 进入mysql数据库</span><br><span class="line">use mysql;</span><br><span class="line">3. 修改root用户密码</span><br><span class="line">MySQL5.7+:</span><br><span class="line">update user set authentication_string=password(&apos;newpwd&apos;) where user=&apos;root&apos;;</span><br><span class="line">MySQL5.6-:</span><br><span class="line">update user set password=password(&apos;newpwd&apos;) where user=&apos;root&apos;;</span><br><span class="line">4. 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>将docker.cnf中添加的那一行<code>skip-grant-tables</code>删除，退出docker容器，然后重启容器，搞定</p></li></ol><h3 id="2-宿主机中的mysql"><a class="markdownIt-Anchor" href="#2-宿主机中的mysql"></a> 2. 宿主机中的MySQL</h3><ol><li>找到my.ini配置文件，并在[mysqld]组下加入<code>skip-grant-tables</code>跳过用户权限验证</li><li>修改密码，同上步骤6</li><li>将my.ini文件中添加的那一行删除，重启MySQL服务<code>service mysqld restart</code>，搞定</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在工作中，如果我们忘记了数据库的密码，那么我们该怎么办？其实方法很多，下面我们主要说一下如何修改宿主机上的MySQL以及Docker容器中的MySQL。&lt;/p&gt;
&lt;h3 id=&quot;1-docker容器中的mysql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Nacos编译报错Use STAR or POSIX Extensions to Overcome This Limit</title>
    <link href="http://luxiaowan.github.io/2019/12/19/Nacos%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99Use-STAR-or-POSIX-extensions-to-overcome-this-limit/"/>
    <id>http://luxiaowan.github.io/2019/12/19/Nacos编译报错Use-STAR-or-POSIX-extensions-to-overcome-this-limit/</id>
    <published>2019-12-19T04:23:00.000Z</published>
    <updated>2019-12-19T16:51:55.995Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nacas安装"><a class="markdownIt-Anchor" href="#nacas安装"></a> Nacas安装</h3><blockquote><p>可以通过下载源码进行编译和下载发行包两种方式来启动Nacos</p></blockquote><h6 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/alibaba/nacos.git</span><br><span class="line">cd nacos/</span><br><span class="line">mvn -Prelease-nacos clean install -U  </span><br><span class="line">ls -al distribution/target/</span><br><span class="line"></span><br><span class="line">// change the $version to your actual path</span><br><span class="line">cd distribution/target/nacos-server-$version/nacos/bin</span><br></pre></td></tr></table></figure><h6 id="发行包"><a class="markdownIt-Anchor" href="#发行包"></a> 发行包</h6><p>您可以从 <a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">最新稳定版本</a> 下载 <code>nacos-server-$version.zip</code> 包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip nacos-server-$version.zip 或者 tar -xvf nacos-server-$version.tar.gz</span><br><span class="line">cd nacos/bin</span><br></pre></td></tr></table></figure><blockquote><p>如何启动在这里就不做说明了，我们重点说一下通过源码安装时出现的一个编译错误</p></blockquote><h3 id="错误信息"><a class="markdownIt-Anchor" href="#错误信息"></a> 错误信息</h3><blockquote><p>Failed to execute goal org.apache.maven.plugins:maven-assembly-plugin:3.0.0:single (make-assembly) on project nacos-distribution: Execution make-assembly of goal org.apache.maven.plugins:maven-assembly-plugin:3.0.0:single failed: group id ‘1326029969’ is too big ( &gt; 2097151 ). Use STAR or POSIX extensions to overcome this limit -&gt; [Help 1]</p></blockquote><p>这个错误主要出现在编译distribution这个目录时出现的，执行命令是<code>mvn -Prelease-nacos clean install -U</code>，这个错误导致nacos-server-1.2.0-SNAPSHOT生成失败</p><h3 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法</h3><p>在distribution目录下的pom.xml文件中找到<code>id</code>为<code>release-nacos</code>的<code>profile</code>，在plugin标签的configuration内加上<code>&lt;tarLongFileMode&gt;posix&lt;/tarLongFileMode&gt;</code>即可解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nacas安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nacas安装&quot;&gt;&lt;/a&gt; Nacas安装&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可以通过下载源码进行编译和下载发行包两种方式来启动Nacos&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
    
      <category term="Nacos" scheme="http://luxiaowan.github.io/categories/Nacos/"/>
    
    
      <category term="基础应用" scheme="http://luxiaowan.github.io/tags/%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/"/>
    
      <category term="Java" scheme="http://luxiaowan.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="http://luxiaowan.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>阿里面试题</title>
    <link href="http://luxiaowan.github.io/2019/12/08/%E9%98%BF%E9%87%8C%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://luxiaowan.github.io/2019/12/08/阿里面试题/</id>
    <published>2019-12-08T15:55:00.000Z</published>
    <updated>2019-12-19T17:07:06.991Z</updated>
    
    <content type="html"><![CDATA[<h4 id="阿里巴巴一面"><a class="markdownIt-Anchor" href="#阿里巴巴一面"></a> 阿里巴巴一面</h4><p>先介绍一下自己吧</p><p>说一下自己的优缺点</p><p>具体讲一下之前做过的项目</p><p>你觉得项目里给里最大的挑战是什么？</p><p>HashMap 了解么吗？说一下 put 方法过程</p><blockquote><p>HashMap是键值对存储数据结构，内部以key-value+链表的形式存储数据，jdk1.8之前，是以Entry创建数据节点，jdk1.8之后以Node创建数据节点。</p><p>put方法中要先检查存储数据的数组是否已初始化，计算key的哈希值，若该哈希值所在槽无对象，则直接设置进去；若该槽有值，则校验key值是否相等，若相等则直接替换，并将旧值返回；若key不相等，则校验节点的类型是否为TreeNode，若为TreeNode则走TreeNode的putTreeVal；若为普通Node节点，则迭代该槽上的Node节点，通过当前节点的next属性获取下一节点，若next的key与put的key相等(== &amp;&amp; equals)，则替换next的value；若next为null，则在此处存储，并且当前节点的next指向新创建的Node对象；最终返回原值或null</p></blockquote><p>HashMap 是不是线程安全？</p><blockquote><p>不是线程安全的，在高并发情况下会出现脏数据的情况</p><p>如果想使用线程安全的Map，则可以使用Collections类中的synchronizedMap方法去创建一个Collections内部类SynchronizedMap的实例，该内部类中的方法是使用synchronized关键字实现的线程并发锁；Hashtable类同；或者如果项目使用的是jdk1.5及以上版本的话，可以使用ConcurrentHashMap类，该类是使用了分段锁和CAS的方式实现的并发控制，比synchronized更加灵活高效，分段锁可以实现在写的同时放任其他线程读取非本段的数据，CAS方式则仅仅锁住被操作的节点。</p></blockquote><p>HashMap 为什么不用平衡树？</p><blockquote><p>平衡树在极端情况下会出现非常高的树，在查找的过程中会变慢，而红黑树在插入数据的时候会通过自旋转缩短树的高度</p></blockquote><p>AQS 知道吗？知道哪一些呢？讲一讲。</p><blockquote><p>AQS是AbstractQueuedSynchronizer类的缩写，JUC包中的锁基本实现于AQS，可以实现共享锁和排它锁，AQS是读写锁ReentrantLock的基类，内部通过acquire和acquireShared方法分别实现排它锁和共享锁。</p></blockquote><p>CLH 同步队列是怎么实现非公平和公平的？</p><blockquote><p>CLH队列是通过链表的形式将每一个节点的连接到一起，公平是指在头结点被处理的时候，其他节点都处于wait状态，当处理完之后，将后续所有的节点全部唤醒，所有队列是公平的；即使队列中所有的节点都被唤醒，也不会出现谁先竞争到资源谁执行的情况，永远都是先执行离对列头最近的无中断标志的节点，所以CLH队列又是非公平的。</p></blockquote><p>ReentrantLock 和 synchronized 的区别</p><blockquote><p>两者都是本地锁，都是为了防止并发情况下出现数据错乱的情况，都是可重入锁。ReentrantLock有共享锁和排它锁两种锁机制，而synchronized只能是排它锁，synchronized在jdk1.5之后自带锁升级机制，包括了偏向锁、轻量级锁和重量级锁，但ReentrantLock只是重量级锁。</p></blockquote><p>讲一下 JVM 的内存结构</p><blockquote><p>JVM内存结构分为线程共享内存区和线程私有内存区，线程共享内存区包括方法区/元空间、堆，线程私有内存区包括程序计数器、Java栈、本地方法栈，元空间是在jdk1.8之后用来代替方法区的，可以通过-XX:+MetaspaceSize=10g -XX:+MaxMetaspaceSize=20g来指定元空间的大小，方法区/元空间用于存放类的定义信息、常量等信息，堆用于存放new出来的对象，Java栈和本地方法栈为线程私有主要存储线程中的对象引用和方法调用信息等，程序计数器则为了记录所在线程当前执行的指令位置。</p></blockquote><p>JVM 里 new 对象时，堆会发生抢占吗？你是怎么去设计 JVM 的堆的线程安全的？</p><blockquote><p>不会发生抢占，JVM可以将new出来的对象存在堆上也可以存入线程栈中，也就是通过逃逸分析决定对象是分配到线程共享的堆上还是栈上分配，可以通过-XX:+DoEscapeAnalysis -XX:+EliminateLocks来开启逃逸分析，但是仅在-server模式下有效，可以通过java -version来查看若jre是server版本，则默认就是server模式。JVM堆的线程安全通过使用volatile关键字、ThreadLocal类或者加锁来实现。</p></blockquote><p>讲一下 Redis 的数据结构</p><blockquote><p>Redis内部是以key-value的形式存储数据的，每一个key-value都会以redisObject结构体，结构体中包括数据类型、编码方式、过期策略、引用数量、值结构体实例，值的结构体中包括的key的值，</p></blockquote><p>Redis 缓存同步问题</p><p>讲一讲 MySQL 的索引结构</p><blockquote><p>MySQL的索引有B+树和Hash两种结构，在InnoDB存储引擎中，默认支持B+树结构，不支持Hash结构，但是我们可以使用Hash结构，InnoDB通过B+树实现自适应Hash来满足我们使用Hash结构的索引。MySQL之所以选择B+树作为存储结构，是因为其比AVL树高度更可控，比B-树在查询效率上更快。</p></blockquote><p>讲一下 Redis 分布式锁的实现</p><blockquote><p>Redis通过使用setnx+expire或者set key value nx ex time来设置分布式锁，也可以使用lua脚本创建分布式锁。三种方式中，setnx+expire可能会发生异常情况导致锁的key设置过期时间失败，最终锁无法自动释放而影响具体业务处理；分布式锁之所以设置过期时间，是为了防止在创建了锁之后未释放锁而产生的永久锁，这种情况将会导致其他线程永久性的加锁失败。</p><p>实际生产环境中，我们一般都是使用Redis集群为应用提供缓存服务，如果在多写的情况下，Master尚未同步到全部Slave之前，会出现同时有多个线程向不同的写服务器发起加锁请求，为了预防这种情况，在加锁的时候，可以向所有的节点同时发起写请求，这样保证了数据的强一致性。</p></blockquote><p>ConcurrentHashMap 如何保证线程安全？</p><blockquote><p>ConcurrentHashMap在jdk1.8之前使用Segment Lock(分段锁)的方式对数据段进行加锁，在该数据段加锁的时候，不会影响其他数据段的数据读写，从而达到提高并发的效率；在jdk1.8之后，使用CAS对具体的某个Node进行加锁，此方法仅仅对线程正在操作的那条数据加锁，不会影响到Map中其他数据的读写。</p></blockquote><p>数据库索引了解吗？讲一下</p><blockquote><p>MySQL索引有主键索引、普通索引两种，又可细分为单索引和复合索引，InnoDB中的索引存储结构默认为B+树，MyIsam中主键索引存储的是数据在磁盘上的位置，InnoDB中主键索引存储的是实际数据，普通索引中存储的是主键数据，所以在使用普通索引查找数据时，是先通过二分法查询到主键值，然后再到主键索引树中根据主键值查询出具体的数据，若是复合索引且所查询的字段均在复合索引中，此类索引查询称为覆盖索引，也就是不需要通过回表查询主键索引树即可返回。</p></blockquote><p>常见排序算法</p><p>TCP 三次握手，四次挥手。</p><blockquote><p>TCP在通信时需要先建立连接，为了保证数据发送的稳定性及可靠性，需要进行预通信，也就是我们平时与人见面时的握手礼仪，第一次握手是client端向server端发送一个通知(seq=x,SYN=1)，告诉server端我要向你发送数据了，是否做好了接收准备，然后client端状态变为SYN_SENT，server端若已经做好准备，则向client端回应一条消息告诉它我已经做好了准备，可以将数据发送过来了，此为第二次握手(seq=y,SYN=1,ACK=1,ack=x+1)，server端状态变为SYN_RECV，client端接收到server端回应的消息后，向server端发送确认包(seq=x+1,ACK=1,ack=y+1)，然后client和server端同时变更状态为ESTABLISHED，到此完成三次握手。</p><p>在通信结束后需要关闭连接，client端向server端发送断开请求(第一次挥手)，server端接收到请求后回应client端，然后server端进入到等待关闭状态(第二次挥手)，client接收到回应后向server端发送确认断开请求(第三次挥手)，server端收到确认消息后回应client进行断开(第四次挥手)，若最后client迟迟未接收到server的确认断开回应，则会重试一次，重试仍然未收到回应则自动断开。</p></blockquote><p>深入问了乐观锁，悲观锁及其实现</p><blockquote><p>悲观锁和乐观锁在读写效率上有很大的区别，悲观锁是在操作数据时，被操作的数据不可被其他线程/连接访问，除非等当前操作的事务提交或释放锁，在MySQL中，可以通过select for update来实现悲观锁；乐观锁在效率上比悲观锁高很多，可以通过版本进行数据控制，比如MySQL中的MVCC。</p></blockquote><h4 id="阿里巴巴二面"><a class="markdownIt-Anchor" href="#阿里巴巴二面"></a> 阿里巴巴二面</h4><p>自我介绍 + 项目介绍。</p><p>你在项目中担任什么样的角色？</p><p>那你觉得你比别人的优势在哪里？你用了哪些别人没有的东西吗？</p><p>说一下 HashMap 的数据结构</p><p>红黑树和 AVL 树有什么区别？</p><blockquote><p>树高度</p></blockquote><p>如何才能得到一个线程安全的 HashMap？</p><blockquote></blockquote><p>讲一下 JVM 常用垃圾回收器</p><blockquote><p>JVM常用垃圾收集器有CMS、G1，</p></blockquote><p>Redis 分布式锁</p><p>再描述一下你之前的项目吧</p><p>你觉得这个项目的亮点在哪里呢？</p><p>你设计的数据库遵循的范式？</p><p>Java 怎么加载类？</p><p>linux 常用命令有哪些？</p><p>Spring 的 IOC, AOP。</p><p>讲一下 ORM 框架 Hibernate</p><p>设计模式了解吗？讲一下</p><p>自己实现一个二阶段提交，如何设计？</p><h4 id="阿里巴巴三面"><a class="markdownIt-Anchor" href="#阿里巴巴三面"></a> 阿里巴巴三面</h4><p>在项目中，并发量大的情况下，如何才能够保证数据的一致性？</p><p>ElasticSearch 为什么检索快，它的底层数据结构是怎么样的？</p><p>JVM 内存模型</p><p>Netty 应用在哪些中间件和框架中呢？</p><p>线程池的参数</p><p>讲一下 B 树和 B+ 树的区别</p><p>为什么要用 Redis 做缓存？</p><p>了解 SpringBoot 吗？那讲一下 SpringBoot 的启动流程吧</p><p>如何解决 bean 的循环依赖问题？</p><p>Java 有哪些队列？</p><p>讲一讲 Spring 和 Springboot 的区别</p><p>最近看了什么书？为什么？</p><p>你平时是怎么学习 Java 的呢？</p><p>wait() 和 sleep() 的区别</p><p>原子变量的实现原理</p><p>CAS 的问题，讲一下解决方案。</p><p>有没有更好的计数器解决策略</p><p>讲一讲 NIO 和 BIO 的区别</p><p>Nginx 负载均衡时是如何判断某个节点挂掉了？</p><p>讲一下 Redis 的数据类型和使用场景</p><p>k8s 的储存方式是怎样的？</p><p>Spring AOP 原理是什么？怎么使用？什么是切点，什么是切面？最好是举个例子</p><p>算法题：给一堆硬币的 array，返回所有的组合</p><h4 id="阿里巴巴总监面"><a class="markdownIt-Anchor" href="#阿里巴巴总监面"></a> 阿里巴巴总监面</h4><p>算法：给一个 set 打印出所有子集；多线程从多个文件中读入数据，写到同一个文件中；</p><p>判断 ip 是否在给定范围内；打乱一副扑克牌，不能用额外空间，证明为什么是随机的。</p><p>TCP 和 UDP 区别</p><p>线程池的原理以及各种线程池的应用场景</p><p>线程池中使用有限的阻塞队列和无限的阻塞队列的区别</p><p>如果你发现你的 SQL 语句始终走另一个索引，但是你希望它走你想要的索引，怎么办？</p><p>MySQL 执行计划</p><p>数据库索引为什么用 B+ 树？</p><p>你在做 SQL 优化主要从哪几个方面做，用到哪些方法工具？</p><p>有没有想问的？</p><h4 id="阿里巴巴-hr-面"><a class="markdownIt-Anchor" href="#阿里巴巴-hr-面"></a> 阿里巴巴 HR 面</h4><p>自我介绍</p><p>平时怎么学习的？</p><p>有什么兴趣爱好吗？</p><p>怎么看待 996？</p><p>怎么平衡工作和学习？</p><p>……</p><p>有没有什么想问的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;阿里巴巴一面&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#阿里巴巴一面&quot;&gt;&lt;/a&gt; 阿里巴巴一面&lt;/h4&gt;
&lt;p&gt;先介绍一下自己吧&lt;/p&gt;
&lt;p&gt;说一下自己的优缺点&lt;/p&gt;
&lt;p&gt;具体讲一下之前做过的项目&lt;/p&gt;
&lt;p&gt;你觉得项目里给
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
      <category term="面试" scheme="http://luxiaowan.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="阿里" scheme="http://luxiaowan.github.io/tags/%E9%98%BF%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://luxiaowan.github.io/2019/12/02/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://luxiaowan.github.io/2019/12/02/Git常用命令/</id>
    <published>2019-12-02T09:23:00.000Z</published>
    <updated>2019-12-03T16:12:26.788Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/image-20191204000809729.png" alt="image-20191204000809729"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/image-20191204000809729.png&quot; alt=&quot;image-20191204000809729&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Git" scheme="http://luxiaowan.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM之OOM</title>
    <link href="http://luxiaowan.github.io/2019/11/28/Java%E4%B9%8BOOM/"/>
    <id>http://luxiaowan.github.io/2019/11/28/Java之OOM/</id>
    <published>2019-11-28T14:23:00.000Z</published>
    <updated>2019-12-03T16:04:43.133Z</updated>
    
    <content type="html"><![CDATA[<h4 id="javalangstackoverflowerror"><a class="markdownIt-Anchor" href="#javalangstackoverflowerror"></a> java.lang.StackOverflowError</h4><p><code>栈溢出错误</code>，这个错误很容易模拟，且看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> StackOverflowTest().test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> high = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ++high;</span><br><span class="line">    test();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"栈的深度为: "</span> + high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">JVM ARGS: -server -Xmn2m -Xss1m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+DoEscapeAnalysis -XX:+EliminateAllocations -XX:-UseTLAB</span><br></pre></td></tr></table></figure><blockquote><p>释</p></blockquote><p>我们都知道方法的调用是通过入栈和计算出栈来实现的，所以我们在方法递归调用一定次数时，必然会发生栈溢出，栈溢出后，程序自动停止，是一类不可捕获和恢复的Error类型的错误，所以我们在使用递归算法时，应当注意递归的深度，防止出现栈溢出错误导致服务错误</p><h4 id="javalangoutofmemoryerrorjava-heap-space"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrorjava-heap-space"></a> java.lang.OutOfMemoryError:java heap space</h4><p><code>JVM堆空间不足引起的内存溢出错误</code>，这类错误比较常见，此处就不做太多的解释，出现这类错误，你就去看GC日志，看看新生代、老年代、永久代/Metaspace的使用情况，如果是想查看GC的情况，使用如下JVM指令：</p><p><code>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:./gclog.log</code>，gc的所有信息都会输出到gclog.log文件中</p><blockquote><p>gclog.log</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*JVM信息*</span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(<span class="number">25.161</span>-b12)</span> <span class="keyword">for</span> bsd-amd64 <span class="title">JRE</span> <span class="params">(<span class="number">1.8</span><span class="number">.0</span>_161-b12)</span>, built on Dec 19 2017 16:22:20 by "java_re" with gcc 4.2.1 <span class="params">(Based on Apple Inc. build <span class="number">5658</span>)</span> <span class="params">(LLVM build <span class="number">2336.11</span><span class="number">.00</span>)</span></span></span><br><span class="line"><span class="function">Memory: 4k page, physical 16777216<span class="title">k</span><span class="params">(<span class="number">2991720</span>k free)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">/proc/meminfo:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">*JVM ARGS*</span></span><br><span class="line"><span class="function">CommandLine flags: -XX:+DoEscapeAnalysis -XX:+EliminateAllocations -XX:InitialHeapSize</span>=<span class="number">268435456</span> -XX:MaxHeapSize=<span class="number">4294967296</span> -XX:MaxNewSize=<span class="number">2097152</span> -XX:NewSize=<span class="number">2097152</span> -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:ThreadStackSize=<span class="number">1024</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC -XX:-UseTLAB </span><br><span class="line"></span><br><span class="line">*GC日志信息*</span><br><span class="line"><span class="number">0.125</span>: [GC (Allocation Failure) [PSYoungGen: <span class="number">1023</span>K-&gt;<span class="number">512</span>K(<span class="number">1536</span>K)] <span class="number">1023</span>K-&gt;<span class="number">536</span>K(<span class="number">261632</span>K), <span class="number">0.0010704</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"><span class="number">0.157</span>: [GC (Allocation Failure) [PSYoungGen: <span class="number">1535</span>K-&gt;<span class="number">493</span>K(<span class="number">1536</span>K)] <span class="number">1559</span>K-&gt;<span class="number">847</span>K(<span class="number">261632</span>K), <span class="number">0.0010655</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">...</span><br><span class="line"><span class="number">0.360</span>: [GC (Allocation Failure) [PSYoungGen: <span class="number">1247</span>K-&gt;<span class="number">256</span>K(<span class="number">1536</span>K)] <span class="number">2614</span>K-&gt;<span class="number">1727</span>K(<span class="number">261632</span>K), <span class="number">0.0008285</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"></span><br><span class="line">Heap</span><br><span class="line"> *年轻代*</span><br><span class="line"> PSYoungGen      total <span class="number">1536</span>K, used <span class="number">396</span>K [<span class="number">0x00000007bfe00000</span>, <span class="number">0x00000007c0000000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">1024</span>K, <span class="number">13</span>% used [<span class="number">0x00000007bfe00000</span>,<span class="number">0x00000007bfe23268</span>,<span class="number">0x00000007bff00000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">50</span>% used [<span class="number">0x00000007bff00000</span>,<span class="number">0x00000007bff40000</span>,<span class="number">0x00000007bff80000</span>)</span><br><span class="line">  to   space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bff80000</span>,<span class="number">0x00000007bff80000</span>,<span class="number">0x00000007c0000000</span>)</span><br><span class="line"> *老年代*</span><br><span class="line"> ParOldGen       total <span class="number">260096</span>K, used <span class="number">1471</span>K [<span class="number">0x00000006c0000000</span>, <span class="number">0x00000006cfe00000</span>, <span class="number">0x00000007bfe00000</span>)</span><br><span class="line">  object space <span class="number">260096</span>K, <span class="number">0</span>% used [<span class="number">0x00000006c0000000</span>,<span class="number">0x00000006c016fc00</span>,<span class="number">0x00000006cfe00000</span>)</span><br><span class="line"> *Metaspace空间，jdk8+*</span><br><span class="line"> Metaspace       used <span class="number">3402</span>K, capacity <span class="number">4500</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 368<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> StackOverflowTest().heapSpace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> String(<span class="string">"abc"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  JVM ARGS: -server -Xmn2m -Xss1m -Xms1m -Xmx1m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:-DoEscapeAnalysis -XX:-EliminateAllocations -XX:-UseTLAB</span><br></pre></td></tr></table></figure><h4 id="javalangoutofmemoryerrorgc-overhead-limit-exceeded"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrorgc-overhead-limit-exceeded"></a> java.lang.OutOfMemoryError:GC overhead limit exceeded</h4><p><code>超出了GC开销限制</code>引起的内存溢出，这个错误不是特别常见，Sun 官方对此的定义：超过98%的时间用来做GC并且回收了不到2%的堆内存时会抛出此异常，可以使用参数-XX:-UseGCOverheadLimit 禁用这个检查，但是这个参数解决不了内存问题，只是把错误的信息延后，替换成 java.lang.OutOfMemoryError: Java heap space</p><h4 id="javalangoutofmemoryerrormetaspace"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrormetaspace"></a> java.lang.OutOfMemoryError:Metaspace</h4><p><code>Metaspace内存溢出</code>，Metaspace是jdk8+特有的东西，用来代替之前的PermGen，主要存储class名称、字段、方法、字节码、常量池、JIT优化代码等等，我们可以使用-XX:MetaspaceSize和-XX:MaxMetaspaceSize来指定其大小，一般情况下Metaspace不会发生OOM，Metaspace的使用量与JVM加载的class数量有很大关系：</p><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ClassPool cp = ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;; i++) &#123;</span><br><span class="line">      Class cz = cp.makeClass(<span class="string">"com.example.demo.bean.DemoBean"</span> + i).toClass();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  JVM ARGS: -XX:MetaspaceSize=<span class="number">10</span>m -XX:MaxMetaspaceSize=<span class="number">10</span>m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.598</span>: [GC (Metadata GC Threshold) [PSYoungGen: <span class="number">39345</span>K-&gt;<span class="number">10741</span>K(<span class="number">76288</span>K)] <span class="number">39345</span>K-&gt;<span class="number">15811</span>K(<span class="number">251392</span>K), <span class="number">0.0111319</span> secs] [Times: user=<span class="number">0.05</span> sys=<span class="number">0.01</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="number">0.609</span>: [<span class="function">Full <span class="title">GC</span> <span class="params">(Metadata GC Threshold)</span> [PSYoungGen: 10741K-&gt;0<span class="title">K</span><span class="params">(<span class="number">76288</span>K)</span>] [ParOldGen: 5069K-&gt;15550<span class="title">K</span><span class="params">(<span class="number">139776</span>K)</span>] 15811K-&gt;15550<span class="title">K</span><span class="params">(<span class="number">216064</span>K)</span>, [Metaspace: 9735K-&gt;9735<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0504762 secs] [Times: user</span>=<span class="number">0.29</span> sys=<span class="number">0.01</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line">...</span><br><span class="line"><span class="number">0.754</span>: [GC (Last ditch collection) [PSYoungGen: <span class="number">0</span>K-&gt;<span class="number">0</span>K(<span class="number">82944</span>K)] <span class="number">15477</span>K-&gt;<span class="number">15477</span>K(<span class="number">472064</span>K), <span class="number">0.0008113</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="number">0.755</span>: [<span class="function">Full <span class="title">GC</span> <span class="params">(Last ditch collection)</span> [PSYoungGen: 0K-&gt;0<span class="title">K</span><span class="params">(<span class="number">82944</span>K)</span>] [ParOldGen: 15477K-&gt;15477<span class="title">K</span><span class="params">(<span class="number">607232</span>K)</span>] 15477K-&gt;15477<span class="title">K</span><span class="params">(<span class="number">690176</span>K)</span>, [Metaspace: 9733K-&gt;9733<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0204189 secs] [Times: user</span>=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs] </span><br><span class="line"><span class="number">5341</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Metaspace</span><br><span class="line">at javassist.ClassPool.toClass(ClassPool.java:<span class="number">1170</span>)</span><br><span class="line">at javassist.ClassPool.toClass(ClassPool.java:<span class="number">1113</span>)</span><br><span class="line">at javassist.ClassPool.toClass(ClassPool.java:<span class="number">1071</span>)</span><br><span class="line">at javassist.CtClass.toClass(CtClass.java:<span class="number">1275</span>)</span><br><span class="line">at com.example.demo.jvm.MetaspceOOMTest.main(MetaspceOOMTest.java:<span class="number">13</span>)</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">82944</span>K, used <span class="number">2390</span>K [<span class="number">0x000000076ab00000</span>, <span class="number">0x0000000772c00000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">82432</span>K, <span class="number">2</span>% used [<span class="number">0x000000076ab00000</span>,<span class="number">0x000000076ad55ab0</span>,<span class="number">0x000000076fb80000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x0000000772b80000</span>,<span class="number">0x0000000772b80000</span>,<span class="number">0x0000000772c00000</span>)</span><br><span class="line">  to   space <span class="number">10752</span>K, <span class="number">0</span>% used [<span class="number">0x0000000771700000</span>,<span class="number">0x0000000771700000</span>,<span class="number">0x0000000772180000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">607232</span>K, used <span class="number">15477</span>K [<span class="number">0x00000006c0000000</span>, <span class="number">0x00000006e5100000</span>, <span class="number">0x000000076ab00000</span>)</span><br><span class="line">  object space <span class="number">607232</span>K, <span class="number">2</span>% used [<span class="number">0x00000006c0000000</span>,<span class="number">0x00000006c0f1d4c8</span>,<span class="number">0x00000006e5100000</span>)</span><br><span class="line"> Metaspace       used <span class="number">9770</span>K, capacity <span class="number">10084</span>K, committed <span class="number">10240</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 3165<span class="title">K</span>, <span class="title">capacity</span> 3214<span class="title">K</span>, <span class="title">committed</span> 3328<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure><p>我们将Metaspace的初始大小和最大值都设置为10m，最终<code>i</code>的值大概会在5340左右的时候报OOM，从FGC的日志可以看出，Metaspace在整个GC阶段都未进行任务的内存回收，直至被全部用完，具体的关于Metaspace的介绍可以看下PerfMa社区的这篇文章：<a href="https://club.perfma.com/article/210111" target="_blank" rel="noopener">https://club.perfma.com/article/210111</a></p><h4 id="javalangoutofmemoryerrordirect-buffer-memory"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrordirect-buffer-memory"></a> java.lang.OutOfMemoryError:Direct buffer memory</h4><p>ByteBuffer. allocateDirect (int capability)是分配操作系统的本地内存，不在GC管辖范围之内，由于不需要内存拷贝所以速度相对较快，但如果不断分配本地内存，堆内存就会很少使用，那么JVM就不需要进行GC，那创建的DirectByteBuffer对象就不会被回收，就会出现堆内存充足但本地内存不足的情况，继续尝试分配本地内存就会出现OOM。</p><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"当前direct大小: "</span> + (VM.maxDirectMemory() / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">" MB"</span>);</span><br><span class="line">  ByteBuffer bb = ByteBuffer.allocateDirect(Math.toIntExact(VM.maxDirectMemory() + <span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  JVM ARGS: -XX:MaxDirectMemorySize=<span class="number">10</span>m</span><br></pre></td></tr></table></figure><p>这里我们需要通过JVM参数<code>-XX:MaxDirectMemorySize=10</code>将JVM本地最大使用内存设置为10MB，不然如果你本地剩余内存很大，那么就很难模拟出此错误</p><blockquote><p>输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前direct大小: <span class="number">10</span> MB</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Direct buffer memory</span><br><span class="line">at java.nio.Bits.reserveMemory(Bits.java:<span class="number">694</span>)</span><br><span class="line">at java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:<span class="number">123</span>)</span><br><span class="line">at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:<span class="number">311</span>)</span><br><span class="line">at com.example.demo.jvm.DirectBufferOOMTest.main(DirectBufferOOMTest.java:<span class="number">11</span>)</span><br></pre></td></tr></table></figure><h4 id="javalangoutofmemoryerrorunable-create-new-native-thread"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrorunable-create-new-native-thread"></a> java.lang.OutOfMemoryError:unable create new native thread</h4><p>线程创建的太多，导致无法继续创建线程，出现这个问题就要去使用<code>jstack</code>导出线程栈查看具体情况</p><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段代码必然会出现该ERROR，不论你的机器有多牛掰，你会发现出现了OOM之后，进程并未终止，这个时候你可以用<code>jps</code>命令查看进程号，然后使用<code>jstack pid</code>查看线程栈，会发现有非常多的线程处于<code>TIMED_WAITING (sleeping)</code>状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"Thread-256" #267 prio=5 os_prio=31 tid=0x00007fccdd8cc000 nid=0x27d03 waiting on condition [0x0000700019b85000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at com.example.demo.jvm.NativeThreadOOMTest$<span class="number">1</span>.run(NativeThreadOOMTest.java:<span class="number">11</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;javalangstackoverflowerror&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javalangstackoverflowerror&quot;&gt;&lt;/a&gt; java.lang.StackOverflowError&lt;/h4&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot官方配置文档(英文版)</title>
    <link href="http://luxiaowan.github.io/2019/11/23/SpringBoot%E5%AE%98%E6%96%B9%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3(%E8%8B%B1%E6%96%87%E7%89%88)/"/>
    <id>http://luxiaowan.github.io/2019/11/23/SpringBoot官方配置文档(英文版)/</id>
    <published>2019-11-22T17:13:00.000Z</published>
    <updated>2019-11-25T17:18:31.849Z</updated>
    
    <content type="html"><![CDATA[<h4 id="banner"><a class="markdownIt-Anchor" href="#banner"></a> BANNER</h4><p>banner.charset=UTF-8 # Banner file encoding.<br>banner.location=classpath:banner.txt # Banner file location.<br>banner.image.location=classpath:banner.gif # Banner image file location (jpg/png can also be used).<br>banner.image.width= # Width of the banner image in chars (default 76)<br>banner.image.height= # Height of the banner image in chars (default based on image height)<br>banner.image.margin= # Left hand image margin in chars (default 2)<br>banner.image.invert= # If images should be inverted for dark terminal themes (default false)</p><h4 id="logging"><a class="markdownIt-Anchor" href="#logging"></a> LOGGING</h4><p>logging.config= # Location of the logging configuration file. For instance <code>classpath:logback.xml</code> for Logback<br>logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.<br>logging.file= # Log file name. For instance <code>myapp.log</code><br>logging.level.*= # Log levels severity mapping. For instance <code>logging.level.org.springframework=DEBUG</code><br>logging.path= # Location of the log file. For instance <code>/var/log</code><br>logging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.<br>logging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.<br>logging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.<br>logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.</p><h4 id="aop"><a class="markdownIt-Anchor" href="#aop"></a> AOP</h4><p>spring.aop.auto=true # Add @EnableAspectJAutoProxy.<br>spring.aop.proxy-target-class=true # Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).</p><h4 id="identity-contextidapplicationcontextinitializer"><a class="markdownIt-Anchor" href="#identity-contextidapplicationcontextinitializer"></a> IDENTITY (ContextIdApplicationContextInitializer)</h4><p>spring.application.index= # Application index.<br>spring.application.name= # Application name.</p><h4 id="admin-springapplicationadminjmxautoconfiguration"><a class="markdownIt-Anchor" href="#admin-springapplicationadminjmxautoconfiguration"></a> ADMIN (SpringApplicationAdminJmxAutoConfiguration)</h4><p>spring.application.admin.enabled=false # Enable admin features for the application.<br>spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.</p><h4 id="auto-configuration"><a class="markdownIt-Anchor" href="#auto-configuration"></a> AUTO-CONFIGURATION</h4><p>spring.autoconfigure.exclude= # Auto-configuration classes to exclude.</p><h4 id="spring-core"><a class="markdownIt-Anchor" href="#spring-core"></a> SPRING CORE</h4><p>spring.beaninfo.ignore=true # Skip search of BeanInfo classes.</p><h4 id="spring-cache-cacheproperties"><a class="markdownIt-Anchor" href="#spring-cache-cacheproperties"></a> SPRING CACHE (CacheProperties)</h4><p>spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.<br>spring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for more details on the spec format.<br>spring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the entries never expire.<br>spring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.<br>spring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.<br>spring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.<br>spring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.<br>spring.cache.type= # Cache type, auto-detected according to the environment by default.</p><h4 id="spring-config-using-environment-property-only-configfileapplicationlistener"><a class="markdownIt-Anchor" href="#spring-config-using-environment-property-only-configfileapplicationlistener"></a> SPRING CONFIG - using environment property only (ConfigFileApplicationListener)</h4><p>spring.config.location= # Config file locations.<br>spring.config.name=application # Config file name.</p><h4 id="hazelcast-hazelcastproperties"><a class="markdownIt-Anchor" href="#hazelcast-hazelcastproperties"></a> HAZELCAST (HazelcastProperties)</h4><p>spring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</p><h4 id="project-information-projectinfoproperties"><a class="markdownIt-Anchor" href="#project-information-projectinfoproperties"></a> PROJECT INFORMATION (ProjectInfoProperties)</h4><p>spring.info.build.location=classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.<br>spring.info.git.location=classpath:git.properties # Location of the generated git.properties file.</p><h4 id="jmx"><a class="markdownIt-Anchor" href="#jmx"></a> JMX</h4><p>spring.jmx.default-domain= # JMX domain name.<br>spring.jmx.enabled=true # Expose management beans to the JMX domain.<br>spring.jmx.server=mbeanServer # MBeanServer bean name.</p><h4 id="email-mailproperties"><a class="markdownIt-Anchor" href="#email-mailproperties"></a> Email (MailProperties)</h4><p>spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.<br>spring.mail.host= # SMTP server host. For instance <code>smtp.example.com</code><br>spring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.<br>spring.mail.password= # Login password of the SMTP server.<br>spring.mail.port= # SMTP server port.<br>spring.mail.properties.*= # Additional JavaMail session properties.<br>spring.mail.protocol=smtp # Protocol used by the SMTP server.<br>spring.mail.test-connection=false # Test that the mail server is available on startup.<br>spring.mail.username= # Login user of the SMTP server.</p><h4 id="application-settings-springapplication"><a class="markdownIt-Anchor" href="#application-settings-springapplication"></a> APPLICATION SETTINGS (SpringApplication)</h4><p>spring.main.banner-mode=console # Mode used to display the banner when the application runs.<br>spring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.<br>spring.main.web-application-type= # Flag to explicitly request a specific type of web application. Auto-detected based on the classpath if not set.</p><h4 id="file-encoding-fileencodingapplicationlistener"><a class="markdownIt-Anchor" href="#file-encoding-fileencodingapplicationlistener"></a> FILE ENCODING (FileEncodingApplicationListener)</h4><p>spring.mandatory-file-encoding= # Expected character encoding the application must use.</p><h4 id="internationalization-messagesourceautoconfiguration"><a class="markdownIt-Anchor" href="#internationalization-messagesourceautoconfiguration"></a> INTERNATIONALIZATION (MessageSourceAutoConfiguration)</h4><p>spring.messages.always-use-message-format=false # Set whether to always apply the MessageFormat rules, parsing even messages without arguments.<br>spring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.<br>spring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.<br>spring.messages.encoding=UTF-8 # Message bundles encoding.<br>spring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.</p><h4 id="output"><a class="markdownIt-Anchor" href="#output"></a> OUTPUT</h4><p>spring.output.ansi.enabled=detect # Configure the ANSI output.</p><h4 id="pid-file-applicationpidfilewriter"><a class="markdownIt-Anchor" href="#pid-file-applicationpidfilewriter"></a> PID FILE (ApplicationPidFileWriter)</h4><p>spring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.<br>spring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).</p><h4 id="profiles"><a class="markdownIt-Anchor" href="#profiles"></a> PROFILES</h4><p>spring.profiles.active= # Comma-separated list (or list if using YAML) of active profiles.<br>spring.profiles.include= # Unconditionally activate the specified comma separated profiles (or list of profiles if using YAML).</p><h4 id="reactor"><a class="markdownIt-Anchor" href="#reactor"></a> Reactor</h4><p>spring.reactor.stacktrace-mode.enabled=false # Set whether Reactor should collect stacktrace information at runtime.</p><h4 id="sendgrid-sendgridautoconfiguration"><a class="markdownIt-Anchor" href="#sendgrid-sendgridautoconfiguration"></a> SENDGRID (SendGridAutoConfiguration)</h4><p>spring.sendgrid.api-key= # SendGrid api key (alternative to username/password)<br>spring.sendgrid.proxy.host= # SendGrid proxy host<br>spring.sendgrid.proxy.port= # SendGrid proxy port</p><h4 id="embedded-server-configuration-serverproperties"><a class="markdownIt-Anchor" href="#embedded-server-configuration-serverproperties"></a> EMBEDDED SERVER CONFIGURATION (ServerProperties)</h4><p>server.address= # Network address to which the server should bind to.<br>server.compression.enabled=false # If response compression is enabled.<br>server.compression.excluded-user-agents= # List of user-agents to exclude from compression.<br>server.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance <code>text/html,text/css,application/json</code><br>server.compression.min-response-size= # Minimum response size that is required for compression to be performed. For instance 2048<br>server.connection-timeout= # Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector’s container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.<br>server.display-name=application # Display name of the application.<br>server.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.<br>server.error.include-exception=false # Include the “exception” attribute.<br>server.error.include-stacktrace=never # When to include a “stacktrace” attribute.<br>server.error.path=/error # Path of the error controller.<br>server.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.<br>server.jetty.acceptors= # Number of acceptor threads to use.<br>server.jetty.accesslog.append=false # Append to log.<br>server.jetty.accesslog.date-format=dd/MMM/yyyy:HH:mm:ss Z # Timestamp format of the request log.<br>server.jetty.accesslog.enabled=false # Enable access log.<br>server.jetty.accesslog.extended-format=false # Enable extended NCSA format.<br>server.jetty.accesslog.file-date-format= # Date format to place in log file name.<br>server.jetty.accesslog.filename= # Log filename. If not specified, logs will be redirected to “System.err”.<br>server.jetty.accesslog.locale= # Locale of the request log.<br>server.jetty.accesslog.log-cookies=false # Enable logging of the request cookies.<br>server.jetty.accesslog.log-latency=false # Enable logging of request processing time.<br>server.jetty.accesslog.log-server=false # Enable logging of the request hostname.<br>server.jetty.accesslog.retention-period=31 # Number of days before rotated log files are deleted.<br>server.jetty.accesslog.time-zone=GMT # Timezone of the request log.<br>server.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post or put content.<br>server.jetty.selectors= # Number of selector threads to use.<br>server.port=8080 # Server HTTP port.<br>server.server-header= # Value to use for the Server response header (no header is sent if empty)<br>server.use-forward-headers= # If X-Forwarded-* headers should be applied to the HttpRequest.<br>server.servlet.context-parameters.<em>= # Servlet context init parameters<br>server.servlet.context-path= # Context path of the application.<br>server.servlet.jsp.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.<br>server.servlet.jsp.init-parameters.</em>= # Init parameters used to configure the JSP servlet<br>server.servlet.jsp.registered=true # Whether or not the JSP servlet is registered<br>server.servlet.path=/ # Path of the main dispatcher servlet.<br>server.session.cookie.comment= # Comment for the session cookie.<br>server.session.cookie.domain= # Domain for the session cookie.<br>server.session.cookie.http-only= # “HttpOnly” flag for the session cookie.<br>server.session.cookie.max-age= # Maximum age of the session cookie in seconds.<br>server.session.cookie.name= # Session cookie name.<br>server.session.cookie.path= # Path of the session cookie.<br>server.session.cookie.secure= # “Secure” flag for the session cookie.<br>server.session.persistent=false # Persist session data between restarts.<br>server.session.store-dir= # Directory used to store session data.<br>server.session.timeout= # Session timeout in seconds.<br>server.session.tracking-modes= # Session tracking modes (one or more of the following: “cookie”, “url”, “ssl”).<br>server.ssl.ciphers= # Supported SSL ciphers.<br>server.ssl.client-auth= # Whether client authentication is wanted (“want”) or needed (“need”). Requires a trust store.<br>server.ssl.enabled= # Enable SSL support.<br>server.ssl.enabled-protocols= # Enabled SSL protocols.<br>server.ssl.key-alias= # Alias that identifies the key in the key store.<br>server.ssl.key-password= # Password used to access the key in the key store.<br>server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).<br>server.ssl.key-store-password= # Password used to access the key store.<br>server.ssl.key-store-provider= # Provider for the key store.<br>server.ssl.key-store-type= # Type of the key store.<br>server.ssl.protocol=TLS # SSL protocol to use.<br>server.ssl.trust-store= # Trust store that holds SSL certificates.<br>server.ssl.trust-store-password= # Password used to access the trust store.<br>server.ssl.trust-store-provider= # Provider for the trust store.<br>server.ssl.trust-store-type= # Type of the trust store.<br>server.tomcat.accept-count= # Maximum queue length for incoming connection requests when all possible request processing threads are in use.<br>server.tomcat.accesslog.buffered=true # Buffer output such that it is only flushed periodically.<br>server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.<br>server.tomcat.accesslog.enabled=false # Enable access log.<br>server.tomcat.accesslog.file-date-format=.yyyy-MM-dd # Date format to place in log file name.<br>server.tomcat.accesslog.pattern=common # Format pattern for access logs.<br>server.tomcat.accesslog.prefix=access_log # Log file name prefix.<br>server.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in the file name until rotate time.<br>server.tomcat.accesslog.request-attributes-enabled=false # Set request attributes for IP address, Hostname, protocol and port used for the request.<br>server.tomcat.accesslog.rotate=true # Enable access log rotation.<br>server.tomcat.accesslog.suffix=.log # Log file name suffix.<br>server.tomcat.additional-tld-skip-patterns= # Comma-separated list of additional patterns that match jars to ignore for TLD scanning.<br>server.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of backgroundProcess methods.<br>server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.<br>server.tomcat.internal-proxies=10\.\d{1,3}\.\d{1,3}\.\d{1,3}|\<br>192\.168\.\d{1,3}\.\d{1,3}|\<br>169\.254\.\d{1,3}\.\d{1,3}|\<br>127\.\d{1,3}\.\d{1,3}\.\d{1,3}|\<br>172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|\<br>172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|\<br>172\.3[0-1]{1}\.\d{1,3}\.\d{1,3} # regular expression matching trusted IP addresses.<br>server.tomcat.max-connections= # Maximum number of connections that the server will accept and process at any given time.<br>server.tomcat.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.<br>server.tomcat.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.<br>server.tomcat.max-threads=0 # Maximum amount of worker threads.<br>server.tomcat.min-spare-threads=0 # Minimum amount of worker threads.<br>server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.<br>server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named “X-Forwarded-Proto”.<br>server.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.<br>server.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by appending a / to the path.<br>server.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance <code>X-FORWARDED-FOR</code><br>server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.<br>server.undertow.accesslog.dir= # Undertow access log directory.<br>server.undertow.accesslog.enabled=false # Enable access log.<br>server.undertow.accesslog.pattern=common # Format pattern for access logs.<br>server.undertow.accesslog.prefix=access_log. # Log file name prefix.<br>server.undertow.accesslog.rotate=true # Enable access log rotation.<br>server.undertow.accesslog.suffix=log # Log file name suffix.<br>server.undertow.buffer-size= # Size of each buffer in bytes.<br>server.undertow.direct-buffers= # Allocate buffers outside the Java heap.<br>server.undertow.io-threads= # Number of I/O threads to create for the worker.<br>server.undertow.eager-filter-init=true # Whether servlet filters should be initialized on startup.<br>server.undertow.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.<br>server.undertow.worker-threads= # Number of worker threads.</p><h4 id="freemarker-freemarkerautoconfiguration"><a class="markdownIt-Anchor" href="#freemarker-freemarkerautoconfiguration"></a> FREEMARKER (FreeMarkerAutoConfiguration)</h4><p>spring.freemarker.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.freemarker.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.freemarker.cache=false # Enable template caching.<br>spring.freemarker.charset=UTF-8 # Template encoding.<br>spring.freemarker.check-template-location=true # Check that the templates location exists.<br>spring.freemarker.content-type=text/html # Content-Type value.<br>spring.freemarker.enabled=true # Enable MVC view resolution for this technology.<br>spring.freemarker.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.<br>spring.freemarker.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.<br>spring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring’s macro library, under the name “springMacroRequestContext”.<br>spring.freemarker.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.<br>spring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.<br>spring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.<br>spring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker’s Configuration.<br>spring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.<br>spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.<br>spring.freemarker.view-names= # White list of view names that can be resolved.</p><h4 id="groovy-templates-groovytemplateautoconfiguration"><a class="markdownIt-Anchor" href="#groovy-templates-groovytemplateautoconfiguration"></a> GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</h4><p>spring.groovy.template.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.groovy.template.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.groovy.template.cache= # Enable template caching.<br>spring.groovy.template.charset=UTF-8 # Template encoding.<br>spring.groovy.template.check-template-location=true # Check that the templates location exists.<br>spring.groovy.template.configuration.*= # See GroovyMarkupConfigurer<br>spring.groovy.template.content-type=test/html # Content-Type value.<br>spring.groovy.template.enabled=true # Enable MVC view resolution for this technology.<br>spring.groovy.template.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.<br>spring.groovy.template.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.<br>spring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring’s macro library, under the name “springMacroRequestContext”.<br>spring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.<br>spring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.<br>spring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.<br>spring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.<br>spring.groovy.template.view-names= # White list of view names that can be resolved.</p><h4 id="spring-hateoas-hateoasproperties"><a class="markdownIt-Anchor" href="#spring-hateoas-hateoasproperties"></a> SPRING HATEOAS (HateoasProperties)</h4><p>spring.hateoas.use-hal-as-default-json-media-type=true # Specify if application/hal+json responses should be sent to requests that accept application/json.</p><h4 id="http-message-conversion"><a class="markdownIt-Anchor" href="#http-message-conversion"></a> HTTP message conversion</h4><p>spring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to “gson” to force the use of Gson when both it and Jackson are on the classpath.</p><h4 id="http-encoding-httpencodingproperties"><a class="markdownIt-Anchor" href="#http-encoding-httpencodingproperties"></a> HTTP encoding (HttpEncodingProperties)</h4><p>spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the “Content-Type” header if not set explicitly.<br>spring.http.encoding.enabled=true # Enable http encoding support.<br>spring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.<br>spring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when “force” has not been specified.<br>spring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.<br>spring.http.encoding.mapping= # Locale to Encoding mapping.</p><h4 id="multipart-multipartproperties"><a class="markdownIt-Anchor" href="#multipart-multipartproperties"></a> MULTIPART (MultipartProperties)</h4><p>spring.servlet.multipart.enabled=true # Enable support of multipart uploads.<br>spring.servlet.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixes “MB” or “KB” to indicate megabytes or kilobytes respectively.<br>spring.servlet.multipart.location= # Intermediate location of uploaded files.<br>spring.servlet.multipart.max-file-size=1MB # Max file size. Values can use the suffixes “MB” or “KB” to indicate megabytes or kilobytes respectively.<br>spring.servlet.multipart.max-request-size=10MB # Max request size. Values can use the suffixes “MB” or “KB” to indicate megabytes or kilobytes respectively.<br>spring.servlet.multipart.resolve-lazily=false # Whether to resolve the multipart request lazily at the time of file or parameter access.</p><h4 id="jackson-jacksonproperties"><a class="markdownIt-Anchor" href="#jackson-jacksonproperties"></a> JACKSON (JacksonProperties)</h4><p>spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance <code>yyyy-MM-dd HH:mm:ss</code>.<br>spring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization.<br>spring.jackson.deserialization.<em>= # Jackson on/off features that affect the way Java objects are deserialized.<br>spring.jackson.generator.</em>= # Jackson on/off features for generators.<br>spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, “date-format” will be used as a fallback if it is configured with a format string.<br>spring.jackson.locale= # Locale used for formatting.<br>spring.jackson.mapper.<em>= # Jackson general purpose on/off features.<br>spring.jackson.parser.</em>= # Jackson on/off features for parsers.<br>spring.jackson.property-naming-strategy= # One of the constants on Jackson’s PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.<br>spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.<br>spring.jackson.time-zone= # Time zone used when formatting dates. For instance <code>America/Los_Angeles</code></p><h4 id="jersey-jerseyproperties"><a class="markdownIt-Anchor" href="#jersey-jerseyproperties"></a> JERSEY (JerseyProperties)</h4><p>spring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of “@ApplicationPath” if specified.<br>spring.jersey.filter.order=0 # Jersey filter chain order.<br>spring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.<br>spring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey servlet.<br>spring.jersey.type=servlet # Jersey integration type.</p><h4 id="spring-ldap-ldapproperties"><a class="markdownIt-Anchor" href="#spring-ldap-ldapproperties"></a> SPRING LDAP (LdapProperties)</h4><p>spring.ldap.urls= # LDAP URLs of the server.<br>spring.ldap.base= # Base suffix from which all operations should originate.<br>spring.ldap.username= # Login user of the server.<br>spring.ldap.password= # Login password of the server.<br>spring.ldap.base-environment.*= # LDAP specification settings.</p><h4 id="embedded-ldap-embeddedldapproperties"><a class="markdownIt-Anchor" href="#embedded-ldap-embeddedldapproperties"></a> EMBEDDED LDAP (EmbeddedLdapProperties)</h4><p>spring.ldap.embedded.base-dn= # The base DN<br>spring.ldap.embedded.credential.username= # Embedded LDAP username.<br>spring.ldap.embedded.credential.password= # Embedded LDAP password.<br>spring.ldap.embedded.ldif=classpath:schema.ldif # Schema (LDIF) script resource reference.<br>spring.ldap.embedded.port= # Embedded LDAP port.<br>spring.ldap.embedded.validation.enabled=true # Enable LDAP schema validation.<br>spring.ldap.embedded.validation.schema= # Path to the custom schema.</p><h4 id="spring-mobile-device-views-devicedelegatingviewresolverautoconfiguration"><a class="markdownIt-Anchor" href="#spring-mobile-device-views-devicedelegatingviewresolverautoconfiguration"></a> SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</h4><p>spring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for fallback resolution.<br>spring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view resolver.<br>spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.<br>spring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.<br>spring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.<br>spring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.<br>spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.<br>spring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.</p><h4 id="spring-mobile-site-preference-sitepreferenceautoconfiguration"><a class="markdownIt-Anchor" href="#spring-mobile-site-preference-sitepreferenceautoconfiguration"></a> SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</h4><p>spring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.</p><h4 id="mustache-templates-mustacheautoconfiguration"><a class="markdownIt-Anchor" href="#mustache-templates-mustacheautoconfiguration"></a> MUSTACHE TEMPLATES (MustacheAutoConfiguration)</h4><p>spring.mustache.allow-request-override= # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.mustache.allow-session-override= # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.mustache.cache= # Enable template caching.<br>spring.mustache.charset= # Template encoding.<br>spring.mustache.check-template-location= # Check that the templates location exists.<br>spring.mustache.content-type= # Content-Type value.<br>spring.mustache.enabled= # Enable MVC view resolution for this technology.<br>spring.mustache.expose-request-attributes= # Set whether all request attributes should be added to the model prior to merging with the template.<br>spring.mustache.expose-session-attributes= # Set whether all HttpSession attributes should be added to the model prior to merging with the template.<br>spring.mustache.expose-spring-macro-helpers= # Set whether to expose a RequestContext for use by Spring’s macro library, under the name “springMacroRequestContext”.<br>spring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.<br>spring.mustache.request-context-attribute= # Name of the RequestContext attribute for all views.<br>spring.mustache.suffix=.mustache # Suffix to apply to template names.<br>spring.mustache.view-names= # White list of view names that can be resolved.</p><h4 id="spring-mvc-webmvcproperties"><a class="markdownIt-Anchor" href="#spring-mvc-webmvcproperties"></a> SPRING MVC (WebMvcProperties)</h4><p>spring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.<br>spring.mvc.date-format= # Date format to use. For instance <code>dd/MM/yyyy</code>.<br>spring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.<br>spring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to the FrameworkServlet doService method.<br>spring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.<br>spring.mvc.formcontent.putfilter.enabled=true # Enable Spring’s HttpPutFormContentFilter.<br>spring.mvc.ignore-default-model-on-redirect=true # If the content of the “default” model should be ignored during redirect scenarios.<br>spring.mvc.locale= # Locale to use. By default, this locale is overridden by the “Accept-Language” header.<br>spring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.<br>spring.mvc.log-resolved-exception=false # Enable warn logging of exceptions resolved by a “HandlerExceptionResolver”.<br>spring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.<br>spring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance <code>PREFIX_ERROR_CODE</code>.<br>spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.<br>spring.mvc.static-path-pattern=/** # Path pattern used for static resources.<br>spring.mvc.throw-exception-if-no-handler-found=false # If a “NoHandlerFoundException” should be thrown if no Handler was found to process a request.<br>spring.mvc.view.prefix= # Spring MVC view prefix.<br>spring.mvc.view.suffix= # Spring MVC view suffix.</p><h4 id="spring-resources-handling-resourceproperties"><a class="markdownIt-Anchor" href="#spring-resources-handling-resourceproperties"></a> SPRING RESOURCES HANDLING (ResourceProperties)</h4><p>spring.resources.add-mappings=true # Enable default resource handling.<br>spring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.<br>spring.resources.chain.cache=true # Enable caching in the Resource chain.<br>spring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.<br>spring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.<br>spring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.<br>spring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.<br>spring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.<br>spring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.<br>spring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.<br>spring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.<br>spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.</p><h4 id="spring-session-sessionproperties"><a class="markdownIt-Anchor" href="#spring-session-sessionproperties"></a> SPRING SESSION (SessionProperties)</h4><p>spring.session.hazelcast.flush-mode=on-save # Sessions flush mode.<br>spring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.<br>spring.session.jdbc.initializer.enabled= # Create the required session tables on startup if necessary. Enabled automatically if the default table name is set or a custom schema is configured.<br>spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.<br>spring.session.jdbc.table-name=SPRING_SESSION # Name of database table used to store sessions.<br>spring.session.redis.flush-mode=on-save # Sessions flush mode.<br>spring.session.redis.namespace= # Namespace for keys used to store sessions.<br>spring.session.store-type= # Session store type.</p><h4 id="spring-social-socialwebautoconfiguration"><a class="markdownIt-Anchor" href="#spring-social-socialwebautoconfiguration"></a> SPRING SOCIAL (SocialWebAutoConfiguration)</h4><p>spring.social.auto-connection-views=false # Enable the connection status view for supported providers.</p><h4 id="spring-social-facebook-facebookautoconfiguration"><a class="markdownIt-Anchor" href="#spring-social-facebook-facebookautoconfiguration"></a> SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</h4><p>spring.social.facebook.app-id= # your application’s Facebook App ID<br>spring.social.facebook.app-secret= # your application’s Facebook App Secret</p><h4 id="spring-social-linkedin-linkedinautoconfiguration"><a class="markdownIt-Anchor" href="#spring-social-linkedin-linkedinautoconfiguration"></a> SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</h4><p>spring.social.linkedin.app-id= # your application’s LinkedIn App ID<br>spring.social.linkedin.app-secret= # your application’s LinkedIn App Secret</p><h4 id="spring-social-twitter-twitterautoconfiguration"><a class="markdownIt-Anchor" href="#spring-social-twitter-twitterautoconfiguration"></a> SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</h4><p>spring.social.twitter.app-id= # your application’s Twitter App ID<br>spring.social.twitter.app-secret= # your application’s Twitter App Secret</p><h1 id="thymeleaf-thymeleafautoconfiguration"><a class="markdownIt-Anchor" href="#thymeleaf-thymeleafautoconfiguration"></a> THYMELEAF (ThymeleafAutoConfiguration)</h1><p>spring.thymeleaf.cache=true # Enable template caching.<br>spring.thymeleaf.check-template=true # Check that the template exists before rendering it.<br>spring.thymeleaf.check-template-location=true # Check that the templates location exists.<br>spring.thymeleaf.enabled=true # Enable Thymeleaf view resolution for Web frameworks.<br>spring.thymeleaf.encoding=UTF-8 # Template files encoding.<br>spring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.<br>spring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.<br>spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.<br>spring.thymeleaf.reactive.max-chunk-size= # Maximum size of data buffers used for writing to the response, in bytes.<br>spring.thymeleaf.reactive.media-types= # Media types supported by the view technology.<br>spring.thymeleaf.servlet.content-type=text/html # Content-Type value written to HTTP responses.<br>spring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.<br>spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.<br>spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.</p><h4 id="spring-web-flux-webfluxproperties"><a class="markdownIt-Anchor" href="#spring-web-flux-webfluxproperties"></a> SPRING WEB FLUX (WebFluxProperties)</h4><p>spring.webflux.static-path-pattern=/** # Path pattern used for static resources.</p><h4 id="spring-web-services-webservicesproperties"><a class="markdownIt-Anchor" href="#spring-web-services-webservicesproperties"></a> SPRING WEB SERVICES (WebServicesProperties)</h4><p>spring.webservices.path=/services # Path that serves as the base URI for the services.<br>spring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web Services.<br>spring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</p><h4 id="security-securityproperties"><a class="markdownIt-Anchor" href="#security-securityproperties"></a> SECURITY (SecurityProperties)</h4><p>security.basic.authorize-mode=role # Security authorize mode to apply.<br>security.basic.enabled=true # Enable basic authentication.<br>security.basic.path=/** # Comma-separated list of paths to secure.<br>security.basic.realm=Spring # HTTP basic realm name.<br>security.enable-csrf=false # Enable Cross Site Request Forgery support.<br>security.filter-order=0 # Security filter chain order.<br>security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.<br>security.headers.cache=true # Enable cache control HTTP headers.<br>security.headers.content-security-policy= # Value for content security policy header.<br>security.headers.content-security-policy-mode=default # Content security policy mode.<br>security.headers.content-type=true # Enable “X-Content-Type-Options” header.<br>security.headers.frame=true # Enable “X-Frame-Options” header.<br>security.headers.hsts=all # HTTP Strict Transport Security (HSTS) mode (none, domain, all).<br>security.headers.xss=true # Enable cross site scripting (XSS) protection.<br>security.ignored= # Comma-separated list of paths to exclude from the default secured paths.<br>security.require-ssl=false # Enable secure channel for all requests.<br>security.sessions=stateless # Session creation policy (always, never, if_required, stateless).<br>security.user.name=user # Default user name.<br>security.user.password= # Password for the default user name. A random password is logged on startup by default.<br>security.user.role=USER # Granted roles for the default user name.</p><h4 id="security-oauth2-client-oauth2clientproperties"><a class="markdownIt-Anchor" href="#security-oauth2-client-oauth2clientproperties"></a> SECURITY OAUTH2 CLIENT (OAuth2ClientProperties)</h4><p>security.oauth2.client.client-id= # OAuth2 client id.<br>security.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default</p><h4 id="security-oauth2-resources-resourceserverproperties"><a class="markdownIt-Anchor" href="#security-oauth2-resources-resourceserverproperties"></a> SECURITY OAUTH2 RESOURCES (ResourceServerProperties)</h4><p>security.oauth2.resource.filter-order= # The order of the filter chain used to authenticate tokens.<br>security.oauth2.resource.id= # Identifier of the resource.<br>security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.<br>security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.<br>security.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.<br>security.oauth2.resource.service-id=resource #<br>security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.<br>security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.<br>security.oauth2.resource.user-info-uri= # URI of the user endpoint.</p><h4 id="security-oauth2-sso-oauth2ssoproperties"><a class="markdownIt-Anchor" href="#security-oauth2-sso-oauth2ssoproperties"></a> SECURITY OAUTH2 SSO (OAuth2SsoProperties)</h4><p>security.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter<br>security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server</p><h4 id="flyway-flywayproperties"><a class="markdownIt-Anchor" href="#flyway-flywayproperties"></a> FLYWAY (FlywayProperties)</h4><p>flyway.allow-mixed-migrations= #<br>flyway.baseline-description= #<br>flyway.baseline-on-migrate= #<br>flyway.baseline-version=1 # version to start migration<br>flyway.check-location=false # Check that migration scripts location exists.<br>flyway.clean-disabled= #<br>flyway.clean-on-validation-error= #<br>flyway.enabled=true # Enable flyway.<br>flyway.encoding= #<br>flyway.ignore-failed-future-migration= #<br>flyway.ignore-future-migrations= #<br>flyway.ignore-missing-migrations= #<br>flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.<br>flyway.installed-by= #<br>flyway.locations=classpath:db/migration # locations of migrations scripts<br>flyway.out-of-order= #<br>flyway.password= # JDBC password if you want Flyway to create its own DataSource<br>flyway.placeholder-prefix= #<br>flyway.placeholder-replacement= #<br>flyway.placeholder-suffix= #<br>flyway.placeholders.*= #<br>flyway.repeatable-sql-migration-prefix= #<br>flyway.schemas= # schemas to update<br>flyway.skip-default-callbacks= #<br>flyway.skip-default-resolvers= #<br>flyway.sql-migration-prefix=V #<br>flyway.sql-migration-separator= #<br>flyway.sql-migration-suffix=.sql #<br>flyway.table= #<br>flyway.target= #<br>flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.<br>flyway.user= # Login user of the database to migrate.<br>flyway.validate-on-migrate= #</p><h4 id="liquibase-liquibaseproperties"><a class="markdownIt-Anchor" href="#liquibase-liquibaseproperties"></a> LIQUIBASE (LiquibaseProperties)</h4><p>liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.<br>liquibase.check-change-log-location=true # Check the change log location exists.<br>liquibase.contexts= # Comma-separated list of runtime contexts to use.<br>liquibase.default-schema= # Default database schema.<br>liquibase.drop-first=false # Drop the database schema first.<br>liquibase.enabled=true # Enable liquibase support.<br>liquibase.labels= # Comma-separated list of runtime labels to use.<br>liquibase.parameters.*= # Change log parameters.<br>liquibase.password= # Login password of the database to migrate.<br>liquibase.rollback-file= # File to which rollback SQL will be written when an update is performed.<br>liquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.<br>liquibase.user= # Login user of the database to migrate.</p><h4 id="couchbase-couchbaseproperties"><a class="markdownIt-Anchor" href="#couchbase-couchbaseproperties"></a> COUCHBASE (CouchbaseProperties)</h4><p>spring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap from.<br>spring.couchbase.bucket.name=default # Name of the bucket to connect to.<br>spring.couchbase.bucket.password=  # Password of the bucket.<br>spring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the Key/value service.<br>spring.couchbase.env.endpoints.query=1 # Number of sockets per node against the Query (N1QL) service.<br>spring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view service.<br>spring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automatically if a “keyStore” is provided unless specified otherwise.<br>spring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the certificates.<br>spring.couchbase.env.ssl.key-store-password= # Password used to access the key store.<br>spring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout in milliseconds.<br>spring.couchbase.env.timeouts.key-value=2500 # Blocking operations performed on a specific key timeout in milliseconds.<br>spring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout in milliseconds.<br>spring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connections timeout in milliseconds.<br>spring.couchbase.env.timeouts.view=7500 # Regular and geospatial view operations timeout in milliseconds.</p><h4 id="dao-persistenceexceptiontranslationautoconfiguration"><a class="markdownIt-Anchor" href="#dao-persistenceexceptiontranslationautoconfiguration"></a> DAO (PersistenceExceptionTranslationAutoConfiguration)</h4><p>spring.dao.exceptiontranslation.enabled=true # Enable the PersistenceExceptionTranslationPostProcessor.</p><h4 id="cassandra-cassandraproperties"><a class="markdownIt-Anchor" href="#cassandra-cassandraproperties"></a> CASSANDRA (CassandraProperties)</h4><p>spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.<br>spring.data.cassandra.compression=none # Compression supported by the Cassandra binary protocol.<br>spring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.<br>spring.data.cassandra.consistency-level= # Queries consistency level.<br>spring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.<br>spring.data.cassandra.fetch-size= # Queries default fetch size.<br>spring.data.cassandra.keyspace-name= # Keyspace name to use.<br>spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.<br>spring.data.cassandra.port= # Port of the Cassandra server.<br>spring.data.cassandra.password= # Login password of the server.<br>spring.data.cassandra.reactive-repositories.enabled=true # Enable Cassandra reactive repositories.<br>spring.data.cassandra.read-timeout-millis= # Socket option: read time out.<br>spring.data.cassandra.reconnection-policy= # Reconnection policy class.<br>spring.data.cassandra.repositories.enabled= # Enable Cassandra repositories.<br>spring.data.cassandra.retry-policy= # Class name of the retry policy.<br>spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.<br>spring.data.cassandra.schema-action=none # Schema action to take at startup.<br>spring.data.cassandra.ssl=false # Enable SSL support.<br>spring.data.cassandra.username= # Login user of the server.</p><h4 id="data-couchbase-couchbasedataproperties"><a class="markdownIt-Anchor" href="#data-couchbase-couchbasedataproperties"></a> DATA COUCHBASE (CouchbaseDataProperties)</h4><p>spring.data.couchbase.auto-index=false # Automatically create views and indexes.<br>spring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by default on generated queries.<br>spring.data.couchbase.repositories.enabled=true # Enable Couchbase repositories.</p><h4 id="elasticsearch-elasticsearchproperties"><a class="markdownIt-Anchor" href="#elasticsearch-elasticsearchproperties"></a> ELASTICSEARCH (ElasticsearchProperties)</h4><p>spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.<br>spring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.<br>spring.data.elasticsearch.properties.*= # Additional properties used to configure the client.<br>spring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch repositories.</p><h4 id="data-ldap"><a class="markdownIt-Anchor" href="#data-ldap"></a> DATA LDAP</h4><p>spring.data.ldap.repositories.enabled=true # Enable LDAP repositories.</p><h4 id="mongodb-mongoproperties"><a class="markdownIt-Anchor" href="#mongodb-mongoproperties"></a> MONGODB (MongoProperties)</h4><p>spring.data.mongodb.authentication-database= # Authentication database name.<br>spring.data.mongodb.database=test # Database name.<br>spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.<br>spring.data.mongodb.grid-fs-database= # GridFS database name.<br>spring.data.mongodb.host=localhost # Mongo server host. Cannot be set with uri.<br>spring.data.mongodb.password= # Login password of the mongo server. Cannot be set with uri.<br>spring.data.mongodb.port=27017 # Mongo server port. Cannot be set with uri.<br>spring.data.mongodb.reactive-repositories.enabled=true # Enable Mongo reactive repositories.<br>spring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.<br>spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. Cannot be set with host, port and credentials.<br>spring.data.mongodb.username= # Login user of the mongo server. Cannot be set with uri.</p><h4 id="data-redis"><a class="markdownIt-Anchor" href="#data-redis"></a> DATA REDIS</h4><p>spring.data.redis.repositories.enabled=true # Enable Redis repositories.</p><h4 id="neo4j-neo4jproperties"><a class="markdownIt-Anchor" href="#neo4j-neo4jproperties"></a> NEO4J (Neo4jProperties)</h4><p>spring.data.neo4j.auto-index=none # Auto index mode.<br>spring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embedded driver is available.<br>spring.data.neo4j.open-in-view=false # Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.<br>spring.data.neo4j.password= # Login password of the server.<br>spring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories.<br>spring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.<br>spring.data.neo4j.username= # Login user of the server.</p><h4 id="data-rest-repositoryrestproperties"><a class="markdownIt-Anchor" href="#data-rest-repositoryrestproperties"></a> DATA REST (RepositoryRestProperties)</h4><p>spring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.<br>spring.data.rest.default-page-size= # Default size of pages.<br>spring.data.rest.detection-strategy=default # Strategy to use to determine which repositories get exposed.<br>spring.data.rest.enable-enum-translation= # Enable enum value translation via the Spring Data REST default resource bundle.<br>spring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.<br>spring.data.rest.max-page-size= # Maximum size of pages.<br>spring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.<br>spring.data.rest.return-body-on-create= # Return a response body after creating an entity.<br>spring.data.rest.return-body-on-update= # Return a response body after updating an entity.<br>spring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.</p><h4 id="solr-solrproperties"><a class="markdownIt-Anchor" href="#solr-solrproperties"></a> SOLR (SolrProperties)</h4><p>spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if “zk-host” is set.<br>spring.data.solr.repositories.enabled=true # Enable Solr repositories.<br>spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.</p><h4 id="datasource-datasourceautoconfiguration-datasourceproperties"><a class="markdownIt-Anchor" href="#datasource-datasourceautoconfiguration-datasourceproperties"></a> DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</h4><p>spring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.<br>spring.datasource.data= # Data (DML) script resource references.<br>spring.datasource.data-username= # User of the database to execute DML scripts (if different).<br>spring.datasource.data-password= # Password of the database to execute DML scripts (if different).<br>spring.datasource.dbcp2.<em>= # Commons DBCP2 specific settings<br>spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.<br>spring.datasource.generate-unique-name=false # Generate a random datasource name.<br>spring.datasource.hikari.</em>= # Hikari specific settings<br>spring.datasource.initialize=true # Populate the database using ‘data.sql’.<br>spring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).<br>spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username &amp; password are ignored when set.<br>spring.datasource.name=testdb # Name of the datasource.<br>spring.datasource.password= # Login password of the database.<br>spring.datasource.platform=all # Platform to use in the schema resource (schema-${platform}.sql).<br>spring.datasource.schema= # Schema (DDL) script resource references.<br>spring.datasource.schema-username= # User of the database to execute DDL scripts (if different).<br>spring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).<br>spring.datasource.separator=; # Statement separator in SQL initialization scripts.<br>spring.datasource.sql-script-encoding= # SQL scripts encoding.<br>spring.datasource.tomcat.*= # Tomcat datasource specific settings<br>spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.<br>spring.datasource.url= # JDBC url of the database.<br>spring.datasource.username= # Login user of the database.<br>spring.datasource.xa.data-source-class-name= # XA datasource fully qualified name.<br>spring.datasource.xa.properties= # Properties to pass to the XA data source.</p><h4 id="jest-elasticsearch-http-client-jestproperties"><a class="markdownIt-Anchor" href="#jest-elasticsearch-http-client-jestproperties"></a> JEST (Elasticsearch HTTP client) (JestProperties)</h4><p>spring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in milliseconds.<br>spring.elasticsearch.jest.multi-threaded=true # Enable connection requests from multiple execution threads.<br>spring.elasticsearch.jest.password= # Login password.<br>spring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.<br>spring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.<br>spring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds.<br>spring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.<br>spring.elasticsearch.jest.username= # Login user.</p><h4 id="h2-web-console-h2consoleproperties"><a class="markdownIt-Anchor" href="#h2-web-console-h2consoleproperties"></a> H2 Web Console (H2ConsoleProperties)</h4><p>spring.h2.console.enabled=false # Enable the console.<br>spring.h2.console.path=/h2-console # Path at which the console will be available.<br>spring.h2.console.settings.trace=false # Enable trace output.<br>spring.h2.console.settings.web-allow-others=false # Enable remote access.</p><h4 id="jooq-jooqautoconfiguration"><a class="markdownIt-Anchor" href="#jooq-jooqautoconfiguration"></a> JOOQ (JooqAutoConfiguration)</h4><p>spring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance <code>POSTGRES</code></p><h4 id="jpa-jpabaseconfiguration-hibernatejpaautoconfiguration"><a class="markdownIt-Anchor" href="#jpa-jpabaseconfiguration-hibernatejpaautoconfiguration"></a> JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</h4><p>spring.data.jpa.repositories.enabled=true # Enable JPA repositories.<br>spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the “databasePlatform” property.<br>spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the “Database” enum.<br>spring.jpa.generate-ddl=false # Initialize the schema on startup.<br>spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the “hibernate.hbm2ddl.auto” property. Default to “create-drop” when using an embedded database, “none” otherwise.<br>spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.<br>spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.<br>spring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate’s newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.<br>spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.<br>spring.jpa.properties.*= # Additional native properties to set on the JPA provider.<br>spring.jpa.show-sql=false # Enable logging of SQL statements.</p><h4 id="jta-jtaautoconfiguration"><a class="markdownIt-Anchor" href="#jta-jtaautoconfiguration"></a> JTA (JtaAutoConfiguration)</h4><p>spring.jta.enabled=true # Enable JTA support.<br>spring.jta.log-dir= # Transaction logs directory.<br>spring.jta.transaction-manager-id= # Transaction manager unique identifier.</p><h4 id="atomikos-atomikosproperties"><a class="markdownIt-Anchor" href="#atomikos-atomikosproperties"></a> ATOMIKOS (AtomikosProperties)</h4><p>spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.<br>spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or not to ignore the transacted flag when creating session.<br>spring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not local transactions are desired.<br>spring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool’s maintenance thread.<br>spring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.<br>spring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.<br>spring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.<br>spring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.<br>spring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.<br>spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.<br>spring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.<br>spring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.<br>spring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.<br>spring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool’s maintenance thread.<br>spring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.<br>spring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.<br>spring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.<br>spring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.<br>spring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.<br>spring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.<br>spring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.<br>spring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints.<br>spring.jta.atomikos.properties.console-file-count=1 # Number of debug logs files that can be created.<br>spring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.<br>spring.jta.atomikos.properties.console-file-name=tm.out # Debug logs file name.<br>spring.jta.atomikos.properties.console-log-level=warn # Console log level.<br>spring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout for JTA transactions.<br>spring.jta.atomikos.properties.enable-logging=true # Enable disk logging.<br>spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.<br>spring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should be stored.<br>spring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.<br>spring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.<br>spring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.<br>spring.jta.atomikos.properties.output-dir= # Directory in which to store the debug log files.<br>spring.jta.atomikos.properties.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.<br>spring.jta.atomikos.properties.service= # Transaction manager implementation that should be started.<br>spring.jta.atomikos.properties.threaded-two-phase-commit=false # Use different (and concurrent) threads for two-phase commit on the participating resources.<br>spring.jta.atomikos.properties.transaction-manager-unique-name= # Transaction manager’s unique name.</p><h4 id="bitronix"><a class="markdownIt-Anchor" href="#bitronix"></a> BITRONIX</h4><p>spring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.<br>spring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.<br>spring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.<br>spring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.<br>spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.<br>spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.<br>spring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not produces and consumers should be cached.<br>spring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.<br>spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.<br>spring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.<br>spring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.<br>spring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.<br>spring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.<br>spring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.<br>spring.jta.bitronix.connectionfactory.test-connections=true # Whether or not connections should be tested when acquired from the pool.<br>spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).<br>spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.<br>spring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.<br>spring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.<br>spring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.<br>spring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.<br>spring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.<br>spring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.<br>spring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.<br>spring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.<br>spring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.<br>spring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the database can run many transactions on the same connection and supports transaction interleaving.<br>spring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not Connection.isValid() is called when acquiring a connection from the pool.<br>spring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.<br>spring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.<br>spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.<br>spring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.<br>spring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.<br>spring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.<br>spring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.<br>spring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.<br>spring.jta.bitronix.datasource.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.<br>spring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.<br>spring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).<br>spring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.<br>spring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.<br>spring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRC resources to be enlisted into the same transaction.<br>spring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronously execution of two phase commit.<br>spring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.<br>spring.jta.bitronix.properties.current-node-only-recovery=true # Recover only the current node.<br>spring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log the creation and commit call stacks of transactions executed without a single enlisted resource.<br>spring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction timeout in seconds.<br>spring.jta.bitronix.properties.disable-jmx=false # Enable JMX support.<br>spring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.<br>spring.jta.bitronix.properties.filter-log-status=false # Enable filtering of logs so that only mandatory logs are written.<br>spring.jta.bitronix.properties.force-batching-enabled=true #  Set if disk forces are batched.<br>spring.jta.bitronix.properties.forced-write-enabled=true # Set if logs are forced to disk.<br>spring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.<br>spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.<br>spring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the UserTransaction.<br>spring.jta.bitronix.properties.journal=disk # Name of the journal. Can be ‘disk’, ‘null’ or a class name.<br>spring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.<br>spring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.<br>spring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.<br>spring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader configuration file name.<br>spring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine’s IP address.<br>spring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions log entries.<br>spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Log a warning for transactions executed without a single enlisted resource.</p><h4 id="narayana-narayanaproperties"><a class="markdownIt-Anchor" href="#narayana-narayanaproperties"></a> NARAYANA (NarayanaProperties)</h4><p>spring.jta.narayana.default-timeout=60 # Transaction timeout in seconds.<br>spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.<br>spring.jta.narayana.log-dir= # Transaction object store directory.<br>spring.jta.narayana.one-phase-commit=true # Enable one phase commit optimisation.<br>spring.jta.narayana.periodic-recovery-period=120 # Interval in which periodic recovery scans are performed in seconds.<br>spring.jta.narayana.recovery-backoff-period=10 # Back off period between first and second phases of the recovery scan in seconds.<br>spring.jta.narayana.recovery-db-pass= # Database password to be used by recovery manager.<br>spring.jta.narayana.recovery-db-user= # Database username to be used by recovery manager.<br>spring.jta.narayana.recovery-jms-pass= # JMS password to be used by recovery manager.<br>spring.jta.narayana.recovery-jms-user= # JMS username to be used by recovery manager.<br>spring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.<br>spring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.<br>spring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan filters.</p><h4 id="embedded-mongodb-embeddedmongoproperties"><a class="markdownIt-Anchor" href="#embedded-mongodb-embeddedmongoproperties"></a> EMBEDDED MONGODB (EmbeddedMongoProperties)</h4><p>spring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.<br>spring.mongodb.embedded.storage.database-dir= # Directory used for data storage.<br>spring.mongodb.embedded.storage.oplog-size= # Maximum size of the oplog in megabytes.<br>spring.mongodb.embedded.storage.repl-set-name= # Name of the replica set.<br>spring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.</p><h4 id="redis-redisproperties"><a class="markdownIt-Anchor" href="#redis-redisproperties"></a> REDIS (RedisProperties)</h4><p>spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.<br>spring.redis.cluster.nodes= # Comma-separated list of “host:port” pairs to bootstrap from.<br>spring.redis.database=0 # Database index used by the connection factory.<br>spring.redis.url= # Connection URL, will override host, port and password (user will be ignored), e.g. redis://user:password@example.com:6379<br>spring.redis.host=localhost # Redis server host.<br>spring.redis.jedis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.<br>spring.redis.jedis.pool.max-idle=8 # Max number of “idle” connections in the pool. Use a negative value to indicate an unlimited number of idle connections.<br>spring.redis.jedis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.<br>spring.redis.jedis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.<br>spring.redis.lettuce.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.<br>spring.redis.lettuce.pool.max-idle=8 # Max number of “idle” connections in the pool. Use a negative value to indicate an unlimited number of idle connections.<br>spring.redis.lettuce.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.<br>spring.redis.lettuce.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.<br>spring.redis.lettuce.shutdown-timeout=2000 # Shutdown timeout in milliseconds.<br>spring.redis.password= # Login password of the redis server.<br>spring.redis.port=6379 # Redis server port.<br>spring.redis.sentinel.master= # Name of Redis server.<br>spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.<br>spring.redis.ssl=false # Enable SSL support.<br>spring.redis.timeout=0 # Connection timeout in milliseconds.</p><h4 id="transaction-transactionproperties"><a class="markdownIt-Anchor" href="#transaction-transactionproperties"></a> TRANSACTION (TransactionProperties)</h4><p>spring.transaction.default-timeout= # Default transaction timeout in seconds.<br>spring.transaction.rollback-on-commit-failure= # Perform the rollback on commit failures.</p><h4 id="activemq-activemqproperties"><a class="markdownIt-Anchor" href="#activemq-activemqproperties"></a> ACTIVEMQ (ActiveMQProperties)</h4><p>spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance <code>tcp://localhost:61616</code><br>spring.activemq.in-memory=true # Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.<br>spring.activemq.password= # Login password of the broker.<br>spring.activemq.user= # Login user of the broker.<br>spring.activemq.packages.trust-all=false # Trust all packages.<br>spring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).<br>spring.activemq.pool.configuration.*= # See PooledConnectionFactory.<br>spring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.<br>spring.activemq.pool.expiry-timeout=0 # Connection expiration timeout in milliseconds.<br>spring.activemq.pool.idle-timeout=30000 # Connection idle timeout in milliseconds.<br>spring.activemq.pool.max-connections=1 # Maximum number of pooled connections.</p><h4 id="artemis-artemisproperties"><a class="markdownIt-Anchor" href="#artemis-artemisproperties"></a> ARTEMIS (ArtemisProperties)</h4><p>spring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.<br>spring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.<br>spring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs are available.<br>spring.artemis.embedded.persistent=false # Enable persistent store.<br>spring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.<br>spring.artemis.embedded.server-id= # Server id. By default, an auto-incremented counter is used.<br>spring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.<br>spring.artemis.host=localhost # Artemis broker host.<br>spring.artemis.mode= # Artemis deployment mode, auto-detected by default.<br>spring.artemis.password= # Login password of the broker.<br>spring.artemis.port=61616 # Artemis broker port.<br>spring.artemis.user= # Login user of the broker.</p><h4 id="spring-batch-batchproperties"><a class="markdownIt-Anchor" href="#spring-batch-batchproperties"></a> SPRING BATCH (BatchProperties)</h4><p>spring.batch.initializer.enabled= # Create the required batch tables on startup if necessary. Enabled automatically if no custom table prefix is set or if a custom schema is configured.<br>spring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.<br>spring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance <code>job1,job2</code>). By default, all Jobs found in the context are executed.<br>spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.<br>spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.</p><h4 id="spring-integration-integrationproperties"><a class="markdownIt-Anchor" href="#spring-integration-integrationproperties"></a> SPRING INTEGRATION (IntegrationProperties)</h4><p>spring.integration.jdbc.initializer.enabled=false # Create the required integration tables on startup.<br>spring.integration.jdbc.schema=classpath:org/springframework/integration/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</p><h4 id="jms-jmsproperties"><a class="markdownIt-Anchor" href="#jms-jmsproperties"></a> JMS (JmsProperties)</h4><p>spring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.<br>spring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.<br>spring.jms.listener.auto-startup=true # Start the container automatically on startup.<br>spring.jms.listener.concurrency= # Minimum number of concurrent consumers.<br>spring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.<br>spring.jms.pub-sub-domain=false # Specify if the default destination type is topic.<br>spring.jms.template.default-destination= # Default destination to use on send/receive operations that do not have a destination parameter.<br>spring.jms.template.delivery-delay= # Delivery delay to use for send calls in milliseconds.<br>spring.jms.template.delivery-mode= # Delivery mode. Enable QoS when set.<br>spring.jms.template.priority= # Priority of a message when sending. Enable QoS when set.<br>spring.jms.template.qos-enabled= # Enable explicit QoS when sending a message.<br>spring.jms.template.receive-timeout= # Timeout to use for receive calls in milliseconds.<br>spring.jms.template.time-to-live= # Time-to-live of a message when sending in milliseconds. Enable QoS when set.</p><h4 id="apache-kafka-kafkaproperties"><a class="markdownIt-Anchor" href="#apache-kafka-kafkaproperties"></a> APACHE KAFKA (KafkaProperties)</h4><p>spring.kafka.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.<br>spring.kafka.client-id= # Id to pass to the server when making requests; used for server-side logging.<br>spring.kafka.consumer.auto-commit-interval= # Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if ‘enable.auto.commit’ true.<br>spring.kafka.consumer.auto-offset-reset= # What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server.<br>spring.kafka.consumer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.<br>spring.kafka.consumer.client-id= # Id to pass to the server when making requests; used for server-side logging.<br>spring.kafka.consumer.enable-auto-commit= # If true the consumer’s offset will be periodically committed in the background.<br>spring.kafka.consumer.fetch-max-wait= # Maximum amount of time in milliseconds the server will block before answering the fetch request if there isn’t sufficient data to immediately satisfy the requirement given by “fetch.min.bytes”.<br>spring.kafka.consumer.fetch-min-size= # Minimum amount of data the server should return for a fetch request in bytes.<br>spring.kafka.consumer.group-id= # Unique string that identifies the consumer group this consumer belongs to.<br>spring.kafka.consumer.heartbeat-interval= # Expected time in milliseconds between heartbeats to the consumer coordinator.<br>spring.kafka.consumer.key-deserializer= # Deserializer class for keys.<br>spring.kafka.consumer.max-poll-records= # Maximum number of records returned in a single call to poll().<br>spring.kafka.consumer.ssl.key-password= # Password of the private key in the key store file.<br>spring.kafka.consumer.ssl.keystore-location= # Location of the key store file.<br>spring.kafka.consumer.ssl.keystore-password= # Store password for the key store file.<br>spring.kafka.consumer.ssl.truststore-location= # Location of the trust store file.<br>spring.kafka.consumer.ssl.truststore-password= # Store password for the trust store file.<br>spring.kafka.consumer.value-deserializer= # Deserializer class for values.<br>spring.kafka.jaas.control-flag=required # Control flag for login configuration.<br>spring.kafka.jaas.enabled= # Enable JAAS configuration.<br>spring.kafka.jaas.login-module=com.sun.security.auth.module.Krb5LoginModule # Login module.<br>spring.kafka.jaas.options= # Additional JAAS options.<br>spring.kafka.listener.ack-count= # Number of records between offset commits when ackMode is “COUNT” or “COUNT_TIME”.<br>spring.kafka.listener.ack-mode= # Listener AckMode; see the spring-kafka documentation.<br>spring.kafka.listener.ack-time= # Time in milliseconds between offset commits when ackMode is “TIME” or “COUNT_TIME”.<br>spring.kafka.listener.concurrency= # Number of threads to run in the listener containers.<br>spring.kafka.listener.poll-timeout= # Timeout in milliseconds to use when polling the consumer.<br>spring.kafka.producer.acks= # Number of acknowledgments the producer requires the leader to have received before considering a request complete.<br>spring.kafka.producer.batch-size= # Number of records to batch before sending.<br>spring.kafka.producer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.<br>spring.kafka.producer.buffer-memory= # Total bytes of memory the producer can use to buffer records waiting to be sent to the server.<br>spring.kafka.producer.client-id= # Id to pass to the server when making requests; used for server-side logging.<br>spring.kafka.producer.compression-type= # Compression type for all data generated by the producer.<br>spring.kafka.producer.key-serializer= # Serializer class for keys.<br>spring.kafka.producer.retries= # When greater than zero, enables retrying of failed sends.<br>spring.kafka.producer.ssl.key-password= # Password of the private key in the key store file.<br>spring.kafka.producer.ssl.keystore-location= # Location of the key store file.<br>spring.kafka.producer.ssl.keystore-password= # Store password for the key store file.<br>spring.kafka.producer.ssl.truststore-location= # Location of the trust store file.<br>spring.kafka.producer.ssl.truststore-password= # Store password for the trust store file.<br>spring.kafka.producer.value-serializer= # Serializer class for values.<br>spring.kafka.properties.*= # Additional properties used to configure the client.<br>spring.kafka.ssl.key-password= # Password of the private key in the key store file.<br>spring.kafka.ssl.keystore-location= # Location of the key store file.<br>spring.kafka.ssl.keystore-password= # Store password for the key store file.<br>spring.kafka.ssl.truststore-location= # Location of the trust store file.<br>spring.kafka.ssl.truststore-password= # Store password for the trust store file.<br>spring.kafka.template.default-topic= # Default topic to which messages will be sent.</p><h4 id="rabbit-rabbitproperties"><a class="markdownIt-Anchor" href="#rabbit-rabbitproperties"></a> RABBIT (RabbitProperties)</h4><p>spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.<br>spring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to obtain a channel if the cache size has been reached.<br>spring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.<br>spring.rabbitmq.cache.connection.mode=channel # Connection factory cache mode.<br>spring.rabbitmq.cache.connection.size= # Number of connections to cache.<br>spring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for infinite.<br>spring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.<br>spring.rabbitmq.host=localhost # RabbitMQ host.<br>spring.rabbitmq.listener.direct.acknowledge-mode= # Acknowledge mode of container.<br>spring.rabbitmq.listener.direct.auto-startup=true # Start the container automatically on startup.<br>spring.rabbitmq.listener.direct.consumers-per-queue= # Number of consumers per queue.<br>spring.rabbitmq.listener.direct.default-requeue-rejected= # Whether rejected deliveries are requeued by default; default true.<br>spring.rabbitmq.listener.direct.idle-event-interval= # How often idle container events should be published in milliseconds.<br>spring.rabbitmq.listener.direct.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).<br>spring.rabbitmq.listener.simple.acknowledge-mode= # Acknowledge mode of container.<br>spring.rabbitmq.listener.simple.auto-startup=true # Start the container automatically on startup.<br>spring.rabbitmq.listener.simple.concurrency= # Minimum number of listener invoker threads.<br>spring.rabbitmq.listener.simple.default-requeue-rejected= # Whether or not to requeue delivery failures.<br>spring.rabbitmq.listener.simple.idle-event-interval= # How often idle container events should be published in milliseconds.<br>spring.rabbitmq.listener.simple.max-concurrency= # Maximum number of listener invoker.<br>spring.rabbitmq.listener.simple.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).<br>spring.rabbitmq.listener.simple.retry.enabled=false # Whether or not publishing retries are enabled.<br>spring.rabbitmq.listener.simple.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message.<br>spring.rabbitmq.listener.simple.retry.max-attempts=3 # Maximum number of attempts to deliver a message.<br>spring.rabbitmq.listener.simple.retry.max-interval=10000 # Maximum interval between attempts.<br>spring.rabbitmq.listener.simple.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval.<br>spring.rabbitmq.listener.simple.retry.stateless=true # Whether or not retry is stateless or stateful.<br>spring.rabbitmq.listener.simple.transaction-size= # Number of messages to be processed in a transaction; number of messages between acks. For best results it should be less than or equal to the prefetch count.<br>spring.rabbitmq.listener.type=simple # Listener container type.<br>spring.rabbitmq.password= # Login to authenticate against the broker.<br>spring.rabbitmq.port=5672 # RabbitMQ port.<br>spring.rabbitmq.publisher-confirms=false # Enable publisher confirms.<br>spring.rabbitmq.publisher-returns=false # Enable publisher returns.<br>spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.<br>spring.rabbitmq.ssl.enabled=false # Enable SSL support.<br>spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.<br>spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.<br>spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.<br>spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.<br>spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.<br>spring.rabbitmq.template.mandatory=false # Enable mandatory messages.<br>spring.rabbitmq.template.receive-timeout=0 # Timeout for <code>receive()</code> methods.<br>spring.rabbitmq.template.reply-timeout=5000 # Timeout for <code>sendAndReceive()</code> methods.<br>spring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the <code>RabbitTemplate</code>.<br>spring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and second attempt to publish a message.<br>spring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish a message.<br>spring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to publish a message.<br>spring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous publishing retry interval.<br>spring.rabbitmq.username= # Login user to authenticate to the broker.<br>spring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.</p><h4 id="endpoints-abstractendpoint-subclasses"><a class="markdownIt-Anchor" href="#endpoints-abstractendpoint-subclasses"></a> ENDPOINTS (AbstractEndpoint subclasses)</h4><p>endpoints.enabled=true # Enable endpoints.<br>endpoints.sensitive= # Default endpoint sensitive setting.<br>endpoints.actuator.enabled=true # Enable the endpoint.<br>endpoints.actuator.path= # Endpoint URL path.<br>endpoints.actuator.sensitive=false # Enable security on the endpoint.<br>endpoints.auditevents.enabled= # Enable the endpoint.<br>endpoints.auditevents.path= # Endpoint path.<br>endpoints.auditevents.sensitive=false # Enable security on the endpoint.<br>endpoints.autoconfig.enabled= # Enable the endpoint.<br>endpoints.autoconfig.id= # Endpoint identifier.<br>endpoints.autoconfig.path= # Endpoint path.<br>endpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.beans.enabled= # Enable the endpoint.<br>endpoints.beans.id= # Endpoint identifier.<br>endpoints.beans.path= # Endpoint path.<br>endpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.configprops.enabled= # Enable the endpoint.<br>endpoints.configprops.id= # Endpoint identifier.<br>endpoints.configprops.keys-to-sanitize=password,secret,key,token,.<em>credentials.</em>,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.<br>endpoints.configprops.path= # Endpoint path.<br>endpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.docs.curies.enabled=false # Enable the curie generation.<br>endpoints.docs.enabled=true # Enable actuator docs endpoint.<br>endpoints.docs.path=/docs #<br>endpoints.docs.sensitive=false #<br>endpoints.dump.enabled= # Enable the endpoint.<br>endpoints.dump.id= # Endpoint identifier.<br>endpoints.dump.path= # Endpoint path.<br>endpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.env.enabled= # Enable the endpoint.<br>endpoints.env.id= # Endpoint identifier.<br>endpoints.env.keys-to-sanitize=password,secret,key,token,.<em>credentials.</em>,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.<br>endpoints.env.path= # Endpoint path.<br>endpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.flyway.enabled= # Enable the endpoint.<br>endpoints.flyway.id= # Endpoint identifier.<br>endpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.health.enabled= # Enable the endpoint.<br>endpoints.health.id= # Endpoint identifier.<br>endpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).<br>endpoints.health.path= # Endpoint path.<br>endpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.<br>endpoints.heapdump.enabled= # Enable the endpoint.<br>endpoints.heapdump.path= # Endpoint path.<br>endpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.hypermedia.enabled=false # Enable hypermedia support for endpoints.<br>endpoints.info.enabled= # Enable the endpoint.<br>endpoints.info.id= # Endpoint identifier.<br>endpoints.info.path= # Endpoint path.<br>endpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.jolokia.enabled=true # Enable Jolokia endpoint.<br>endpoints.jolokia.path=/jolokia # Endpoint URL path.<br>endpoints.jolokia.sensitive=true # Enable security on the endpoint.<br>endpoints.liquibase.enabled= # Enable the endpoint.<br>endpoints.liquibase.id= # Endpoint identifier.<br>endpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.logfile.enabled=true # Enable the endpoint.<br>endpoints.logfile.external-file= # External Logfile to be accessed.<br>endpoints.logfile.path=/logfile # Endpoint URL path.<br>endpoints.logfile.sensitive=true # Enable security on the endpoint.<br>endpoints.loggers.enabled=true # Enable the endpoint.<br>endpoints.loggers.id= # Endpoint identifier.<br>endpoints.loggers.path=/logfile # Endpoint path.<br>endpoints.loggers.sensitive=true # Mark if the endpoint exposes sensitive information.<br>endpoints.mappings.enabled= # Enable the endpoint.<br>endpoints.mappings.id= # Endpoint identifier.<br>endpoints.mappings.path= # Endpoint path.<br>endpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.metrics.enabled= # Enable the endpoint.<br>endpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.<br>endpoints.metrics.filter.gauge-submissions=merged # Http filter gauge submissions (merged, per-http-method)<br>endpoints.metrics.filter.counter-submissions=merged # Http filter counter submissions (merged, per-http-method)<br>endpoints.metrics.id= # Endpoint identifier.<br>endpoints.metrics.path= # Endpoint path.<br>endpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.shutdown.enabled= # Enable the endpoint.<br>endpoints.shutdown.id= # Endpoint identifier.<br>endpoints.shutdown.path= # Endpoint path.<br>endpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.trace.enabled= # Enable the endpoint.<br>endpoints.trace.filter.enabled=true # Enable the trace servlet filter.<br>endpoints.trace.id= # Endpoint identifier.<br>endpoints.trace.path= # Endpoint path.<br>endpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.</p><h4 id="endpoints-cors-configuration-endpointcorsproperties"><a class="markdownIt-Anchor" href="#endpoints-cors-configuration-endpointcorsproperties"></a> ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)</h4><p>endpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.<br>endpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. ‘<em>’ allows all headers.<br>endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '</em>’ allows all methods.<br>endpoints.cors.allowed-origins= # Comma-separated list of origins to allow. ‘*’ allows all origins. When not set, CORS support is disabled.<br>endpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.<br>endpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.</p><h4 id="jmx-endpoint-endpointmbeanexportproperties"><a class="markdownIt-Anchor" href="#jmx-endpoint-endpointmbeanexportproperties"></a> JMX ENDPOINT (EndpointMBeanExportProperties)</h4><p>endpoints.jmx.domain= # JMX domain name. Initialized with the value of ‘spring.jmx.default-domain’ if set.<br>endpoints.jmx.enabled=true # Enable JMX export of all endpoints.<br>endpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.<br>endpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.</p><h4 id="jolokia-jolokiaproperties"><a class="markdownIt-Anchor" href="#jolokia-jolokiaproperties"></a> JOLOKIA (JolokiaProperties)</h4><p>jolokia.config.*= # See Jolokia manual</p><h4 id="management-http-server-managementserverproperties"><a class="markdownIt-Anchor" href="#management-http-server-managementserverproperties"></a> MANAGEMENT HTTP SERVER (ManagementServerProperties)</h4><p>management.add-application-context-header=false # Add the “X-Application-Context” HTTP header in each response.<br>management.address= # Network address that the management endpoints should bind to.<br>management.context-path= # Management endpoint context-path. For instance <code>/actuator</code><br>management.cloudfoundry.enabled= # Enable extended Cloud Foundry actuator endpoints<br>management.cloudfoundry.skip-ssl-validation= # Skip SSL verification for Cloud Foundry actuator endpoint security calls<br>management.port= # Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.<br>management.security.enabled=true # Enable security.<br>management.security.roles=ACTUATOR # Comma-separated list of roles that can access the management endpoint.<br>management.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).<br>management.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.<br>management.ssl.client-auth= # Whether client authentication is wanted (“want”) or needed (“need”). Requires a trust store. Requires a custom management.port.<br>management.ssl.enabled= # Enable SSL support. Requires a custom management.port.<br>management.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom management.port.<br>management.ssl.key-alias= # Alias that identifies the key in the key store. Requires a custom management.port.<br>management.ssl.key-password= # Password used to access the key in the key store. Requires a custom management.port.<br>management.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.<br>management.ssl.key-store-password= # Password used to access the key store. Requires a custom management.port.<br>management.ssl.key-store-provider= # Provider for the key store. Requires a custom management.port.<br>management.ssl.key-store-type= # Type of the key store. Requires a custom management.port.<br>management.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.port.<br>management.ssl.trust-store= # Trust store that holds SSL certificates. Requires a custom management.port.<br>management.ssl.trust-store-password= # Password used to access the trust store. Requires a custom management.port.<br>management.ssl.trust-store-provider= # Provider for the trust store. Requires a custom management.port.<br>management.ssl.trust-store-type= # Type of the trust store. Requires a custom management.port.</p><h4 id="health-indicators"><a class="markdownIt-Anchor" href="#health-indicators"></a> HEALTH INDICATORS</h4><p>management.health.db.enabled=true # Enable database health check.<br>management.health.cassandra.enabled=true # Enable cassandra health check.<br>management.health.couchbase.enabled=true # Enable couchbase health check.<br>management.health.defaults.enabled=true # Enable default health indicators.<br>management.health.diskspace.enabled=true # Enable disk space health check.<br>management.health.diskspace.path= # Path used to compute the available disk space.<br>management.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.<br>management.health.elasticsearch.enabled=true # Enable elasticsearch health check.<br>management.health.elasticsearch.indices= # Comma-separated index names.<br>management.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.<br>management.health.jms.enabled=true # Enable JMS health check.<br>management.health.ldap.enabled=true # Enable LDAP health check.<br>management.health.mail.enabled=true # Enable Mail health check.<br>management.health.mongo.enabled=true # Enable MongoDB health check.<br>management.health.rabbit.enabled=true # Enable RabbitMQ health check.<br>management.health.redis.enabled=true # Enable Redis health check.<br>management.health.solr.enabled=true # Enable Solr health check.<br>management.health.status.order=DOWN, OUT_OF_SERVICE, UP, UNKNOWN # Comma-separated list of health statuses in order of severity.</p><h4 id="info-contributors-infocontributorproperties"><a class="markdownIt-Anchor" href="#info-contributors-infocontributorproperties"></a> INFO CONTRIBUTORS (InfoContributorProperties)</h4><p>management.info.build.enabled=true # Enable build info.<br>management.info.defaults.enabled=true # Enable default info contributors.<br>management.info.env.enabled=true # Enable environment info.<br>management.info.git.enabled=true # Enable git info.<br>management.info.git.mode=simple # Mode to use to expose git information.</p><h4 id="tracing-traceproperties"><a class="markdownIt-Anchor" href="#tracing-traceproperties"></a> TRACING (TraceProperties)</h4><p>management.trace.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.</p><h4 id="metrics-export-metricexportproperties"><a class="markdownIt-Anchor" href="#metrics-export-metricexportproperties"></a> METRICS EXPORT (MetricExportProperties)</h4><p>spring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what to do with the keys from the source repository.<br>spring.metrics.export.aggregate.prefix= # Prefix for global repository if active.<br>spring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.<br>spring.metrics.export.enabled=true # Flag to enable metric export (assuming a MetricWriter is available).<br>spring.metrics.export.excludes= # List of patterns for metric names to exclude. Applied after the includes.<br>spring.metrics.export.includes= # List of patterns for metric names to include.<br>spring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export (if active).<br>spring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if active.<br>spring.metrics.export.send-latest= # Flag to switch off any available optimizations based on not exporting unchanged metric values.<br>spring.metrics.export.statsd.host= # Host of a statsd server to receive exported metrics.<br>spring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported metrics.<br>spring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.<br>spring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean name.</p><h4 id="devtools-devtoolsproperties"><a class="markdownIt-Anchor" href="#devtools-devtoolsproperties"></a> DEVTOOLS (DevToolsProperties)</h4><p>spring.devtools.livereload.enabled=true # Enable a <a href="http://livereload.com" target="_blank" rel="noopener">livereload.com</a> compatible server.<br>spring.devtools.livereload.port=35729 # Server port.<br>spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.<br>spring.devtools.restart.additional-paths= # Additional paths to watch for changes.<br>spring.devtools.restart.enabled=true # Enable automatic restart.<br>spring.devtools.restart.exclude=META-INF/maven/<strong>,META-INF/resources/</strong>,resources/<strong>,static/</strong>,public/<strong>,templates/</strong>,<strong>/*Test.class,</strong>/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.<br>spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.<br>spring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.<br>spring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.</p><h4 id="remote-devtools-remotedevtoolsproperties"><a class="markdownIt-Anchor" href="#remote-devtools-remotedevtoolsproperties"></a> REMOTE DEVTOOLS (RemoteDevToolsProperties)</h4><p>spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.<br>spring.devtools.remote.debug.enabled=true # Enable remote debug support.<br>spring.devtools.remote.debug.local-port=8000 # Local remote debug server port.<br>spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.<br>spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.<br>spring.devtools.remote.restart.enabled=true # Enable remote restart.<br>spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).<br>spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.</p><h3 id="test"><a class="markdownIt-Anchor" href="#test"></a> TEST</h3><p>spring.test.database.replace=any # Type of existing DataSource to replace.<br>spring.test.mockmvc.print=default # MVC Print option.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;banner&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#banner&quot;&gt;&lt;/a&gt; BANNER&lt;/h4&gt;
&lt;p&gt;banner.charset=UTF-8 # Banner file encoding.&lt;br&gt;
banner.loca
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://luxiaowan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>ThreadLocal是怎么实现线程隔离的</title>
    <link href="http://luxiaowan.github.io/2019/11/20/ThreadLocal%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB%E7%9A%84/"/>
    <id>http://luxiaowan.github.io/2019/11/20/ThreadLocal是怎么实现线程隔离的/</id>
    <published>2019-11-20T15:21:56.000Z</published>
    <updated>2019-11-25T17:08:11.991Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal大家应该都不陌生，见过最多的使用场景应该是和SimpleDateFormat一起使用吧，因为这个SDF非线程安全的，所以需要使用ThreadLocal将它在线程之间隔离开，避免造成脏数据的🐞。那么ThreadLocal是怎么保证线程安全，又是如何操作的呢？</p><blockquote><p>案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      threadLocal.set(<span class="number">1</span>);</span><br><span class="line">      threadLocal.set(<span class="number">2</span>);</span><br><span class="line">      System.out.println(<span class="string">"cc1: "</span> + threadLocal.get());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">"cc1"</span>).start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"cc2: "</span> + threadLocal.get());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">"cc2"</span>).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc1: <span class="number">2</span></span><br><span class="line">cc2: <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>哦哟~cc2打印出来null，也就是在cc1线程中设置的值在线程cc2中获取不到，这也就是所谓的线程隔离，我们来看下ThreadLocal具体的代码实现吧：</p><blockquote><p>ThreadLocal的set(T t)方法源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取当前线程</span></span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  <span class="comment">// 获取当前线程的threadLocals属性，这个属性在Thread类中定义的，为Thread的实例变量</span></span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="comment">// 若线程的ThreadLocalMap已经存在，则调用ThreadLocalMap的set(ThreadLocal&lt;T&gt; key, Object value)方法</span></span><br><span class="line">  <span class="comment">// 否则创建新的ThreadLocalMap实例，并set对应的value</span></span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ThreadLocalMap的set(ThreadLocal<t> key, Object value)方法源码</t></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Entry[] tab = table;</span><br><span class="line">  <span class="keyword">int</span> len = tab.length;</span><br><span class="line">  <span class="comment">// 简单计算key所在的位置</span></span><br><span class="line">  <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 从key所在位置开始遍历table数组，找到具体key所在的位置</span></span><br><span class="line">  <span class="keyword">for</span> (Entry e = tab[i]; e != <span class="keyword">null</span>; e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">    <span class="comment">// 获取Entry实例的key值，这里调用的是超类java.lang.ref.Reference中的get(T t)方法</span></span><br><span class="line">    ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">    <span class="comment">// 若k与传入的参数key是同一个，则用参数value替换Entry实例的value，然后结束方法</span></span><br><span class="line">    <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">      e.value = value;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若获取的k为null，则表示这个变量已经被删除了，则去清理一下table数组，并对数组中元素进行清理并设置新的Entry实例</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">      replaceStaleEntry(key, value, i);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 代码走到这一步，说明该线程第一次设置数据，创建新的Entry实例放在table的第i个位置上</span></span><br><span class="line">  tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">  <span class="keyword">int</span> sz = ++size;</span><br><span class="line">  <span class="comment">// 清理table中的元素，若长度达到了扩容阈值，则对table进行扩容，扩容为原数组长度的2倍</span></span><br><span class="line">  <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">    rehash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ThreadLocal的createMap(Thread t, T firstValue)方法源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个ThreadLocalMap实例，并赋值给当前线程的实例变量threadLocals</span></span><br><span class="line">  <span class="comment">// 这里就是线程隔离的关键所在，每一个线程中的数据都是由线程独有的threadLocals变量存储的</span></span><br><span class="line">  t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ThreadLocalMap的构造器源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">  <span class="comment">// 实例化Entry数组，长度为初始长度16</span></span><br><span class="line">  table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">  <span class="comment">// 计算key在数组中的位置</span></span><br><span class="line">  <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 创建Entry实例，并放在table的i下标位置</span></span><br><span class="line">  table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">  <span class="comment">// 实际长度设置为1</span></span><br><span class="line">  size = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 设置数组扩容阈值（len * 2 / 3）</span></span><br><span class="line">  setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上便是ThreadLocal达到线程隔离的基本解析，讲解的比较基础，其实就是JDK源码鉴赏，还有什么不懂的地方就自己去看源码吧。</p><h4 id="延伸下"><a class="markdownIt-Anchor" href="#延伸下"></a> 延伸下</h4><blockquote><p>ThreadLocal的get()方法源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      T result = (T)e.value;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码比较简单，这里就不在进行解释了，我们着重看一下最后一句<code>setInitialValue()</code>这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  T value = initialValue();</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现和set方法类似，只不过是将一个<code>null</code>当做value而已，所以我们在没给ThreadLocal设置值的情况下调用get方法，则会为其创建一个默认的null值并返回null。</p><h4 id="留一个思考题"><a class="markdownIt-Anchor" href="#留一个思考题"></a> 留一个思考题</h4><p>因为我们每个线程的ThreadLocal的key的hash值都是固定的，那么Thread的threadLocals变量的table中会有多少个非null元素呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ThreadLocal大家应该都不陌生，见过最多的使用场景应该是和SimpleDateFormat一起使用吧，因为这个SDF非线程安全的，所以需要使用ThreadLocal将它在线程之间隔离开，避免造成脏数据的🐞。那么ThreadLocal是怎么保证线程安全，又是如何操作
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>慎用ArrayList中的SubList</title>
    <link href="http://luxiaowan.github.io/2019/11/11/%E6%85%8E%E7%94%A8ArrayList%E4%B8%AD%E7%9A%84SubList/"/>
    <id>http://luxiaowan.github.io/2019/11/11/慎用ArrayList中的SubList/</id>
    <published>2019-11-10T17:11:00.000Z</published>
    <updated>2019-12-19T16:51:55.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>双十一了，大家都省了多少钱啊？</p><p>题外话：此处交给大家一个查看商品历史价格的小方法：</p><ul><li><p>在商品链接的域名后加上三个v就能查看到该商品的历史价格啦</p></li><li><p>🌰</p><blockquote><p><a href="http://shop.taobao.com/xxxx" target="_blank" rel="noopener">http://shop.taobao.com/xxxx</a></p><p>↓</p><p><a href="http://shop.taobaovvv.com/xxx" target="_blank" rel="noopener">http://shop.taobaovvv.com/xxx</a></p></blockquote></li></ul></blockquote><p>步入正题，为什么说我们在实际开发过程中要慎用ArrayList的subList呢？其实这也是阿里军规中的一条，原因其实很简单：不稳定！也许看到这里会觉得&quot;就是创建一个独立的新的SubList的实例，怎么会不稳定！&quot;，如果你是这么想的，那么恭喜你，这篇文章真的能够帮助到你，且往下看：</p><hr><h3 id="1-看看sublist的set方法"><a class="markdownIt-Anchor" href="#1-看看sublist的set方法"></a> 1. 看看SubList的set方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; sourceList = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                add(<span class="string">"H"</span>); add(<span class="string">"E"</span>); add(<span class="string">"L"</span>); add(<span class="string">"L"</span>); add(<span class="string">"O"</span>);</span><br><span class="line">                add(<span class="string">"W"</span>); add(<span class="string">"O"</span>); add(<span class="string">"R"</span>); add(<span class="string">"L"</span>); add(<span class="string">"D"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;String&gt; subList = sourceList.subList(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">        System.out.println(<span class="string">"sourceList.subList(2, 5)得到: "</span> + subList);</span><br><span class="line"></span><br><span class="line">        subList.set(<span class="number">1</span>, <span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">        System.out.println(<span class="string">"subList: "</span> + subList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的执行结果是什么？先不要看下面的答案，自己想一想。</p><blockquote><p>答案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceList: [H, E, L, L, O, W, O, R, L, D]</span><br><span class="line">subList: [L, L, O]</span><br><span class="line">sourceList: [H, E, L, cc, O, W, O, R, L, D]</span><br><span class="line">subList: [L, cc, O]</span><br></pre></td></tr></table></figure><p>哦吼~！答案和你自己想的有没有出入？奇妙吧，为什么修改了subList中的元素，会影响到sourceList？我们来看下ArrayList的subList方法都做了些什么：</p><blockquote><p>JDK源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a view of the portion of this list between the specified</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> fromIndex&#125;, inclusive, and &#123;<span class="doctag">@code</span> toIndex&#125;, exclusive. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">    subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是检查我们的fromIndex和toIndex是否合法，然后调用ArrayList的内部类SubList创建一个SubList的实例。好像还真如我们之前想的一样，创建了一个独立的SubList的对象，没什么不对的，那我们来看一下SubList的构造器中都做了些什么吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SubList(AbstractList&lt;E&gt; parent, <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">  <span class="keyword">this</span>.parent = parent;</span><br><span class="line">  <span class="keyword">this</span>.parentOffset = fromIndex;</span><br><span class="line">  <span class="keyword">this</span>.offset = offset + fromIndex;</span><br><span class="line">  <span class="keyword">this</span>.size = toIndex - fromIndex;</span><br><span class="line">  <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是个什么鬼？ArrayList的实例对象(也就是parent)竟然作为参数传到了SubList中，SubList的偏移量为0+fromIndex，大小size为toIndex - fromIndex（也就是和String的substring方法一样，fromIndex到(toIndex -1)的数据集），修改次数modCount和ArrayList的modCount相等，那么我们猜测一下：SubList实例的变动，是否和ArrayList有关呢？</p><p>我们看到subList方法的注释中有这么一句话：<font color="red">Returns a view of the portion of this list</font>。难道SubList仅仅是ArrayList的一个被fromIndex和toIndex的区间视图？</p><p>上面的例子中，subList调用了它的set方法，我们来看一下这个set方法内部逻辑是什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">  rangeCheck(index);<span class="comment">// 下标校验</span></span><br><span class="line">  checkForComodification();<span class="comment">// 校验合法性</span></span><br><span class="line">  <span class="comment">// ***重点</span></span><br><span class="line">  <span class="comment">// 根据偏移量和下标，获取ArrayList对象的elementData数组中下标为(offset + index)的元素</span></span><br><span class="line">  <span class="comment">// offset是什么？从构造器中我们可以看到offset就是0 + fromIndex，也就是我们截取的起始下标，也就是SubList的set方法是直接在原ArrayList实例的内部数组上进行的操作</span></span><br><span class="line">  E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">  ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</span><br><span class="line">  <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里就一目了然了，怪不得我们修改了SubList的元素会影响到创建它的对象的值。所以在使用SubList的时候，如果需要修改SubList里面的值，一定要注意一下是否会影响到原List中的数据所涉及的业务，否则这个坑一旦踩上了，不太容易排查啊。</p><h3 id="2-再看看sublist的add方法"><a class="markdownIt-Anchor" href="#2-再看看sublist的add方法"></a> 2. 再看看SubList的add方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; sourceList = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                add(<span class="string">"H"</span>); add(<span class="string">"E"</span>); add(<span class="string">"L"</span>); add(<span class="string">"L"</span>); add(<span class="string">"O"</span>);</span><br><span class="line">                add(<span class="string">"W"</span>); add(<span class="string">"O"</span>); add(<span class="string">"R"</span>); add(<span class="string">"L"</span>); add(<span class="string">"D"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;String&gt; subList = sourceList.subList(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">        System.out.println(<span class="string">"sourceList.subList(2, 5)得到: "</span> + subList);</span><br><span class="line"></span><br><span class="line">        subList.add(<span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">        System.out.println(<span class="string">"subList: "</span> + subList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的执行结果又是什么呢？如果我们稍微思考一下，大致能正确的分析出结果：</p><blockquote><p>答案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceList: [H, E, L, L, O, W, O, R, L, D]</span><br><span class="line">subList: [L, L, O]</span><br><span class="line">sourceList: [H, E, L, L, O, cc, W, O, R, L, D]</span><br><span class="line">subList: [L, L, O, cc]</span><br></pre></td></tr></table></figure><p>我们向subList中添加一个元素，原列表sourceList在toIndex的位置插入了subList中add的元素，也就是我们在SubList中新增一个元素，同时会将这个元素添加到原List中。</p><blockquote><p>JDK源码</p></blockquote><p>我们查看SubList的源码，发现并没有add(E e)方法，那我们调用的add(“cc”)是调用到哪里去了呢？我们查看SubList类的声明，可以看到它是继承了<code>AbstractList</code>抽象类，所以这里应该是调用了超类里的add(E e)方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** AbstractList.java */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  add(size(), e);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到是调用了add(int index, E element)方法进行数据新增的，然而SubList里面实现了这个方法，那么我们来看下SubList中的这个方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 校验下标是否越界</span></span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line">  <span class="comment">// 校验原List是否有过修改</span></span><br><span class="line">  checkForComodification();</span><br><span class="line">  <span class="comment">// parent即是在构造器中注入的原List</span></span><br><span class="line">  parent.add(parentOffset + index, e);</span><br><span class="line">  <span class="comment">// 同步列表修改次数</span></span><br><span class="line">  <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">  <span class="comment">// 本列表的长度+1</span></span><br><span class="line">  <span class="keyword">this</span>.size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由SubList的源码可以看出，SubList实例的add方法实际上就是在修改原List，包括SubList中所有的方法均是在parent列表上进行操作。</p><h3 id="3-奇葩操作最坑的坑"><a class="markdownIt-Anchor" href="#3-奇葩操作最坑的坑"></a> 3. 奇葩操作，最坑的坑</h3><p>仔细分析如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; sourceList = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      add(<span class="string">"H"</span>); add(<span class="string">"E"</span>); add(<span class="string">"L"</span>); add(<span class="string">"L"</span>); add(<span class="string">"O"</span>);</span><br><span class="line">      add(<span class="string">"W"</span>); add(<span class="string">"O"</span>); add(<span class="string">"R"</span>); add(<span class="string">"L"</span>); add(<span class="string">"D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  List&lt;String&gt; subList = sourceList.subList(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">  System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">  System.out.println(<span class="string">"subList: "</span> + subList);</span><br><span class="line"></span><br><span class="line">  sourceList.add(<span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">  System.out.println(<span class="string">"subList: "</span> + subList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的执行结果是什么？在不执行这段代码的情况下，是不是以为是下面的结果？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceList: [H, E, L, L, O, W, O, R, L, D]</span><br><span class="line">subList: [L, L, O]</span><br><span class="line">sourceList: [H, E, L, L, O, W, O, R, L, D, cc]</span><br><span class="line">subList: [L, L, O]</span><br></pre></td></tr></table></figure><p>如果你说对，就是这个，那你可就说错咯，实际上在执行到<code>System.out.println(&quot;sourceList: &quot; + sourceList);</code>这一句代码的时候整个程序的输出都是正常的，但在执行最后一句代码的时候，就会报错了，错误信息是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$SubList.checkForComodification(ArrayList.java:<span class="number">1239</span>)</span><br><span class="line">at java.util.ArrayList$SubList.listIterator(ArrayList.java:<span class="number">1099</span>)</span><br><span class="line">at java.util.AbstractList.listIterator(AbstractList.java:<span class="number">299</span>)</span><br><span class="line">at java.util.ArrayList$SubList.iterator(ArrayList.java:<span class="number">1095</span>)</span><br><span class="line">at java.util.AbstractCollection.toString(AbstractCollection.java:<span class="number">454</span>)</span><br><span class="line">at java.lang.String.valueOf(String.java:<span class="number">2994</span>)</span><br><span class="line">at java.lang.StringBuilder.append(StringBuilder.java:<span class="number">131</span>)</span><br><span class="line">at cc.kevinlu.sublist.SubListTest.main(SubListTest.java:<span class="number">31</span>)</span><br></pre></td></tr></table></figure><p>哦吼~！竟然报错了，我们可以看到是在<code>ArrayList$SubList.checkForComodificatio</code>方法中报的错，我们来看一下这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 比较原列表修改次数和SubList的修改次数是否相等</span></span><br><span class="line">  <span class="keyword">if</span> (ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里抛出异常，说明这两个数是不相等的，那为什么会不相等呢？我们看SubList的add方法中有同步主、'子’列表的语句<code>this.modCount = parent.modCount;</code>，也就是说我们在修改subList的时候，会同步更新主列表的modCount，以保证主、'子’列表始终是一致的。</p><p>但是我们在修改主List的时候是不会去同步SubList的modCount的，我们输出SubList的实例实际上就是调用<code>iterator</code>方法，最终是调用了SubList的<code>public ListIterator&lt;E&gt; listIterator(final int index)</code>方法，该方法第一句就是调用<code>checkForComodification</code>方法检查modCount，这里自然就会报错咯！</p><h3 id="4-填坑"><a class="markdownIt-Anchor" href="#4-填坑"></a> 4. 填坑</h3><p>既然有坑，就有填坑的办法，不可能一直把坑放在那，是吧。</p><p>如果既想修改subList，又不想影响到原list。那么可以创建一个机遇subList的拷贝:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.创建新的List：</span><br><span class="line">  subList = Lists.newArrayList(subList);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.lambda表达式：</span><br><span class="line">sourceList.stream().skip(fromIndex).limit(size).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><hr><h3 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结"></a> 5. 总结</h3><p>并不是说使用SubList一定不妥，文章开头我们也说的是慎用，所以，根据具体业务进行选择吧。</p><hr><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;双十一了，大家都省了多少钱啊？&lt;/p&gt;
&lt;p&gt;题外话：此处交给大家一个查看商品历史价格的小方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在商品链接的域名后加上三个v就能查看到该商品的历史价格啦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🌰&lt;/p&gt;
&lt;blo
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
