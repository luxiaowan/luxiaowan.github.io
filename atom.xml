<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>串一串</title>
  
  <subtitle>断舍离</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luxiaowan.github.io/"/>
  <updated>2019-12-03T16:12:26.788Z</updated>
  <id>http://luxiaowan.github.io/</id>
  
  <author>
    <name>cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://luxiaowan.github.io/2019/12/02/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://luxiaowan.github.io/2019/12/02/Git常用命令/</id>
    <published>2019-12-02T09:23:00.000Z</published>
    <updated>2019-12-03T16:12:26.788Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/image-20191204000809729.png" alt="image-20191204000809729"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/image-20191204000809729.png&quot; alt=&quot;image-20191204000809729&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Git" scheme="http://luxiaowan.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM之OOM</title>
    <link href="http://luxiaowan.github.io/2019/11/28/Java%E4%B9%8BOOM/"/>
    <id>http://luxiaowan.github.io/2019/11/28/Java之OOM/</id>
    <published>2019-11-28T14:23:00.000Z</published>
    <updated>2019-12-03T16:04:43.133Z</updated>
    
    <content type="html"><![CDATA[<h4 id="javalangstackoverflowerror"><a class="markdownIt-Anchor" href="#javalangstackoverflowerror"></a> java.lang.StackOverflowError</h4><p><code>栈溢出错误</code>，这个错误很容易模拟，且看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> StackOverflowTest().test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> high = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ++high;</span><br><span class="line">    test();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"栈的深度为: "</span> + high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">JVM ARGS: -server -Xmn2m -Xss1m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+DoEscapeAnalysis -XX:+EliminateAllocations -XX:-UseTLAB</span><br></pre></td></tr></table></figure><blockquote><p>释</p></blockquote><p>我们都知道方法的调用是通过入栈和计算出栈来实现的，所以我们在方法递归调用一定次数时，必然会发生栈溢出，栈溢出后，程序自动停止，是一类不可捕获和恢复的Error类型的错误，所以我们在使用递归算法时，应当注意递归的深度，防止出现栈溢出错误导致服务错误</p><h4 id="javalangoutofmemoryerrorjava-heap-space"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrorjava-heap-space"></a> java.lang.OutOfMemoryError:java heap space</h4><p><code>JVM堆空间不足引起的内存溢出错误</code>，这类错误比较常见，此处就不做太多的解释，出现这类错误，你就去看GC日志，看看新生代、老年代、永久代/Metaspace的使用情况，如果是想查看GC的情况，使用如下JVM指令：</p><p><code>-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:./gclog.log</code>，gc的所有信息都会输出到gclog.log文件中</p><blockquote><p>gclog.log</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*JVM信息*</span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(<span class="number">25.161</span>-b12)</span> <span class="keyword">for</span> bsd-amd64 <span class="title">JRE</span> <span class="params">(<span class="number">1.8</span><span class="number">.0</span>_161-b12)</span>, built on Dec 19 2017 16:22:20 by "java_re" with gcc 4.2.1 <span class="params">(Based on Apple Inc. build <span class="number">5658</span>)</span> <span class="params">(LLVM build <span class="number">2336.11</span><span class="number">.00</span>)</span></span></span><br><span class="line"><span class="function">Memory: 4k page, physical 16777216<span class="title">k</span><span class="params">(<span class="number">2991720</span>k free)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">/proc/meminfo:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">*JVM ARGS*</span></span><br><span class="line"><span class="function">CommandLine flags: -XX:+DoEscapeAnalysis -XX:+EliminateAllocations -XX:InitialHeapSize</span>=<span class="number">268435456</span> -XX:MaxHeapSize=<span class="number">4294967296</span> -XX:MaxNewSize=<span class="number">2097152</span> -XX:NewSize=<span class="number">2097152</span> -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:ThreadStackSize=<span class="number">1024</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC -XX:-UseTLAB </span><br><span class="line"></span><br><span class="line">*GC日志信息*</span><br><span class="line"><span class="number">0.125</span>: [GC (Allocation Failure) [PSYoungGen: <span class="number">1023</span>K-&gt;<span class="number">512</span>K(<span class="number">1536</span>K)] <span class="number">1023</span>K-&gt;<span class="number">536</span>K(<span class="number">261632</span>K), <span class="number">0.0010704</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"><span class="number">0.157</span>: [GC (Allocation Failure) [PSYoungGen: <span class="number">1535</span>K-&gt;<span class="number">493</span>K(<span class="number">1536</span>K)] <span class="number">1559</span>K-&gt;<span class="number">847</span>K(<span class="number">261632</span>K), <span class="number">0.0010655</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">...</span><br><span class="line"><span class="number">0.360</span>: [GC (Allocation Failure) [PSYoungGen: <span class="number">1247</span>K-&gt;<span class="number">256</span>K(<span class="number">1536</span>K)] <span class="number">2614</span>K-&gt;<span class="number">1727</span>K(<span class="number">261632</span>K), <span class="number">0.0008285</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"></span><br><span class="line">Heap</span><br><span class="line"> *年轻代*</span><br><span class="line"> PSYoungGen      total <span class="number">1536</span>K, used <span class="number">396</span>K [<span class="number">0x00000007bfe00000</span>, <span class="number">0x00000007c0000000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">1024</span>K, <span class="number">13</span>% used [<span class="number">0x00000007bfe00000</span>,<span class="number">0x00000007bfe23268</span>,<span class="number">0x00000007bff00000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">50</span>% used [<span class="number">0x00000007bff00000</span>,<span class="number">0x00000007bff40000</span>,<span class="number">0x00000007bff80000</span>)</span><br><span class="line">  to   space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bff80000</span>,<span class="number">0x00000007bff80000</span>,<span class="number">0x00000007c0000000</span>)</span><br><span class="line"> *老年代*</span><br><span class="line"> ParOldGen       total <span class="number">260096</span>K, used <span class="number">1471</span>K [<span class="number">0x00000006c0000000</span>, <span class="number">0x00000006cfe00000</span>, <span class="number">0x00000007bfe00000</span>)</span><br><span class="line">  object space <span class="number">260096</span>K, <span class="number">0</span>% used [<span class="number">0x00000006c0000000</span>,<span class="number">0x00000006c016fc00</span>,<span class="number">0x00000006cfe00000</span>)</span><br><span class="line"> *Metaspace空间，jdk8+*</span><br><span class="line"> Metaspace       used <span class="number">3402</span>K, capacity <span class="number">4500</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 368<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> StackOverflowTest().heapSpace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> String(<span class="string">"abc"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  JVM ARGS: -server -Xmn2m -Xss1m -Xms1m -Xmx1m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:-DoEscapeAnalysis -XX:-EliminateAllocations -XX:-UseTLAB</span><br></pre></td></tr></table></figure><h4 id="javalangoutofmemoryerrorgc-overhead-limit-exceeded"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrorgc-overhead-limit-exceeded"></a> java.lang.OutOfMemoryError:GC overhead limit exceeded</h4><p><code>超出了GC开销限制</code>引起的内存溢出，这个错误不是特别常见，Sun 官方对此的定义：超过98%的时间用来做GC并且回收了不到2%的堆内存时会抛出此异常，可以使用参数-XX:-UseGCOverheadLimit 禁用这个检查，但是这个参数解决不了内存问题，只是把错误的信息延后，替换成 java.lang.OutOfMemoryError: Java heap space</p><h4 id="javalangoutofmemoryerrormetaspace"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrormetaspace"></a> java.lang.OutOfMemoryError:Metaspace</h4><p><code>Metaspace内存溢出</code>，Metaspace是jdk8+特有的东西，用来代替之前的PermGen，主要存储class名称、字段、方法、字节码、常量池、JIT优化代码等等，我们可以使用-XX:MetaspaceSize和-XX:MaxMetaspaceSize来指定其大小，一般情况下Metaspace不会发生OOM，Metaspace的使用量与JVM加载的class数量有很大关系：</p><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ClassPool cp = ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;; i++) &#123;</span><br><span class="line">      Class cz = cp.makeClass(<span class="string">"com.example.demo.bean.DemoBean"</span> + i).toClass();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  JVM ARGS: -XX:MetaspaceSize=<span class="number">10</span>m -XX:MaxMetaspaceSize=<span class="number">10</span>m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.598</span>: [GC (Metadata GC Threshold) [PSYoungGen: <span class="number">39345</span>K-&gt;<span class="number">10741</span>K(<span class="number">76288</span>K)] <span class="number">39345</span>K-&gt;<span class="number">15811</span>K(<span class="number">251392</span>K), <span class="number">0.0111319</span> secs] [Times: user=<span class="number">0.05</span> sys=<span class="number">0.01</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="number">0.609</span>: [<span class="function">Full <span class="title">GC</span> <span class="params">(Metadata GC Threshold)</span> [PSYoungGen: 10741K-&gt;0<span class="title">K</span><span class="params">(<span class="number">76288</span>K)</span>] [ParOldGen: 5069K-&gt;15550<span class="title">K</span><span class="params">(<span class="number">139776</span>K)</span>] 15811K-&gt;15550<span class="title">K</span><span class="params">(<span class="number">216064</span>K)</span>, [Metaspace: 9735K-&gt;9735<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0504762 secs] [Times: user</span>=<span class="number">0.29</span> sys=<span class="number">0.01</span>, real=<span class="number">0.05</span> secs] </span><br><span class="line">...</span><br><span class="line"><span class="number">0.754</span>: [GC (Last ditch collection) [PSYoungGen: <span class="number">0</span>K-&gt;<span class="number">0</span>K(<span class="number">82944</span>K)] <span class="number">15477</span>K-&gt;<span class="number">15477</span>K(<span class="number">472064</span>K), <span class="number">0.0008113</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="number">0.755</span>: [<span class="function">Full <span class="title">GC</span> <span class="params">(Last ditch collection)</span> [PSYoungGen: 0K-&gt;0<span class="title">K</span><span class="params">(<span class="number">82944</span>K)</span>] [ParOldGen: 15477K-&gt;15477<span class="title">K</span><span class="params">(<span class="number">607232</span>K)</span>] 15477K-&gt;15477<span class="title">K</span><span class="params">(<span class="number">690176</span>K)</span>, [Metaspace: 9733K-&gt;9733<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0204189 secs] [Times: user</span>=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs] </span><br><span class="line"><span class="number">5341</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Metaspace</span><br><span class="line">at javassist.ClassPool.toClass(ClassPool.java:<span class="number">1170</span>)</span><br><span class="line">at javassist.ClassPool.toClass(ClassPool.java:<span class="number">1113</span>)</span><br><span class="line">at javassist.ClassPool.toClass(ClassPool.java:<span class="number">1071</span>)</span><br><span class="line">at javassist.CtClass.toClass(CtClass.java:<span class="number">1275</span>)</span><br><span class="line">at com.example.demo.jvm.MetaspceOOMTest.main(MetaspceOOMTest.java:<span class="number">13</span>)</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">82944</span>K, used <span class="number">2390</span>K [<span class="number">0x000000076ab00000</span>, <span class="number">0x0000000772c00000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">82432</span>K, <span class="number">2</span>% used [<span class="number">0x000000076ab00000</span>,<span class="number">0x000000076ad55ab0</span>,<span class="number">0x000000076fb80000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x0000000772b80000</span>,<span class="number">0x0000000772b80000</span>,<span class="number">0x0000000772c00000</span>)</span><br><span class="line">  to   space <span class="number">10752</span>K, <span class="number">0</span>% used [<span class="number">0x0000000771700000</span>,<span class="number">0x0000000771700000</span>,<span class="number">0x0000000772180000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">607232</span>K, used <span class="number">15477</span>K [<span class="number">0x00000006c0000000</span>, <span class="number">0x00000006e5100000</span>, <span class="number">0x000000076ab00000</span>)</span><br><span class="line">  object space <span class="number">607232</span>K, <span class="number">2</span>% used [<span class="number">0x00000006c0000000</span>,<span class="number">0x00000006c0f1d4c8</span>,<span class="number">0x00000006e5100000</span>)</span><br><span class="line"> Metaspace       used <span class="number">9770</span>K, capacity <span class="number">10084</span>K, committed <span class="number">10240</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 3165<span class="title">K</span>, <span class="title">capacity</span> 3214<span class="title">K</span>, <span class="title">committed</span> 3328<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure><p>我们将Metaspace的初始大小和最大值都设置为10m，最终<code>i</code>的值大概会在5340左右的时候报OOM，从FGC的日志可以看出，Metaspace在整个GC阶段都未进行任务的内存回收，直至被全部用完，具体的关于Metaspace的介绍可以看下PerfMa社区的这篇文章：<a href="https://club.perfma.com/article/210111" target="_blank" rel="noopener">https://club.perfma.com/article/210111</a></p><h4 id="javalangoutofmemoryerrordirect-buffer-memory"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrordirect-buffer-memory"></a> java.lang.OutOfMemoryError:Direct buffer memory</h4><p>ByteBuffer. allocateDirect (int capability)是分配操作系统的本地内存，不在GC管辖范围之内，由于不需要内存拷贝所以速度相对较快，但如果不断分配本地内存，堆内存就会很少使用，那么JVM就不需要进行GC，那创建的DirectByteBuffer对象就不会被回收，就会出现堆内存充足但本地内存不足的情况，继续尝试分配本地内存就会出现OOM。</p><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"当前direct大小: "</span> + (VM.maxDirectMemory() / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">" MB"</span>);</span><br><span class="line">  ByteBuffer bb = ByteBuffer.allocateDirect(Math.toIntExact(VM.maxDirectMemory() + <span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  JVM ARGS: -XX:MaxDirectMemorySize=<span class="number">10</span>m</span><br></pre></td></tr></table></figure><p>这里我们需要通过JVM参数<code>-XX:MaxDirectMemorySize=10</code>将JVM本地最大使用内存设置为10MB，不然如果你本地剩余内存很大，那么就很难模拟出此错误</p><blockquote><p>输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前direct大小: <span class="number">10</span> MB</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Direct buffer memory</span><br><span class="line">at java.nio.Bits.reserveMemory(Bits.java:<span class="number">694</span>)</span><br><span class="line">at java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:<span class="number">123</span>)</span><br><span class="line">at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:<span class="number">311</span>)</span><br><span class="line">at com.example.demo.jvm.DirectBufferOOMTest.main(DirectBufferOOMTest.java:<span class="number">11</span>)</span><br></pre></td></tr></table></figure><h4 id="javalangoutofmemoryerrorunable-create-new-native-thread"><a class="markdownIt-Anchor" href="#javalangoutofmemoryerrorunable-create-new-native-thread"></a> java.lang.OutOfMemoryError:unable create new native thread</h4><p>线程创建的太多，导致无法继续创建线程，出现这个问题就要去使用<code>jstack</code>导出线程栈查看具体情况</p><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段代码必然会出现该ERROR，不论你的机器有多牛掰，你会发现出现了OOM之后，进程并未终止，这个时候你可以用<code>jps</code>命令查看进程号，然后使用<code>jstack pid</code>查看线程栈，会发现有非常多的线程处于<code>TIMED_WAITING (sleeping)</code>状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"Thread-256" #267 prio=5 os_prio=31 tid=0x00007fccdd8cc000 nid=0x27d03 waiting on condition [0x0000700019b85000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at com.example.demo.jvm.NativeThreadOOMTest$<span class="number">1</span>.run(NativeThreadOOMTest.java:<span class="number">11</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;javalangstackoverflowerror&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javalangstackoverflowerror&quot;&gt;&lt;/a&gt; java.lang.StackOverflowError&lt;/h4&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot官方配置文档(英文版)</title>
    <link href="http://luxiaowan.github.io/2019/11/23/SpringBoot%E5%AE%98%E6%96%B9%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3(%E8%8B%B1%E6%96%87%E7%89%88)/"/>
    <id>http://luxiaowan.github.io/2019/11/23/SpringBoot官方配置文档(英文版)/</id>
    <published>2019-11-22T17:13:00.000Z</published>
    <updated>2019-11-25T17:18:31.849Z</updated>
    
    <content type="html"><![CDATA[<h4 id="banner"><a class="markdownIt-Anchor" href="#banner"></a> BANNER</h4><p>banner.charset=UTF-8 # Banner file encoding.<br>banner.location=classpath:banner.txt # Banner file location.<br>banner.image.location=classpath:banner.gif # Banner image file location (jpg/png can also be used).<br>banner.image.width= # Width of the banner image in chars (default 76)<br>banner.image.height= # Height of the banner image in chars (default based on image height)<br>banner.image.margin= # Left hand image margin in chars (default 2)<br>banner.image.invert= # If images should be inverted for dark terminal themes (default false)</p><h4 id="logging"><a class="markdownIt-Anchor" href="#logging"></a> LOGGING</h4><p>logging.config= # Location of the logging configuration file. For instance <code>classpath:logback.xml</code> for Logback<br>logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.<br>logging.file= # Log file name. For instance <code>myapp.log</code><br>logging.level.*= # Log levels severity mapping. For instance <code>logging.level.org.springframework=DEBUG</code><br>logging.path= # Location of the log file. For instance <code>/var/log</code><br>logging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.<br>logging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.<br>logging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.<br>logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.</p><h4 id="aop"><a class="markdownIt-Anchor" href="#aop"></a> AOP</h4><p>spring.aop.auto=true # Add @EnableAspectJAutoProxy.<br>spring.aop.proxy-target-class=true # Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).</p><h4 id="identity-contextidapplicationcontextinitializer"><a class="markdownIt-Anchor" href="#identity-contextidapplicationcontextinitializer"></a> IDENTITY (ContextIdApplicationContextInitializer)</h4><p>spring.application.index= # Application index.<br>spring.application.name= # Application name.</p><h4 id="admin-springapplicationadminjmxautoconfiguration"><a class="markdownIt-Anchor" href="#admin-springapplicationadminjmxautoconfiguration"></a> ADMIN (SpringApplicationAdminJmxAutoConfiguration)</h4><p>spring.application.admin.enabled=false # Enable admin features for the application.<br>spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.</p><h4 id="auto-configuration"><a class="markdownIt-Anchor" href="#auto-configuration"></a> AUTO-CONFIGURATION</h4><p>spring.autoconfigure.exclude= # Auto-configuration classes to exclude.</p><h4 id="spring-core"><a class="markdownIt-Anchor" href="#spring-core"></a> SPRING CORE</h4><p>spring.beaninfo.ignore=true # Skip search of BeanInfo classes.</p><h4 id="spring-cache-cacheproperties"><a class="markdownIt-Anchor" href="#spring-cache-cacheproperties"></a> SPRING CACHE (CacheProperties)</h4><p>spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.<br>spring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for more details on the spec format.<br>spring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the entries never expire.<br>spring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.<br>spring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.<br>spring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.<br>spring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.<br>spring.cache.type= # Cache type, auto-detected according to the environment by default.</p><h4 id="spring-config-using-environment-property-only-configfileapplicationlistener"><a class="markdownIt-Anchor" href="#spring-config-using-environment-property-only-configfileapplicationlistener"></a> SPRING CONFIG - using environment property only (ConfigFileApplicationListener)</h4><p>spring.config.location= # Config file locations.<br>spring.config.name=application # Config file name.</p><h4 id="hazelcast-hazelcastproperties"><a class="markdownIt-Anchor" href="#hazelcast-hazelcastproperties"></a> HAZELCAST (HazelcastProperties)</h4><p>spring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</p><h4 id="project-information-projectinfoproperties"><a class="markdownIt-Anchor" href="#project-information-projectinfoproperties"></a> PROJECT INFORMATION (ProjectInfoProperties)</h4><p>spring.info.build.location=classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.<br>spring.info.git.location=classpath:git.properties # Location of the generated git.properties file.</p><h4 id="jmx"><a class="markdownIt-Anchor" href="#jmx"></a> JMX</h4><p>spring.jmx.default-domain= # JMX domain name.<br>spring.jmx.enabled=true # Expose management beans to the JMX domain.<br>spring.jmx.server=mbeanServer # MBeanServer bean name.</p><h4 id="email-mailproperties"><a class="markdownIt-Anchor" href="#email-mailproperties"></a> Email (MailProperties)</h4><p>spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.<br>spring.mail.host= # SMTP server host. For instance <code>smtp.example.com</code><br>spring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.<br>spring.mail.password= # Login password of the SMTP server.<br>spring.mail.port= # SMTP server port.<br>spring.mail.properties.*= # Additional JavaMail session properties.<br>spring.mail.protocol=smtp # Protocol used by the SMTP server.<br>spring.mail.test-connection=false # Test that the mail server is available on startup.<br>spring.mail.username= # Login user of the SMTP server.</p><h4 id="application-settings-springapplication"><a class="markdownIt-Anchor" href="#application-settings-springapplication"></a> APPLICATION SETTINGS (SpringApplication)</h4><p>spring.main.banner-mode=console # Mode used to display the banner when the application runs.<br>spring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.<br>spring.main.web-application-type= # Flag to explicitly request a specific type of web application. Auto-detected based on the classpath if not set.</p><h4 id="file-encoding-fileencodingapplicationlistener"><a class="markdownIt-Anchor" href="#file-encoding-fileencodingapplicationlistener"></a> FILE ENCODING (FileEncodingApplicationListener)</h4><p>spring.mandatory-file-encoding= # Expected character encoding the application must use.</p><h4 id="internationalization-messagesourceautoconfiguration"><a class="markdownIt-Anchor" href="#internationalization-messagesourceautoconfiguration"></a> INTERNATIONALIZATION (MessageSourceAutoConfiguration)</h4><p>spring.messages.always-use-message-format=false # Set whether to always apply the MessageFormat rules, parsing even messages without arguments.<br>spring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.<br>spring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.<br>spring.messages.encoding=UTF-8 # Message bundles encoding.<br>spring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.</p><h4 id="output"><a class="markdownIt-Anchor" href="#output"></a> OUTPUT</h4><p>spring.output.ansi.enabled=detect # Configure the ANSI output.</p><h4 id="pid-file-applicationpidfilewriter"><a class="markdownIt-Anchor" href="#pid-file-applicationpidfilewriter"></a> PID FILE (ApplicationPidFileWriter)</h4><p>spring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.<br>spring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).</p><h4 id="profiles"><a class="markdownIt-Anchor" href="#profiles"></a> PROFILES</h4><p>spring.profiles.active= # Comma-separated list (or list if using YAML) of active profiles.<br>spring.profiles.include= # Unconditionally activate the specified comma separated profiles (or list of profiles if using YAML).</p><h4 id="reactor"><a class="markdownIt-Anchor" href="#reactor"></a> Reactor</h4><p>spring.reactor.stacktrace-mode.enabled=false # Set whether Reactor should collect stacktrace information at runtime.</p><h4 id="sendgrid-sendgridautoconfiguration"><a class="markdownIt-Anchor" href="#sendgrid-sendgridautoconfiguration"></a> SENDGRID (SendGridAutoConfiguration)</h4><p>spring.sendgrid.api-key= # SendGrid api key (alternative to username/password)<br>spring.sendgrid.proxy.host= # SendGrid proxy host<br>spring.sendgrid.proxy.port= # SendGrid proxy port</p><h4 id="embedded-server-configuration-serverproperties"><a class="markdownIt-Anchor" href="#embedded-server-configuration-serverproperties"></a> EMBEDDED SERVER CONFIGURATION (ServerProperties)</h4><p>server.address= # Network address to which the server should bind to.<br>server.compression.enabled=false # If response compression is enabled.<br>server.compression.excluded-user-agents= # List of user-agents to exclude from compression.<br>server.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance <code>text/html,text/css,application/json</code><br>server.compression.min-response-size= # Minimum response size that is required for compression to be performed. For instance 2048<br>server.connection-timeout= # Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector’s container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.<br>server.display-name=application # Display name of the application.<br>server.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.<br>server.error.include-exception=false # Include the “exception” attribute.<br>server.error.include-stacktrace=never # When to include a “stacktrace” attribute.<br>server.error.path=/error # Path of the error controller.<br>server.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.<br>server.jetty.acceptors= # Number of acceptor threads to use.<br>server.jetty.accesslog.append=false # Append to log.<br>server.jetty.accesslog.date-format=dd/MMM/yyyy:HH:mm:ss Z # Timestamp format of the request log.<br>server.jetty.accesslog.enabled=false # Enable access log.<br>server.jetty.accesslog.extended-format=false # Enable extended NCSA format.<br>server.jetty.accesslog.file-date-format= # Date format to place in log file name.<br>server.jetty.accesslog.filename= # Log filename. If not specified, logs will be redirected to “System.err”.<br>server.jetty.accesslog.locale= # Locale of the request log.<br>server.jetty.accesslog.log-cookies=false # Enable logging of the request cookies.<br>server.jetty.accesslog.log-latency=false # Enable logging of request processing time.<br>server.jetty.accesslog.log-server=false # Enable logging of the request hostname.<br>server.jetty.accesslog.retention-period=31 # Number of days before rotated log files are deleted.<br>server.jetty.accesslog.time-zone=GMT # Timezone of the request log.<br>server.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post or put content.<br>server.jetty.selectors= # Number of selector threads to use.<br>server.port=8080 # Server HTTP port.<br>server.server-header= # Value to use for the Server response header (no header is sent if empty)<br>server.use-forward-headers= # If X-Forwarded-* headers should be applied to the HttpRequest.<br>server.servlet.context-parameters.<em>= # Servlet context init parameters<br>server.servlet.context-path= # Context path of the application.<br>server.servlet.jsp.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.<br>server.servlet.jsp.init-parameters.</em>= # Init parameters used to configure the JSP servlet<br>server.servlet.jsp.registered=true # Whether or not the JSP servlet is registered<br>server.servlet.path=/ # Path of the main dispatcher servlet.<br>server.session.cookie.comment= # Comment for the session cookie.<br>server.session.cookie.domain= # Domain for the session cookie.<br>server.session.cookie.http-only= # “HttpOnly” flag for the session cookie.<br>server.session.cookie.max-age= # Maximum age of the session cookie in seconds.<br>server.session.cookie.name= # Session cookie name.<br>server.session.cookie.path= # Path of the session cookie.<br>server.session.cookie.secure= # “Secure” flag for the session cookie.<br>server.session.persistent=false # Persist session data between restarts.<br>server.session.store-dir= # Directory used to store session data.<br>server.session.timeout= # Session timeout in seconds.<br>server.session.tracking-modes= # Session tracking modes (one or more of the following: “cookie”, “url”, “ssl”).<br>server.ssl.ciphers= # Supported SSL ciphers.<br>server.ssl.client-auth= # Whether client authentication is wanted (“want”) or needed (“need”). Requires a trust store.<br>server.ssl.enabled= # Enable SSL support.<br>server.ssl.enabled-protocols= # Enabled SSL protocols.<br>server.ssl.key-alias= # Alias that identifies the key in the key store.<br>server.ssl.key-password= # Password used to access the key in the key store.<br>server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).<br>server.ssl.key-store-password= # Password used to access the key store.<br>server.ssl.key-store-provider= # Provider for the key store.<br>server.ssl.key-store-type= # Type of the key store.<br>server.ssl.protocol=TLS # SSL protocol to use.<br>server.ssl.trust-store= # Trust store that holds SSL certificates.<br>server.ssl.trust-store-password= # Password used to access the trust store.<br>server.ssl.trust-store-provider= # Provider for the trust store.<br>server.ssl.trust-store-type= # Type of the trust store.<br>server.tomcat.accept-count= # Maximum queue length for incoming connection requests when all possible request processing threads are in use.<br>server.tomcat.accesslog.buffered=true # Buffer output such that it is only flushed periodically.<br>server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.<br>server.tomcat.accesslog.enabled=false # Enable access log.<br>server.tomcat.accesslog.file-date-format=.yyyy-MM-dd # Date format to place in log file name.<br>server.tomcat.accesslog.pattern=common # Format pattern for access logs.<br>server.tomcat.accesslog.prefix=access_log # Log file name prefix.<br>server.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in the file name until rotate time.<br>server.tomcat.accesslog.request-attributes-enabled=false # Set request attributes for IP address, Hostname, protocol and port used for the request.<br>server.tomcat.accesslog.rotate=true # Enable access log rotation.<br>server.tomcat.accesslog.suffix=.log # Log file name suffix.<br>server.tomcat.additional-tld-skip-patterns= # Comma-separated list of additional patterns that match jars to ignore for TLD scanning.<br>server.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of backgroundProcess methods.<br>server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.<br>server.tomcat.internal-proxies=10\.\d{1,3}\.\d{1,3}\.\d{1,3}|\<br>192\.168\.\d{1,3}\.\d{1,3}|\<br>169\.254\.\d{1,3}\.\d{1,3}|\<br>127\.\d{1,3}\.\d{1,3}\.\d{1,3}|\<br>172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|\<br>172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|\<br>172\.3[0-1]{1}\.\d{1,3}\.\d{1,3} # regular expression matching trusted IP addresses.<br>server.tomcat.max-connections= # Maximum number of connections that the server will accept and process at any given time.<br>server.tomcat.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.<br>server.tomcat.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.<br>server.tomcat.max-threads=0 # Maximum amount of worker threads.<br>server.tomcat.min-spare-threads=0 # Minimum amount of worker threads.<br>server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.<br>server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named “X-Forwarded-Proto”.<br>server.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.<br>server.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by appending a / to the path.<br>server.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance <code>X-FORWARDED-FOR</code><br>server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.<br>server.undertow.accesslog.dir= # Undertow access log directory.<br>server.undertow.accesslog.enabled=false # Enable access log.<br>server.undertow.accesslog.pattern=common # Format pattern for access logs.<br>server.undertow.accesslog.prefix=access_log. # Log file name prefix.<br>server.undertow.accesslog.rotate=true # Enable access log rotation.<br>server.undertow.accesslog.suffix=log # Log file name suffix.<br>server.undertow.buffer-size= # Size of each buffer in bytes.<br>server.undertow.direct-buffers= # Allocate buffers outside the Java heap.<br>server.undertow.io-threads= # Number of I/O threads to create for the worker.<br>server.undertow.eager-filter-init=true # Whether servlet filters should be initialized on startup.<br>server.undertow.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.<br>server.undertow.worker-threads= # Number of worker threads.</p><h4 id="freemarker-freemarkerautoconfiguration"><a class="markdownIt-Anchor" href="#freemarker-freemarkerautoconfiguration"></a> FREEMARKER (FreeMarkerAutoConfiguration)</h4><p>spring.freemarker.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.freemarker.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.freemarker.cache=false # Enable template caching.<br>spring.freemarker.charset=UTF-8 # Template encoding.<br>spring.freemarker.check-template-location=true # Check that the templates location exists.<br>spring.freemarker.content-type=text/html # Content-Type value.<br>spring.freemarker.enabled=true # Enable MVC view resolution for this technology.<br>spring.freemarker.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.<br>spring.freemarker.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.<br>spring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring’s macro library, under the name “springMacroRequestContext”.<br>spring.freemarker.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.<br>spring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.<br>spring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.<br>spring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker’s Configuration.<br>spring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.<br>spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.<br>spring.freemarker.view-names= # White list of view names that can be resolved.</p><h4 id="groovy-templates-groovytemplateautoconfiguration"><a class="markdownIt-Anchor" href="#groovy-templates-groovytemplateautoconfiguration"></a> GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</h4><p>spring.groovy.template.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.groovy.template.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.groovy.template.cache= # Enable template caching.<br>spring.groovy.template.charset=UTF-8 # Template encoding.<br>spring.groovy.template.check-template-location=true # Check that the templates location exists.<br>spring.groovy.template.configuration.*= # See GroovyMarkupConfigurer<br>spring.groovy.template.content-type=test/html # Content-Type value.<br>spring.groovy.template.enabled=true # Enable MVC view resolution for this technology.<br>spring.groovy.template.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.<br>spring.groovy.template.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.<br>spring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring’s macro library, under the name “springMacroRequestContext”.<br>spring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.<br>spring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.<br>spring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.<br>spring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.<br>spring.groovy.template.view-names= # White list of view names that can be resolved.</p><h4 id="spring-hateoas-hateoasproperties"><a class="markdownIt-Anchor" href="#spring-hateoas-hateoasproperties"></a> SPRING HATEOAS (HateoasProperties)</h4><p>spring.hateoas.use-hal-as-default-json-media-type=true # Specify if application/hal+json responses should be sent to requests that accept application/json.</p><h4 id="http-message-conversion"><a class="markdownIt-Anchor" href="#http-message-conversion"></a> HTTP message conversion</h4><p>spring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to “gson” to force the use of Gson when both it and Jackson are on the classpath.</p><h4 id="http-encoding-httpencodingproperties"><a class="markdownIt-Anchor" href="#http-encoding-httpencodingproperties"></a> HTTP encoding (HttpEncodingProperties)</h4><p>spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the “Content-Type” header if not set explicitly.<br>spring.http.encoding.enabled=true # Enable http encoding support.<br>spring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.<br>spring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when “force” has not been specified.<br>spring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.<br>spring.http.encoding.mapping= # Locale to Encoding mapping.</p><h4 id="multipart-multipartproperties"><a class="markdownIt-Anchor" href="#multipart-multipartproperties"></a> MULTIPART (MultipartProperties)</h4><p>spring.servlet.multipart.enabled=true # Enable support of multipart uploads.<br>spring.servlet.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixes “MB” or “KB” to indicate megabytes or kilobytes respectively.<br>spring.servlet.multipart.location= # Intermediate location of uploaded files.<br>spring.servlet.multipart.max-file-size=1MB # Max file size. Values can use the suffixes “MB” or “KB” to indicate megabytes or kilobytes respectively.<br>spring.servlet.multipart.max-request-size=10MB # Max request size. Values can use the suffixes “MB” or “KB” to indicate megabytes or kilobytes respectively.<br>spring.servlet.multipart.resolve-lazily=false # Whether to resolve the multipart request lazily at the time of file or parameter access.</p><h4 id="jackson-jacksonproperties"><a class="markdownIt-Anchor" href="#jackson-jacksonproperties"></a> JACKSON (JacksonProperties)</h4><p>spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance <code>yyyy-MM-dd HH:mm:ss</code>.<br>spring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization.<br>spring.jackson.deserialization.<em>= # Jackson on/off features that affect the way Java objects are deserialized.<br>spring.jackson.generator.</em>= # Jackson on/off features for generators.<br>spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, “date-format” will be used as a fallback if it is configured with a format string.<br>spring.jackson.locale= # Locale used for formatting.<br>spring.jackson.mapper.<em>= # Jackson general purpose on/off features.<br>spring.jackson.parser.</em>= # Jackson on/off features for parsers.<br>spring.jackson.property-naming-strategy= # One of the constants on Jackson’s PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.<br>spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.<br>spring.jackson.time-zone= # Time zone used when formatting dates. For instance <code>America/Los_Angeles</code></p><h4 id="jersey-jerseyproperties"><a class="markdownIt-Anchor" href="#jersey-jerseyproperties"></a> JERSEY (JerseyProperties)</h4><p>spring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of “@ApplicationPath” if specified.<br>spring.jersey.filter.order=0 # Jersey filter chain order.<br>spring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.<br>spring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey servlet.<br>spring.jersey.type=servlet # Jersey integration type.</p><h4 id="spring-ldap-ldapproperties"><a class="markdownIt-Anchor" href="#spring-ldap-ldapproperties"></a> SPRING LDAP (LdapProperties)</h4><p>spring.ldap.urls= # LDAP URLs of the server.<br>spring.ldap.base= # Base suffix from which all operations should originate.<br>spring.ldap.username= # Login user of the server.<br>spring.ldap.password= # Login password of the server.<br>spring.ldap.base-environment.*= # LDAP specification settings.</p><h4 id="embedded-ldap-embeddedldapproperties"><a class="markdownIt-Anchor" href="#embedded-ldap-embeddedldapproperties"></a> EMBEDDED LDAP (EmbeddedLdapProperties)</h4><p>spring.ldap.embedded.base-dn= # The base DN<br>spring.ldap.embedded.credential.username= # Embedded LDAP username.<br>spring.ldap.embedded.credential.password= # Embedded LDAP password.<br>spring.ldap.embedded.ldif=classpath:schema.ldif # Schema (LDIF) script resource reference.<br>spring.ldap.embedded.port= # Embedded LDAP port.<br>spring.ldap.embedded.validation.enabled=true # Enable LDAP schema validation.<br>spring.ldap.embedded.validation.schema= # Path to the custom schema.</p><h4 id="spring-mobile-device-views-devicedelegatingviewresolverautoconfiguration"><a class="markdownIt-Anchor" href="#spring-mobile-device-views-devicedelegatingviewresolverautoconfiguration"></a> SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</h4><p>spring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for fallback resolution.<br>spring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view resolver.<br>spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.<br>spring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.<br>spring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.<br>spring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.<br>spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.<br>spring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.</p><h4 id="spring-mobile-site-preference-sitepreferenceautoconfiguration"><a class="markdownIt-Anchor" href="#spring-mobile-site-preference-sitepreferenceautoconfiguration"></a> SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</h4><p>spring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.</p><h4 id="mustache-templates-mustacheautoconfiguration"><a class="markdownIt-Anchor" href="#mustache-templates-mustacheautoconfiguration"></a> MUSTACHE TEMPLATES (MustacheAutoConfiguration)</h4><p>spring.mustache.allow-request-override= # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.mustache.allow-session-override= # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.<br>spring.mustache.cache= # Enable template caching.<br>spring.mustache.charset= # Template encoding.<br>spring.mustache.check-template-location= # Check that the templates location exists.<br>spring.mustache.content-type= # Content-Type value.<br>spring.mustache.enabled= # Enable MVC view resolution for this technology.<br>spring.mustache.expose-request-attributes= # Set whether all request attributes should be added to the model prior to merging with the template.<br>spring.mustache.expose-session-attributes= # Set whether all HttpSession attributes should be added to the model prior to merging with the template.<br>spring.mustache.expose-spring-macro-helpers= # Set whether to expose a RequestContext for use by Spring’s macro library, under the name “springMacroRequestContext”.<br>spring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.<br>spring.mustache.request-context-attribute= # Name of the RequestContext attribute for all views.<br>spring.mustache.suffix=.mustache # Suffix to apply to template names.<br>spring.mustache.view-names= # White list of view names that can be resolved.</p><h4 id="spring-mvc-webmvcproperties"><a class="markdownIt-Anchor" href="#spring-mvc-webmvcproperties"></a> SPRING MVC (WebMvcProperties)</h4><p>spring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.<br>spring.mvc.date-format= # Date format to use. For instance <code>dd/MM/yyyy</code>.<br>spring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.<br>spring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to the FrameworkServlet doService method.<br>spring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.<br>spring.mvc.formcontent.putfilter.enabled=true # Enable Spring’s HttpPutFormContentFilter.<br>spring.mvc.ignore-default-model-on-redirect=true # If the content of the “default” model should be ignored during redirect scenarios.<br>spring.mvc.locale= # Locale to use. By default, this locale is overridden by the “Accept-Language” header.<br>spring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.<br>spring.mvc.log-resolved-exception=false # Enable warn logging of exceptions resolved by a “HandlerExceptionResolver”.<br>spring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.<br>spring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance <code>PREFIX_ERROR_CODE</code>.<br>spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.<br>spring.mvc.static-path-pattern=/** # Path pattern used for static resources.<br>spring.mvc.throw-exception-if-no-handler-found=false # If a “NoHandlerFoundException” should be thrown if no Handler was found to process a request.<br>spring.mvc.view.prefix= # Spring MVC view prefix.<br>spring.mvc.view.suffix= # Spring MVC view suffix.</p><h4 id="spring-resources-handling-resourceproperties"><a class="markdownIt-Anchor" href="#spring-resources-handling-resourceproperties"></a> SPRING RESOURCES HANDLING (ResourceProperties)</h4><p>spring.resources.add-mappings=true # Enable default resource handling.<br>spring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.<br>spring.resources.chain.cache=true # Enable caching in the Resource chain.<br>spring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.<br>spring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.<br>spring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.<br>spring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.<br>spring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.<br>spring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.<br>spring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.<br>spring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.<br>spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.</p><h4 id="spring-session-sessionproperties"><a class="markdownIt-Anchor" href="#spring-session-sessionproperties"></a> SPRING SESSION (SessionProperties)</h4><p>spring.session.hazelcast.flush-mode=on-save # Sessions flush mode.<br>spring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.<br>spring.session.jdbc.initializer.enabled= # Create the required session tables on startup if necessary. Enabled automatically if the default table name is set or a custom schema is configured.<br>spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.<br>spring.session.jdbc.table-name=SPRING_SESSION # Name of database table used to store sessions.<br>spring.session.redis.flush-mode=on-save # Sessions flush mode.<br>spring.session.redis.namespace= # Namespace for keys used to store sessions.<br>spring.session.store-type= # Session store type.</p><h4 id="spring-social-socialwebautoconfiguration"><a class="markdownIt-Anchor" href="#spring-social-socialwebautoconfiguration"></a> SPRING SOCIAL (SocialWebAutoConfiguration)</h4><p>spring.social.auto-connection-views=false # Enable the connection status view for supported providers.</p><h4 id="spring-social-facebook-facebookautoconfiguration"><a class="markdownIt-Anchor" href="#spring-social-facebook-facebookautoconfiguration"></a> SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</h4><p>spring.social.facebook.app-id= # your application’s Facebook App ID<br>spring.social.facebook.app-secret= # your application’s Facebook App Secret</p><h4 id="spring-social-linkedin-linkedinautoconfiguration"><a class="markdownIt-Anchor" href="#spring-social-linkedin-linkedinautoconfiguration"></a> SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</h4><p>spring.social.linkedin.app-id= # your application’s LinkedIn App ID<br>spring.social.linkedin.app-secret= # your application’s LinkedIn App Secret</p><h4 id="spring-social-twitter-twitterautoconfiguration"><a class="markdownIt-Anchor" href="#spring-social-twitter-twitterautoconfiguration"></a> SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</h4><p>spring.social.twitter.app-id= # your application’s Twitter App ID<br>spring.social.twitter.app-secret= # your application’s Twitter App Secret</p><h1 id="thymeleaf-thymeleafautoconfiguration"><a class="markdownIt-Anchor" href="#thymeleaf-thymeleafautoconfiguration"></a> THYMELEAF (ThymeleafAutoConfiguration)</h1><p>spring.thymeleaf.cache=true # Enable template caching.<br>spring.thymeleaf.check-template=true # Check that the template exists before rendering it.<br>spring.thymeleaf.check-template-location=true # Check that the templates location exists.<br>spring.thymeleaf.enabled=true # Enable Thymeleaf view resolution for Web frameworks.<br>spring.thymeleaf.encoding=UTF-8 # Template files encoding.<br>spring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.<br>spring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.<br>spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.<br>spring.thymeleaf.reactive.max-chunk-size= # Maximum size of data buffers used for writing to the response, in bytes.<br>spring.thymeleaf.reactive.media-types= # Media types supported by the view technology.<br>spring.thymeleaf.servlet.content-type=text/html # Content-Type value written to HTTP responses.<br>spring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.<br>spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.<br>spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.</p><h4 id="spring-web-flux-webfluxproperties"><a class="markdownIt-Anchor" href="#spring-web-flux-webfluxproperties"></a> SPRING WEB FLUX (WebFluxProperties)</h4><p>spring.webflux.static-path-pattern=/** # Path pattern used for static resources.</p><h4 id="spring-web-services-webservicesproperties"><a class="markdownIt-Anchor" href="#spring-web-services-webservicesproperties"></a> SPRING WEB SERVICES (WebServicesProperties)</h4><p>spring.webservices.path=/services # Path that serves as the base URI for the services.<br>spring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web Services.<br>spring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</p><h4 id="security-securityproperties"><a class="markdownIt-Anchor" href="#security-securityproperties"></a> SECURITY (SecurityProperties)</h4><p>security.basic.authorize-mode=role # Security authorize mode to apply.<br>security.basic.enabled=true # Enable basic authentication.<br>security.basic.path=/** # Comma-separated list of paths to secure.<br>security.basic.realm=Spring # HTTP basic realm name.<br>security.enable-csrf=false # Enable Cross Site Request Forgery support.<br>security.filter-order=0 # Security filter chain order.<br>security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.<br>security.headers.cache=true # Enable cache control HTTP headers.<br>security.headers.content-security-policy= # Value for content security policy header.<br>security.headers.content-security-policy-mode=default # Content security policy mode.<br>security.headers.content-type=true # Enable “X-Content-Type-Options” header.<br>security.headers.frame=true # Enable “X-Frame-Options” header.<br>security.headers.hsts=all # HTTP Strict Transport Security (HSTS) mode (none, domain, all).<br>security.headers.xss=true # Enable cross site scripting (XSS) protection.<br>security.ignored= # Comma-separated list of paths to exclude from the default secured paths.<br>security.require-ssl=false # Enable secure channel for all requests.<br>security.sessions=stateless # Session creation policy (always, never, if_required, stateless).<br>security.user.name=user # Default user name.<br>security.user.password= # Password for the default user name. A random password is logged on startup by default.<br>security.user.role=USER # Granted roles for the default user name.</p><h4 id="security-oauth2-client-oauth2clientproperties"><a class="markdownIt-Anchor" href="#security-oauth2-client-oauth2clientproperties"></a> SECURITY OAUTH2 CLIENT (OAuth2ClientProperties)</h4><p>security.oauth2.client.client-id= # OAuth2 client id.<br>security.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default</p><h4 id="security-oauth2-resources-resourceserverproperties"><a class="markdownIt-Anchor" href="#security-oauth2-resources-resourceserverproperties"></a> SECURITY OAUTH2 RESOURCES (ResourceServerProperties)</h4><p>security.oauth2.resource.filter-order= # The order of the filter chain used to authenticate tokens.<br>security.oauth2.resource.id= # Identifier of the resource.<br>security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.<br>security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.<br>security.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.<br>security.oauth2.resource.service-id=resource #<br>security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.<br>security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.<br>security.oauth2.resource.user-info-uri= # URI of the user endpoint.</p><h4 id="security-oauth2-sso-oauth2ssoproperties"><a class="markdownIt-Anchor" href="#security-oauth2-sso-oauth2ssoproperties"></a> SECURITY OAUTH2 SSO (OAuth2SsoProperties)</h4><p>security.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter<br>security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server</p><h4 id="flyway-flywayproperties"><a class="markdownIt-Anchor" href="#flyway-flywayproperties"></a> FLYWAY (FlywayProperties)</h4><p>flyway.allow-mixed-migrations= #<br>flyway.baseline-description= #<br>flyway.baseline-on-migrate= #<br>flyway.baseline-version=1 # version to start migration<br>flyway.check-location=false # Check that migration scripts location exists.<br>flyway.clean-disabled= #<br>flyway.clean-on-validation-error= #<br>flyway.enabled=true # Enable flyway.<br>flyway.encoding= #<br>flyway.ignore-failed-future-migration= #<br>flyway.ignore-future-migrations= #<br>flyway.ignore-missing-migrations= #<br>flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.<br>flyway.installed-by= #<br>flyway.locations=classpath:db/migration # locations of migrations scripts<br>flyway.out-of-order= #<br>flyway.password= # JDBC password if you want Flyway to create its own DataSource<br>flyway.placeholder-prefix= #<br>flyway.placeholder-replacement= #<br>flyway.placeholder-suffix= #<br>flyway.placeholders.*= #<br>flyway.repeatable-sql-migration-prefix= #<br>flyway.schemas= # schemas to update<br>flyway.skip-default-callbacks= #<br>flyway.skip-default-resolvers= #<br>flyway.sql-migration-prefix=V #<br>flyway.sql-migration-separator= #<br>flyway.sql-migration-suffix=.sql #<br>flyway.table= #<br>flyway.target= #<br>flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.<br>flyway.user= # Login user of the database to migrate.<br>flyway.validate-on-migrate= #</p><h4 id="liquibase-liquibaseproperties"><a class="markdownIt-Anchor" href="#liquibase-liquibaseproperties"></a> LIQUIBASE (LiquibaseProperties)</h4><p>liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.<br>liquibase.check-change-log-location=true # Check the change log location exists.<br>liquibase.contexts= # Comma-separated list of runtime contexts to use.<br>liquibase.default-schema= # Default database schema.<br>liquibase.drop-first=false # Drop the database schema first.<br>liquibase.enabled=true # Enable liquibase support.<br>liquibase.labels= # Comma-separated list of runtime labels to use.<br>liquibase.parameters.*= # Change log parameters.<br>liquibase.password= # Login password of the database to migrate.<br>liquibase.rollback-file= # File to which rollback SQL will be written when an update is performed.<br>liquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.<br>liquibase.user= # Login user of the database to migrate.</p><h4 id="couchbase-couchbaseproperties"><a class="markdownIt-Anchor" href="#couchbase-couchbaseproperties"></a> COUCHBASE (CouchbaseProperties)</h4><p>spring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap from.<br>spring.couchbase.bucket.name=default # Name of the bucket to connect to.<br>spring.couchbase.bucket.password=  # Password of the bucket.<br>spring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the Key/value service.<br>spring.couchbase.env.endpoints.query=1 # Number of sockets per node against the Query (N1QL) service.<br>spring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view service.<br>spring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automatically if a “keyStore” is provided unless specified otherwise.<br>spring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the certificates.<br>spring.couchbase.env.ssl.key-store-password= # Password used to access the key store.<br>spring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout in milliseconds.<br>spring.couchbase.env.timeouts.key-value=2500 # Blocking operations performed on a specific key timeout in milliseconds.<br>spring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout in milliseconds.<br>spring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connections timeout in milliseconds.<br>spring.couchbase.env.timeouts.view=7500 # Regular and geospatial view operations timeout in milliseconds.</p><h4 id="dao-persistenceexceptiontranslationautoconfiguration"><a class="markdownIt-Anchor" href="#dao-persistenceexceptiontranslationautoconfiguration"></a> DAO (PersistenceExceptionTranslationAutoConfiguration)</h4><p>spring.dao.exceptiontranslation.enabled=true # Enable the PersistenceExceptionTranslationPostProcessor.</p><h4 id="cassandra-cassandraproperties"><a class="markdownIt-Anchor" href="#cassandra-cassandraproperties"></a> CASSANDRA (CassandraProperties)</h4><p>spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.<br>spring.data.cassandra.compression=none # Compression supported by the Cassandra binary protocol.<br>spring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.<br>spring.data.cassandra.consistency-level= # Queries consistency level.<br>spring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.<br>spring.data.cassandra.fetch-size= # Queries default fetch size.<br>spring.data.cassandra.keyspace-name= # Keyspace name to use.<br>spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.<br>spring.data.cassandra.port= # Port of the Cassandra server.<br>spring.data.cassandra.password= # Login password of the server.<br>spring.data.cassandra.reactive-repositories.enabled=true # Enable Cassandra reactive repositories.<br>spring.data.cassandra.read-timeout-millis= # Socket option: read time out.<br>spring.data.cassandra.reconnection-policy= # Reconnection policy class.<br>spring.data.cassandra.repositories.enabled= # Enable Cassandra repositories.<br>spring.data.cassandra.retry-policy= # Class name of the retry policy.<br>spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.<br>spring.data.cassandra.schema-action=none # Schema action to take at startup.<br>spring.data.cassandra.ssl=false # Enable SSL support.<br>spring.data.cassandra.username= # Login user of the server.</p><h4 id="data-couchbase-couchbasedataproperties"><a class="markdownIt-Anchor" href="#data-couchbase-couchbasedataproperties"></a> DATA COUCHBASE (CouchbaseDataProperties)</h4><p>spring.data.couchbase.auto-index=false # Automatically create views and indexes.<br>spring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by default on generated queries.<br>spring.data.couchbase.repositories.enabled=true # Enable Couchbase repositories.</p><h4 id="elasticsearch-elasticsearchproperties"><a class="markdownIt-Anchor" href="#elasticsearch-elasticsearchproperties"></a> ELASTICSEARCH (ElasticsearchProperties)</h4><p>spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.<br>spring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.<br>spring.data.elasticsearch.properties.*= # Additional properties used to configure the client.<br>spring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch repositories.</p><h4 id="data-ldap"><a class="markdownIt-Anchor" href="#data-ldap"></a> DATA LDAP</h4><p>spring.data.ldap.repositories.enabled=true # Enable LDAP repositories.</p><h4 id="mongodb-mongoproperties"><a class="markdownIt-Anchor" href="#mongodb-mongoproperties"></a> MONGODB (MongoProperties)</h4><p>spring.data.mongodb.authentication-database= # Authentication database name.<br>spring.data.mongodb.database=test # Database name.<br>spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.<br>spring.data.mongodb.grid-fs-database= # GridFS database name.<br>spring.data.mongodb.host=localhost # Mongo server host. Cannot be set with uri.<br>spring.data.mongodb.password= # Login password of the mongo server. Cannot be set with uri.<br>spring.data.mongodb.port=27017 # Mongo server port. Cannot be set with uri.<br>spring.data.mongodb.reactive-repositories.enabled=true # Enable Mongo reactive repositories.<br>spring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.<br>spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. Cannot be set with host, port and credentials.<br>spring.data.mongodb.username= # Login user of the mongo server. Cannot be set with uri.</p><h4 id="data-redis"><a class="markdownIt-Anchor" href="#data-redis"></a> DATA REDIS</h4><p>spring.data.redis.repositories.enabled=true # Enable Redis repositories.</p><h4 id="neo4j-neo4jproperties"><a class="markdownIt-Anchor" href="#neo4j-neo4jproperties"></a> NEO4J (Neo4jProperties)</h4><p>spring.data.neo4j.auto-index=none # Auto index mode.<br>spring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embedded driver is available.<br>spring.data.neo4j.open-in-view=false # Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.<br>spring.data.neo4j.password= # Login password of the server.<br>spring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories.<br>spring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.<br>spring.data.neo4j.username= # Login user of the server.</p><h4 id="data-rest-repositoryrestproperties"><a class="markdownIt-Anchor" href="#data-rest-repositoryrestproperties"></a> DATA REST (RepositoryRestProperties)</h4><p>spring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.<br>spring.data.rest.default-page-size= # Default size of pages.<br>spring.data.rest.detection-strategy=default # Strategy to use to determine which repositories get exposed.<br>spring.data.rest.enable-enum-translation= # Enable enum value translation via the Spring Data REST default resource bundle.<br>spring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.<br>spring.data.rest.max-page-size= # Maximum size of pages.<br>spring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.<br>spring.data.rest.return-body-on-create= # Return a response body after creating an entity.<br>spring.data.rest.return-body-on-update= # Return a response body after updating an entity.<br>spring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.</p><h4 id="solr-solrproperties"><a class="markdownIt-Anchor" href="#solr-solrproperties"></a> SOLR (SolrProperties)</h4><p>spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if “zk-host” is set.<br>spring.data.solr.repositories.enabled=true # Enable Solr repositories.<br>spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.</p><h4 id="datasource-datasourceautoconfiguration-datasourceproperties"><a class="markdownIt-Anchor" href="#datasource-datasourceautoconfiguration-datasourceproperties"></a> DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</h4><p>spring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.<br>spring.datasource.data= # Data (DML) script resource references.<br>spring.datasource.data-username= # User of the database to execute DML scripts (if different).<br>spring.datasource.data-password= # Password of the database to execute DML scripts (if different).<br>spring.datasource.dbcp2.<em>= # Commons DBCP2 specific settings<br>spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.<br>spring.datasource.generate-unique-name=false # Generate a random datasource name.<br>spring.datasource.hikari.</em>= # Hikari specific settings<br>spring.datasource.initialize=true # Populate the database using ‘data.sql’.<br>spring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).<br>spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username &amp; password are ignored when set.<br>spring.datasource.name=testdb # Name of the datasource.<br>spring.datasource.password= # Login password of the database.<br>spring.datasource.platform=all # Platform to use in the schema resource (schema-${platform}.sql).<br>spring.datasource.schema= # Schema (DDL) script resource references.<br>spring.datasource.schema-username= # User of the database to execute DDL scripts (if different).<br>spring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).<br>spring.datasource.separator=; # Statement separator in SQL initialization scripts.<br>spring.datasource.sql-script-encoding= # SQL scripts encoding.<br>spring.datasource.tomcat.*= # Tomcat datasource specific settings<br>spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.<br>spring.datasource.url= # JDBC url of the database.<br>spring.datasource.username= # Login user of the database.<br>spring.datasource.xa.data-source-class-name= # XA datasource fully qualified name.<br>spring.datasource.xa.properties= # Properties to pass to the XA data source.</p><h4 id="jest-elasticsearch-http-client-jestproperties"><a class="markdownIt-Anchor" href="#jest-elasticsearch-http-client-jestproperties"></a> JEST (Elasticsearch HTTP client) (JestProperties)</h4><p>spring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in milliseconds.<br>spring.elasticsearch.jest.multi-threaded=true # Enable connection requests from multiple execution threads.<br>spring.elasticsearch.jest.password= # Login password.<br>spring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.<br>spring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.<br>spring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds.<br>spring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.<br>spring.elasticsearch.jest.username= # Login user.</p><h4 id="h2-web-console-h2consoleproperties"><a class="markdownIt-Anchor" href="#h2-web-console-h2consoleproperties"></a> H2 Web Console (H2ConsoleProperties)</h4><p>spring.h2.console.enabled=false # Enable the console.<br>spring.h2.console.path=/h2-console # Path at which the console will be available.<br>spring.h2.console.settings.trace=false # Enable trace output.<br>spring.h2.console.settings.web-allow-others=false # Enable remote access.</p><h4 id="jooq-jooqautoconfiguration"><a class="markdownIt-Anchor" href="#jooq-jooqautoconfiguration"></a> JOOQ (JooqAutoConfiguration)</h4><p>spring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance <code>POSTGRES</code></p><h4 id="jpa-jpabaseconfiguration-hibernatejpaautoconfiguration"><a class="markdownIt-Anchor" href="#jpa-jpabaseconfiguration-hibernatejpaautoconfiguration"></a> JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</h4><p>spring.data.jpa.repositories.enabled=true # Enable JPA repositories.<br>spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the “databasePlatform” property.<br>spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the “Database” enum.<br>spring.jpa.generate-ddl=false # Initialize the schema on startup.<br>spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the “hibernate.hbm2ddl.auto” property. Default to “create-drop” when using an embedded database, “none” otherwise.<br>spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.<br>spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.<br>spring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate’s newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.<br>spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.<br>spring.jpa.properties.*= # Additional native properties to set on the JPA provider.<br>spring.jpa.show-sql=false # Enable logging of SQL statements.</p><h4 id="jta-jtaautoconfiguration"><a class="markdownIt-Anchor" href="#jta-jtaautoconfiguration"></a> JTA (JtaAutoConfiguration)</h4><p>spring.jta.enabled=true # Enable JTA support.<br>spring.jta.log-dir= # Transaction logs directory.<br>spring.jta.transaction-manager-id= # Transaction manager unique identifier.</p><h4 id="atomikos-atomikosproperties"><a class="markdownIt-Anchor" href="#atomikos-atomikosproperties"></a> ATOMIKOS (AtomikosProperties)</h4><p>spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.<br>spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or not to ignore the transacted flag when creating session.<br>spring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not local transactions are desired.<br>spring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool’s maintenance thread.<br>spring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.<br>spring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.<br>spring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.<br>spring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.<br>spring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.<br>spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.<br>spring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.<br>spring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.<br>spring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.<br>spring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool’s maintenance thread.<br>spring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.<br>spring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.<br>spring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.<br>spring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.<br>spring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.<br>spring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.<br>spring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.<br>spring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints.<br>spring.jta.atomikos.properties.console-file-count=1 # Number of debug logs files that can be created.<br>spring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.<br>spring.jta.atomikos.properties.console-file-name=tm.out # Debug logs file name.<br>spring.jta.atomikos.properties.console-log-level=warn # Console log level.<br>spring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout for JTA transactions.<br>spring.jta.atomikos.properties.enable-logging=true # Enable disk logging.<br>spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.<br>spring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should be stored.<br>spring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.<br>spring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.<br>spring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.<br>spring.jta.atomikos.properties.output-dir= # Directory in which to store the debug log files.<br>spring.jta.atomikos.properties.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.<br>spring.jta.atomikos.properties.service= # Transaction manager implementation that should be started.<br>spring.jta.atomikos.properties.threaded-two-phase-commit=false # Use different (and concurrent) threads for two-phase commit on the participating resources.<br>spring.jta.atomikos.properties.transaction-manager-unique-name= # Transaction manager’s unique name.</p><h4 id="bitronix"><a class="markdownIt-Anchor" href="#bitronix"></a> BITRONIX</h4><p>spring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.<br>spring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.<br>spring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.<br>spring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.<br>spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.<br>spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.<br>spring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not produces and consumers should be cached.<br>spring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.<br>spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.<br>spring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.<br>spring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.<br>spring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.<br>spring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.<br>spring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.<br>spring.jta.bitronix.connectionfactory.test-connections=true # Whether or not connections should be tested when acquired from the pool.<br>spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).<br>spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.<br>spring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.<br>spring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.<br>spring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.<br>spring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.<br>spring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.<br>spring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.<br>spring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.<br>spring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.<br>spring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.<br>spring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the database can run many transactions on the same connection and supports transaction interleaving.<br>spring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not Connection.isValid() is called when acquiring a connection from the pool.<br>spring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.<br>spring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.<br>spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.<br>spring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.<br>spring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.<br>spring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.<br>spring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.<br>spring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.<br>spring.jta.bitronix.datasource.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.<br>spring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.<br>spring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).<br>spring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.<br>spring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.<br>spring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRC resources to be enlisted into the same transaction.<br>spring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronously execution of two phase commit.<br>spring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.<br>spring.jta.bitronix.properties.current-node-only-recovery=true # Recover only the current node.<br>spring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log the creation and commit call stacks of transactions executed without a single enlisted resource.<br>spring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction timeout in seconds.<br>spring.jta.bitronix.properties.disable-jmx=false # Enable JMX support.<br>spring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.<br>spring.jta.bitronix.properties.filter-log-status=false # Enable filtering of logs so that only mandatory logs are written.<br>spring.jta.bitronix.properties.force-batching-enabled=true #  Set if disk forces are batched.<br>spring.jta.bitronix.properties.forced-write-enabled=true # Set if logs are forced to disk.<br>spring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.<br>spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.<br>spring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the UserTransaction.<br>spring.jta.bitronix.properties.journal=disk # Name of the journal. Can be ‘disk’, ‘null’ or a class name.<br>spring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.<br>spring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.<br>spring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.<br>spring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader configuration file name.<br>spring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine’s IP address.<br>spring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions log entries.<br>spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Log a warning for transactions executed without a single enlisted resource.</p><h4 id="narayana-narayanaproperties"><a class="markdownIt-Anchor" href="#narayana-narayanaproperties"></a> NARAYANA (NarayanaProperties)</h4><p>spring.jta.narayana.default-timeout=60 # Transaction timeout in seconds.<br>spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.<br>spring.jta.narayana.log-dir= # Transaction object store directory.<br>spring.jta.narayana.one-phase-commit=true # Enable one phase commit optimisation.<br>spring.jta.narayana.periodic-recovery-period=120 # Interval in which periodic recovery scans are performed in seconds.<br>spring.jta.narayana.recovery-backoff-period=10 # Back off period between first and second phases of the recovery scan in seconds.<br>spring.jta.narayana.recovery-db-pass= # Database password to be used by recovery manager.<br>spring.jta.narayana.recovery-db-user= # Database username to be used by recovery manager.<br>spring.jta.narayana.recovery-jms-pass= # JMS password to be used by recovery manager.<br>spring.jta.narayana.recovery-jms-user= # JMS username to be used by recovery manager.<br>spring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.<br>spring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.<br>spring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan filters.</p><h4 id="embedded-mongodb-embeddedmongoproperties"><a class="markdownIt-Anchor" href="#embedded-mongodb-embeddedmongoproperties"></a> EMBEDDED MONGODB (EmbeddedMongoProperties)</h4><p>spring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.<br>spring.mongodb.embedded.storage.database-dir= # Directory used for data storage.<br>spring.mongodb.embedded.storage.oplog-size= # Maximum size of the oplog in megabytes.<br>spring.mongodb.embedded.storage.repl-set-name= # Name of the replica set.<br>spring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.</p><h4 id="redis-redisproperties"><a class="markdownIt-Anchor" href="#redis-redisproperties"></a> REDIS (RedisProperties)</h4><p>spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.<br>spring.redis.cluster.nodes= # Comma-separated list of “host:port” pairs to bootstrap from.<br>spring.redis.database=0 # Database index used by the connection factory.<br>spring.redis.url= # Connection URL, will override host, port and password (user will be ignored), e.g. redis://user:password@example.com:6379<br>spring.redis.host=localhost # Redis server host.<br>spring.redis.jedis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.<br>spring.redis.jedis.pool.max-idle=8 # Max number of “idle” connections in the pool. Use a negative value to indicate an unlimited number of idle connections.<br>spring.redis.jedis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.<br>spring.redis.jedis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.<br>spring.redis.lettuce.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.<br>spring.redis.lettuce.pool.max-idle=8 # Max number of “idle” connections in the pool. Use a negative value to indicate an unlimited number of idle connections.<br>spring.redis.lettuce.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.<br>spring.redis.lettuce.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.<br>spring.redis.lettuce.shutdown-timeout=2000 # Shutdown timeout in milliseconds.<br>spring.redis.password= # Login password of the redis server.<br>spring.redis.port=6379 # Redis server port.<br>spring.redis.sentinel.master= # Name of Redis server.<br>spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.<br>spring.redis.ssl=false # Enable SSL support.<br>spring.redis.timeout=0 # Connection timeout in milliseconds.</p><h4 id="transaction-transactionproperties"><a class="markdownIt-Anchor" href="#transaction-transactionproperties"></a> TRANSACTION (TransactionProperties)</h4><p>spring.transaction.default-timeout= # Default transaction timeout in seconds.<br>spring.transaction.rollback-on-commit-failure= # Perform the rollback on commit failures.</p><h4 id="activemq-activemqproperties"><a class="markdownIt-Anchor" href="#activemq-activemqproperties"></a> ACTIVEMQ (ActiveMQProperties)</h4><p>spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance <code>tcp://localhost:61616</code><br>spring.activemq.in-memory=true # Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.<br>spring.activemq.password= # Login password of the broker.<br>spring.activemq.user= # Login user of the broker.<br>spring.activemq.packages.trust-all=false # Trust all packages.<br>spring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).<br>spring.activemq.pool.configuration.*= # See PooledConnectionFactory.<br>spring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.<br>spring.activemq.pool.expiry-timeout=0 # Connection expiration timeout in milliseconds.<br>spring.activemq.pool.idle-timeout=30000 # Connection idle timeout in milliseconds.<br>spring.activemq.pool.max-connections=1 # Maximum number of pooled connections.</p><h4 id="artemis-artemisproperties"><a class="markdownIt-Anchor" href="#artemis-artemisproperties"></a> ARTEMIS (ArtemisProperties)</h4><p>spring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.<br>spring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.<br>spring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs are available.<br>spring.artemis.embedded.persistent=false # Enable persistent store.<br>spring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.<br>spring.artemis.embedded.server-id= # Server id. By default, an auto-incremented counter is used.<br>spring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.<br>spring.artemis.host=localhost # Artemis broker host.<br>spring.artemis.mode= # Artemis deployment mode, auto-detected by default.<br>spring.artemis.password= # Login password of the broker.<br>spring.artemis.port=61616 # Artemis broker port.<br>spring.artemis.user= # Login user of the broker.</p><h4 id="spring-batch-batchproperties"><a class="markdownIt-Anchor" href="#spring-batch-batchproperties"></a> SPRING BATCH (BatchProperties)</h4><p>spring.batch.initializer.enabled= # Create the required batch tables on startup if necessary. Enabled automatically if no custom table prefix is set or if a custom schema is configured.<br>spring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.<br>spring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance <code>job1,job2</code>). By default, all Jobs found in the context are executed.<br>spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.<br>spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.</p><h4 id="spring-integration-integrationproperties"><a class="markdownIt-Anchor" href="#spring-integration-integrationproperties"></a> SPRING INTEGRATION (IntegrationProperties)</h4><p>spring.integration.jdbc.initializer.enabled=false # Create the required integration tables on startup.<br>spring.integration.jdbc.schema=classpath:org/springframework/integration/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</p><h4 id="jms-jmsproperties"><a class="markdownIt-Anchor" href="#jms-jmsproperties"></a> JMS (JmsProperties)</h4><p>spring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.<br>spring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.<br>spring.jms.listener.auto-startup=true # Start the container automatically on startup.<br>spring.jms.listener.concurrency= # Minimum number of concurrent consumers.<br>spring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.<br>spring.jms.pub-sub-domain=false # Specify if the default destination type is topic.<br>spring.jms.template.default-destination= # Default destination to use on send/receive operations that do not have a destination parameter.<br>spring.jms.template.delivery-delay= # Delivery delay to use for send calls in milliseconds.<br>spring.jms.template.delivery-mode= # Delivery mode. Enable QoS when set.<br>spring.jms.template.priority= # Priority of a message when sending. Enable QoS when set.<br>spring.jms.template.qos-enabled= # Enable explicit QoS when sending a message.<br>spring.jms.template.receive-timeout= # Timeout to use for receive calls in milliseconds.<br>spring.jms.template.time-to-live= # Time-to-live of a message when sending in milliseconds. Enable QoS when set.</p><h4 id="apache-kafka-kafkaproperties"><a class="markdownIt-Anchor" href="#apache-kafka-kafkaproperties"></a> APACHE KAFKA (KafkaProperties)</h4><p>spring.kafka.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.<br>spring.kafka.client-id= # Id to pass to the server when making requests; used for server-side logging.<br>spring.kafka.consumer.auto-commit-interval= # Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if ‘enable.auto.commit’ true.<br>spring.kafka.consumer.auto-offset-reset= # What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server.<br>spring.kafka.consumer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.<br>spring.kafka.consumer.client-id= # Id to pass to the server when making requests; used for server-side logging.<br>spring.kafka.consumer.enable-auto-commit= # If true the consumer’s offset will be periodically committed in the background.<br>spring.kafka.consumer.fetch-max-wait= # Maximum amount of time in milliseconds the server will block before answering the fetch request if there isn’t sufficient data to immediately satisfy the requirement given by “fetch.min.bytes”.<br>spring.kafka.consumer.fetch-min-size= # Minimum amount of data the server should return for a fetch request in bytes.<br>spring.kafka.consumer.group-id= # Unique string that identifies the consumer group this consumer belongs to.<br>spring.kafka.consumer.heartbeat-interval= # Expected time in milliseconds between heartbeats to the consumer coordinator.<br>spring.kafka.consumer.key-deserializer= # Deserializer class for keys.<br>spring.kafka.consumer.max-poll-records= # Maximum number of records returned in a single call to poll().<br>spring.kafka.consumer.ssl.key-password= # Password of the private key in the key store file.<br>spring.kafka.consumer.ssl.keystore-location= # Location of the key store file.<br>spring.kafka.consumer.ssl.keystore-password= # Store password for the key store file.<br>spring.kafka.consumer.ssl.truststore-location= # Location of the trust store file.<br>spring.kafka.consumer.ssl.truststore-password= # Store password for the trust store file.<br>spring.kafka.consumer.value-deserializer= # Deserializer class for values.<br>spring.kafka.jaas.control-flag=required # Control flag for login configuration.<br>spring.kafka.jaas.enabled= # Enable JAAS configuration.<br>spring.kafka.jaas.login-module=com.sun.security.auth.module.Krb5LoginModule # Login module.<br>spring.kafka.jaas.options= # Additional JAAS options.<br>spring.kafka.listener.ack-count= # Number of records between offset commits when ackMode is “COUNT” or “COUNT_TIME”.<br>spring.kafka.listener.ack-mode= # Listener AckMode; see the spring-kafka documentation.<br>spring.kafka.listener.ack-time= # Time in milliseconds between offset commits when ackMode is “TIME” or “COUNT_TIME”.<br>spring.kafka.listener.concurrency= # Number of threads to run in the listener containers.<br>spring.kafka.listener.poll-timeout= # Timeout in milliseconds to use when polling the consumer.<br>spring.kafka.producer.acks= # Number of acknowledgments the producer requires the leader to have received before considering a request complete.<br>spring.kafka.producer.batch-size= # Number of records to batch before sending.<br>spring.kafka.producer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.<br>spring.kafka.producer.buffer-memory= # Total bytes of memory the producer can use to buffer records waiting to be sent to the server.<br>spring.kafka.producer.client-id= # Id to pass to the server when making requests; used for server-side logging.<br>spring.kafka.producer.compression-type= # Compression type for all data generated by the producer.<br>spring.kafka.producer.key-serializer= # Serializer class for keys.<br>spring.kafka.producer.retries= # When greater than zero, enables retrying of failed sends.<br>spring.kafka.producer.ssl.key-password= # Password of the private key in the key store file.<br>spring.kafka.producer.ssl.keystore-location= # Location of the key store file.<br>spring.kafka.producer.ssl.keystore-password= # Store password for the key store file.<br>spring.kafka.producer.ssl.truststore-location= # Location of the trust store file.<br>spring.kafka.producer.ssl.truststore-password= # Store password for the trust store file.<br>spring.kafka.producer.value-serializer= # Serializer class for values.<br>spring.kafka.properties.*= # Additional properties used to configure the client.<br>spring.kafka.ssl.key-password= # Password of the private key in the key store file.<br>spring.kafka.ssl.keystore-location= # Location of the key store file.<br>spring.kafka.ssl.keystore-password= # Store password for the key store file.<br>spring.kafka.ssl.truststore-location= # Location of the trust store file.<br>spring.kafka.ssl.truststore-password= # Store password for the trust store file.<br>spring.kafka.template.default-topic= # Default topic to which messages will be sent.</p><h4 id="rabbit-rabbitproperties"><a class="markdownIt-Anchor" href="#rabbit-rabbitproperties"></a> RABBIT (RabbitProperties)</h4><p>spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.<br>spring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to obtain a channel if the cache size has been reached.<br>spring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.<br>spring.rabbitmq.cache.connection.mode=channel # Connection factory cache mode.<br>spring.rabbitmq.cache.connection.size= # Number of connections to cache.<br>spring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for infinite.<br>spring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.<br>spring.rabbitmq.host=localhost # RabbitMQ host.<br>spring.rabbitmq.listener.direct.acknowledge-mode= # Acknowledge mode of container.<br>spring.rabbitmq.listener.direct.auto-startup=true # Start the container automatically on startup.<br>spring.rabbitmq.listener.direct.consumers-per-queue= # Number of consumers per queue.<br>spring.rabbitmq.listener.direct.default-requeue-rejected= # Whether rejected deliveries are requeued by default; default true.<br>spring.rabbitmq.listener.direct.idle-event-interval= # How often idle container events should be published in milliseconds.<br>spring.rabbitmq.listener.direct.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).<br>spring.rabbitmq.listener.simple.acknowledge-mode= # Acknowledge mode of container.<br>spring.rabbitmq.listener.simple.auto-startup=true # Start the container automatically on startup.<br>spring.rabbitmq.listener.simple.concurrency= # Minimum number of listener invoker threads.<br>spring.rabbitmq.listener.simple.default-requeue-rejected= # Whether or not to requeue delivery failures.<br>spring.rabbitmq.listener.simple.idle-event-interval= # How often idle container events should be published in milliseconds.<br>spring.rabbitmq.listener.simple.max-concurrency= # Maximum number of listener invoker.<br>spring.rabbitmq.listener.simple.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).<br>spring.rabbitmq.listener.simple.retry.enabled=false # Whether or not publishing retries are enabled.<br>spring.rabbitmq.listener.simple.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message.<br>spring.rabbitmq.listener.simple.retry.max-attempts=3 # Maximum number of attempts to deliver a message.<br>spring.rabbitmq.listener.simple.retry.max-interval=10000 # Maximum interval between attempts.<br>spring.rabbitmq.listener.simple.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval.<br>spring.rabbitmq.listener.simple.retry.stateless=true # Whether or not retry is stateless or stateful.<br>spring.rabbitmq.listener.simple.transaction-size= # Number of messages to be processed in a transaction; number of messages between acks. For best results it should be less than or equal to the prefetch count.<br>spring.rabbitmq.listener.type=simple # Listener container type.<br>spring.rabbitmq.password= # Login to authenticate against the broker.<br>spring.rabbitmq.port=5672 # RabbitMQ port.<br>spring.rabbitmq.publisher-confirms=false # Enable publisher confirms.<br>spring.rabbitmq.publisher-returns=false # Enable publisher returns.<br>spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.<br>spring.rabbitmq.ssl.enabled=false # Enable SSL support.<br>spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.<br>spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.<br>spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.<br>spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.<br>spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.<br>spring.rabbitmq.template.mandatory=false # Enable mandatory messages.<br>spring.rabbitmq.template.receive-timeout=0 # Timeout for <code>receive()</code> methods.<br>spring.rabbitmq.template.reply-timeout=5000 # Timeout for <code>sendAndReceive()</code> methods.<br>spring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the <code>RabbitTemplate</code>.<br>spring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and second attempt to publish a message.<br>spring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish a message.<br>spring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to publish a message.<br>spring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous publishing retry interval.<br>spring.rabbitmq.username= # Login user to authenticate to the broker.<br>spring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.</p><h4 id="endpoints-abstractendpoint-subclasses"><a class="markdownIt-Anchor" href="#endpoints-abstractendpoint-subclasses"></a> ENDPOINTS (AbstractEndpoint subclasses)</h4><p>endpoints.enabled=true # Enable endpoints.<br>endpoints.sensitive= # Default endpoint sensitive setting.<br>endpoints.actuator.enabled=true # Enable the endpoint.<br>endpoints.actuator.path= # Endpoint URL path.<br>endpoints.actuator.sensitive=false # Enable security on the endpoint.<br>endpoints.auditevents.enabled= # Enable the endpoint.<br>endpoints.auditevents.path= # Endpoint path.<br>endpoints.auditevents.sensitive=false # Enable security on the endpoint.<br>endpoints.autoconfig.enabled= # Enable the endpoint.<br>endpoints.autoconfig.id= # Endpoint identifier.<br>endpoints.autoconfig.path= # Endpoint path.<br>endpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.beans.enabled= # Enable the endpoint.<br>endpoints.beans.id= # Endpoint identifier.<br>endpoints.beans.path= # Endpoint path.<br>endpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.configprops.enabled= # Enable the endpoint.<br>endpoints.configprops.id= # Endpoint identifier.<br>endpoints.configprops.keys-to-sanitize=password,secret,key,token,.<em>credentials.</em>,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.<br>endpoints.configprops.path= # Endpoint path.<br>endpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.docs.curies.enabled=false # Enable the curie generation.<br>endpoints.docs.enabled=true # Enable actuator docs endpoint.<br>endpoints.docs.path=/docs #<br>endpoints.docs.sensitive=false #<br>endpoints.dump.enabled= # Enable the endpoint.<br>endpoints.dump.id= # Endpoint identifier.<br>endpoints.dump.path= # Endpoint path.<br>endpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.env.enabled= # Enable the endpoint.<br>endpoints.env.id= # Endpoint identifier.<br>endpoints.env.keys-to-sanitize=password,secret,key,token,.<em>credentials.</em>,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.<br>endpoints.env.path= # Endpoint path.<br>endpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.flyway.enabled= # Enable the endpoint.<br>endpoints.flyway.id= # Endpoint identifier.<br>endpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.health.enabled= # Enable the endpoint.<br>endpoints.health.id= # Endpoint identifier.<br>endpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).<br>endpoints.health.path= # Endpoint path.<br>endpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.<br>endpoints.heapdump.enabled= # Enable the endpoint.<br>endpoints.heapdump.path= # Endpoint path.<br>endpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.hypermedia.enabled=false # Enable hypermedia support for endpoints.<br>endpoints.info.enabled= # Enable the endpoint.<br>endpoints.info.id= # Endpoint identifier.<br>endpoints.info.path= # Endpoint path.<br>endpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.jolokia.enabled=true # Enable Jolokia endpoint.<br>endpoints.jolokia.path=/jolokia # Endpoint URL path.<br>endpoints.jolokia.sensitive=true # Enable security on the endpoint.<br>endpoints.liquibase.enabled= # Enable the endpoint.<br>endpoints.liquibase.id= # Endpoint identifier.<br>endpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.logfile.enabled=true # Enable the endpoint.<br>endpoints.logfile.external-file= # External Logfile to be accessed.<br>endpoints.logfile.path=/logfile # Endpoint URL path.<br>endpoints.logfile.sensitive=true # Enable security on the endpoint.<br>endpoints.loggers.enabled=true # Enable the endpoint.<br>endpoints.loggers.id= # Endpoint identifier.<br>endpoints.loggers.path=/logfile # Endpoint path.<br>endpoints.loggers.sensitive=true # Mark if the endpoint exposes sensitive information.<br>endpoints.mappings.enabled= # Enable the endpoint.<br>endpoints.mappings.id= # Endpoint identifier.<br>endpoints.mappings.path= # Endpoint path.<br>endpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.metrics.enabled= # Enable the endpoint.<br>endpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.<br>endpoints.metrics.filter.gauge-submissions=merged # Http filter gauge submissions (merged, per-http-method)<br>endpoints.metrics.filter.counter-submissions=merged # Http filter counter submissions (merged, per-http-method)<br>endpoints.metrics.id= # Endpoint identifier.<br>endpoints.metrics.path= # Endpoint path.<br>endpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.shutdown.enabled= # Enable the endpoint.<br>endpoints.shutdown.id= # Endpoint identifier.<br>endpoints.shutdown.path= # Endpoint path.<br>endpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.<br>endpoints.trace.enabled= # Enable the endpoint.<br>endpoints.trace.filter.enabled=true # Enable the trace servlet filter.<br>endpoints.trace.id= # Endpoint identifier.<br>endpoints.trace.path= # Endpoint path.<br>endpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.</p><h4 id="endpoints-cors-configuration-endpointcorsproperties"><a class="markdownIt-Anchor" href="#endpoints-cors-configuration-endpointcorsproperties"></a> ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)</h4><p>endpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.<br>endpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. ‘<em>’ allows all headers.<br>endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '</em>’ allows all methods.<br>endpoints.cors.allowed-origins= # Comma-separated list of origins to allow. ‘*’ allows all origins. When not set, CORS support is disabled.<br>endpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.<br>endpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.</p><h4 id="jmx-endpoint-endpointmbeanexportproperties"><a class="markdownIt-Anchor" href="#jmx-endpoint-endpointmbeanexportproperties"></a> JMX ENDPOINT (EndpointMBeanExportProperties)</h4><p>endpoints.jmx.domain= # JMX domain name. Initialized with the value of ‘spring.jmx.default-domain’ if set.<br>endpoints.jmx.enabled=true # Enable JMX export of all endpoints.<br>endpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.<br>endpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.</p><h4 id="jolokia-jolokiaproperties"><a class="markdownIt-Anchor" href="#jolokia-jolokiaproperties"></a> JOLOKIA (JolokiaProperties)</h4><p>jolokia.config.*= # See Jolokia manual</p><h4 id="management-http-server-managementserverproperties"><a class="markdownIt-Anchor" href="#management-http-server-managementserverproperties"></a> MANAGEMENT HTTP SERVER (ManagementServerProperties)</h4><p>management.add-application-context-header=false # Add the “X-Application-Context” HTTP header in each response.<br>management.address= # Network address that the management endpoints should bind to.<br>management.context-path= # Management endpoint context-path. For instance <code>/actuator</code><br>management.cloudfoundry.enabled= # Enable extended Cloud Foundry actuator endpoints<br>management.cloudfoundry.skip-ssl-validation= # Skip SSL verification for Cloud Foundry actuator endpoint security calls<br>management.port= # Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.<br>management.security.enabled=true # Enable security.<br>management.security.roles=ACTUATOR # Comma-separated list of roles that can access the management endpoint.<br>management.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).<br>management.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.<br>management.ssl.client-auth= # Whether client authentication is wanted (“want”) or needed (“need”). Requires a trust store. Requires a custom management.port.<br>management.ssl.enabled= # Enable SSL support. Requires a custom management.port.<br>management.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom management.port.<br>management.ssl.key-alias= # Alias that identifies the key in the key store. Requires a custom management.port.<br>management.ssl.key-password= # Password used to access the key in the key store. Requires a custom management.port.<br>management.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.<br>management.ssl.key-store-password= # Password used to access the key store. Requires a custom management.port.<br>management.ssl.key-store-provider= # Provider for the key store. Requires a custom management.port.<br>management.ssl.key-store-type= # Type of the key store. Requires a custom management.port.<br>management.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.port.<br>management.ssl.trust-store= # Trust store that holds SSL certificates. Requires a custom management.port.<br>management.ssl.trust-store-password= # Password used to access the trust store. Requires a custom management.port.<br>management.ssl.trust-store-provider= # Provider for the trust store. Requires a custom management.port.<br>management.ssl.trust-store-type= # Type of the trust store. Requires a custom management.port.</p><h4 id="health-indicators"><a class="markdownIt-Anchor" href="#health-indicators"></a> HEALTH INDICATORS</h4><p>management.health.db.enabled=true # Enable database health check.<br>management.health.cassandra.enabled=true # Enable cassandra health check.<br>management.health.couchbase.enabled=true # Enable couchbase health check.<br>management.health.defaults.enabled=true # Enable default health indicators.<br>management.health.diskspace.enabled=true # Enable disk space health check.<br>management.health.diskspace.path= # Path used to compute the available disk space.<br>management.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.<br>management.health.elasticsearch.enabled=true # Enable elasticsearch health check.<br>management.health.elasticsearch.indices= # Comma-separated index names.<br>management.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.<br>management.health.jms.enabled=true # Enable JMS health check.<br>management.health.ldap.enabled=true # Enable LDAP health check.<br>management.health.mail.enabled=true # Enable Mail health check.<br>management.health.mongo.enabled=true # Enable MongoDB health check.<br>management.health.rabbit.enabled=true # Enable RabbitMQ health check.<br>management.health.redis.enabled=true # Enable Redis health check.<br>management.health.solr.enabled=true # Enable Solr health check.<br>management.health.status.order=DOWN, OUT_OF_SERVICE, UP, UNKNOWN # Comma-separated list of health statuses in order of severity.</p><h4 id="info-contributors-infocontributorproperties"><a class="markdownIt-Anchor" href="#info-contributors-infocontributorproperties"></a> INFO CONTRIBUTORS (InfoContributorProperties)</h4><p>management.info.build.enabled=true # Enable build info.<br>management.info.defaults.enabled=true # Enable default info contributors.<br>management.info.env.enabled=true # Enable environment info.<br>management.info.git.enabled=true # Enable git info.<br>management.info.git.mode=simple # Mode to use to expose git information.</p><h4 id="tracing-traceproperties"><a class="markdownIt-Anchor" href="#tracing-traceproperties"></a> TRACING (TraceProperties)</h4><p>management.trace.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.</p><h4 id="metrics-export-metricexportproperties"><a class="markdownIt-Anchor" href="#metrics-export-metricexportproperties"></a> METRICS EXPORT (MetricExportProperties)</h4><p>spring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what to do with the keys from the source repository.<br>spring.metrics.export.aggregate.prefix= # Prefix for global repository if active.<br>spring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.<br>spring.metrics.export.enabled=true # Flag to enable metric export (assuming a MetricWriter is available).<br>spring.metrics.export.excludes= # List of patterns for metric names to exclude. Applied after the includes.<br>spring.metrics.export.includes= # List of patterns for metric names to include.<br>spring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export (if active).<br>spring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if active.<br>spring.metrics.export.send-latest= # Flag to switch off any available optimizations based on not exporting unchanged metric values.<br>spring.metrics.export.statsd.host= # Host of a statsd server to receive exported metrics.<br>spring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported metrics.<br>spring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.<br>spring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean name.</p><h4 id="devtools-devtoolsproperties"><a class="markdownIt-Anchor" href="#devtools-devtoolsproperties"></a> DEVTOOLS (DevToolsProperties)</h4><p>spring.devtools.livereload.enabled=true # Enable a <a href="http://livereload.com" target="_blank" rel="noopener">livereload.com</a> compatible server.<br>spring.devtools.livereload.port=35729 # Server port.<br>spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.<br>spring.devtools.restart.additional-paths= # Additional paths to watch for changes.<br>spring.devtools.restart.enabled=true # Enable automatic restart.<br>spring.devtools.restart.exclude=META-INF/maven/<strong>,META-INF/resources/</strong>,resources/<strong>,static/</strong>,public/<strong>,templates/</strong>,<strong>/*Test.class,</strong>/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.<br>spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.<br>spring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.<br>spring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.</p><h4 id="remote-devtools-remotedevtoolsproperties"><a class="markdownIt-Anchor" href="#remote-devtools-remotedevtoolsproperties"></a> REMOTE DEVTOOLS (RemoteDevToolsProperties)</h4><p>spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.<br>spring.devtools.remote.debug.enabled=true # Enable remote debug support.<br>spring.devtools.remote.debug.local-port=8000 # Local remote debug server port.<br>spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.<br>spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.<br>spring.devtools.remote.restart.enabled=true # Enable remote restart.<br>spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).<br>spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.</p><h3 id="test"><a class="markdownIt-Anchor" href="#test"></a> TEST</h3><p>spring.test.database.replace=any # Type of existing DataSource to replace.<br>spring.test.mockmvc.print=default # MVC Print option.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;banner&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#banner&quot;&gt;&lt;/a&gt; BANNER&lt;/h4&gt;
&lt;p&gt;banner.charset=UTF-8 # Banner file encoding.&lt;br&gt;
banner.loca
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://luxiaowan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>ThreadLocal是怎么实现线程隔离的</title>
    <link href="http://luxiaowan.github.io/2019/11/20/ThreadLocal%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB%E7%9A%84/"/>
    <id>http://luxiaowan.github.io/2019/11/20/ThreadLocal是怎么实现线程隔离的/</id>
    <published>2019-11-20T15:21:56.000Z</published>
    <updated>2019-11-25T17:08:11.991Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal大家应该都不陌生，见过最多的使用场景应该是和SimpleDateFormat一起使用吧，因为这个SDF非线程安全的，所以需要使用ThreadLocal将它在线程之间隔离开，避免造成脏数据的🐞。那么ThreadLocal是怎么保证线程安全，又是如何操作的呢？</p><blockquote><p>案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      threadLocal.set(<span class="number">1</span>);</span><br><span class="line">      threadLocal.set(<span class="number">2</span>);</span><br><span class="line">      System.out.println(<span class="string">"cc1: "</span> + threadLocal.get());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">"cc1"</span>).start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"cc2: "</span> + threadLocal.get());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">"cc2"</span>).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc1: <span class="number">2</span></span><br><span class="line">cc2: <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>哦哟~cc2打印出来null，也就是在cc1线程中设置的值在线程cc2中获取不到，这也就是所谓的线程隔离，我们来看下ThreadLocal具体的代码实现吧：</p><blockquote><p>ThreadLocal的set(T t)方法源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取当前线程</span></span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  <span class="comment">// 获取当前线程的threadLocals属性，这个属性在Thread类中定义的，为Thread的实例变量</span></span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="comment">// 若线程的ThreadLocalMap已经存在，则调用ThreadLocalMap的set(ThreadLocal&lt;T&gt; key, Object value)方法</span></span><br><span class="line">  <span class="comment">// 否则创建新的ThreadLocalMap实例，并set对应的value</span></span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ThreadLocalMap的set(ThreadLocal<t> key, Object value)方法源码</t></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Entry[] tab = table;</span><br><span class="line">  <span class="keyword">int</span> len = tab.length;</span><br><span class="line">  <span class="comment">// 简单计算key所在的位置</span></span><br><span class="line">  <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 从key所在位置开始遍历table数组，找到具体key所在的位置</span></span><br><span class="line">  <span class="keyword">for</span> (Entry e = tab[i]; e != <span class="keyword">null</span>; e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">    <span class="comment">// 获取Entry实例的key值，这里调用的是超类java.lang.ref.Reference中的get(T t)方法</span></span><br><span class="line">    ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">    <span class="comment">// 若k与传入的参数key是同一个，则用参数value替换Entry实例的value，然后结束方法</span></span><br><span class="line">    <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">      e.value = value;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若获取的k为null，则表示这个变量已经被删除了，则去清理一下table数组，并对数组中元素进行清理并设置新的Entry实例</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">      replaceStaleEntry(key, value, i);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 代码走到这一步，说明该线程第一次设置数据，创建新的Entry实例放在table的第i个位置上</span></span><br><span class="line">  tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">  <span class="keyword">int</span> sz = ++size;</span><br><span class="line">  <span class="comment">// 清理table中的元素，若长度达到了扩容阈值，则对table进行扩容，扩容为原数组长度的2倍</span></span><br><span class="line">  <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">    rehash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ThreadLocal的createMap(Thread t, T firstValue)方法源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个ThreadLocalMap实例，并赋值给当前线程的实例变量threadLocals</span></span><br><span class="line">  <span class="comment">// 这里就是线程隔离的关键所在，每一个线程中的数据都是由线程独有的threadLocals变量存储的</span></span><br><span class="line">  t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ThreadLocalMap的构造器源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">  <span class="comment">// 实例化Entry数组，长度为初始长度16</span></span><br><span class="line">  table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">  <span class="comment">// 计算key在数组中的位置</span></span><br><span class="line">  <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 创建Entry实例，并放在table的i下标位置</span></span><br><span class="line">  table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">  <span class="comment">// 实际长度设置为1</span></span><br><span class="line">  size = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 设置数组扩容阈值（len * 2 / 3）</span></span><br><span class="line">  setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上便是ThreadLocal达到线程隔离的基本解析，讲解的比较基础，其实就是JDK源码鉴赏，还有什么不懂的地方就自己去看源码吧。</p><h4 id="延伸下"><a class="markdownIt-Anchor" href="#延伸下"></a> 延伸下</h4><blockquote><p>ThreadLocal的get()方法源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      T result = (T)e.value;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码比较简单，这里就不在进行解释了，我们着重看一下最后一句<code>setInitialValue()</code>这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  T value = initialValue();</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现和set方法类似，只不过是将一个<code>null</code>当做value而已，所以我们在没给ThreadLocal设置值的情况下调用get方法，则会为其创建一个默认的null值并返回null。</p><h4 id="留一个思考题"><a class="markdownIt-Anchor" href="#留一个思考题"></a> 留一个思考题</h4><p>因为我们每个线程的ThreadLocal的key的hash值都是固定的，那么Thread的threadLocals变量的table中会有多少个非null元素呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ThreadLocal大家应该都不陌生，见过最多的使用场景应该是和SimpleDateFormat一起使用吧，因为这个SDF非线程安全的，所以需要使用ThreadLocal将它在线程之间隔离开，避免造成脏数据的🐞。那么ThreadLocal是怎么保证线程安全，又是如何操作
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>慎用ArrayList中的SubList</title>
    <link href="http://luxiaowan.github.io/2019/11/11/%E6%85%8E%E7%94%A8ArrayList%E4%B8%AD%E7%9A%84SubList/"/>
    <id>http://luxiaowan.github.io/2019/11/11/慎用ArrayList中的SubList/</id>
    <published>2019-11-10T17:11:00.000Z</published>
    <updated>2019-11-24T16:18:53.293Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>双十一了，大家都省了多少钱啊？</p><p>题外话：此处交给大家一个查看商品历史价格的小方法：</p><ul><li><p>在商品链接的域名后加上三个v就能查看到该商品的历史价格啦</p></li><li><p>🌰</p><blockquote><p><a href="http://shop.taobao.com/xxxx" target="_blank" rel="noopener">http://shop.taobao.com/xxxx</a></p><p>↓</p><p><a href="http://shop.taobaovvv.com/xxx" target="_blank" rel="noopener">http://shop.taobaovvv.com/xxx</a></p></blockquote></li></ul></blockquote><p>步入正题，为什么说我们在实际开发过程中要慎用ArrayList的subList呢？其实这也是阿里军规中的一条，原因其实很简单：不稳定！也许看到这里会觉得&quot;就是创建一个独立的新的SubList的实例，怎么会不稳定！&quot;，如果你是这么想的，那么恭喜你，这篇文章真的能够帮助到你，且往下看：</p><hr><h3 id="1-客观您上上眼看看sublist的set方法"><a class="markdownIt-Anchor" href="#1-客观您上上眼看看sublist的set方法"></a> 1. 客观您上上眼，看看SubList的set方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; sourceList = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                add(<span class="string">"H"</span>); add(<span class="string">"E"</span>); add(<span class="string">"L"</span>); add(<span class="string">"L"</span>); add(<span class="string">"O"</span>);</span><br><span class="line">                add(<span class="string">"W"</span>); add(<span class="string">"O"</span>); add(<span class="string">"R"</span>); add(<span class="string">"L"</span>); add(<span class="string">"D"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;String&gt; subList = sourceList.subList(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">        System.out.println(<span class="string">"sourceList.subList(2, 5)得到: "</span> + subList);</span><br><span class="line"></span><br><span class="line">        subList.set(<span class="number">1</span>, <span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">        System.out.println(<span class="string">"subList: "</span> + subList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的执行结果是什么？先不要看下面的答案，自己想一想。</p><blockquote><p>答案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceList: [H, E, L, L, O, W, O, R, L, D]</span><br><span class="line">subList: [L, L, O]</span><br><span class="line">sourceList: [H, E, L, cc, O, W, O, R, L, D]</span><br><span class="line">subList: [L, cc, O]</span><br></pre></td></tr></table></figure><p>哦吼~！答案和你自己想的有没有出入？奇妙吧，为什么修改了subList中的元素，会影响到sourceList？我们来看下ArrayList的subList方法都做了些什么：</p><blockquote><p>JDK源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a view of the portion of this list between the specified</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> fromIndex&#125;, inclusive, and &#123;<span class="doctag">@code</span> toIndex&#125;, exclusive. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">    subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是检查我们的fromIndex和toIndex是否合法，然后调用ArrayList的内部类SubList创建一个SubList的实例。好像还真如我们之前想的一样，创建了一个独立的SubList的对象，没什么不对的，那我们来看一下SubList的构造器中都做了些什么吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SubList(AbstractList&lt;E&gt; parent, <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">  <span class="keyword">this</span>.parent = parent;</span><br><span class="line">  <span class="keyword">this</span>.parentOffset = fromIndex;</span><br><span class="line">  <span class="keyword">this</span>.offset = offset + fromIndex;</span><br><span class="line">  <span class="keyword">this</span>.size = toIndex - fromIndex;</span><br><span class="line">  <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是个什么鬼？ArrayList的实例对象(也就是parent)竟然作为参数传到了SubList中，SubList的偏移量为0+fromIndex，大小size为toIndex - fromIndex（也就是和String的substring方法一样，fromIndex到(toIndex -1)的数据集），修改次数modCount和ArrayList的modCount相等，那么我们猜测一下：SubList实例的变动，是否和ArrayList有关呢？</p><p>我们看到subList方法的注释中有这么一句话：<font color="red">Returns a view of the portion of this list</font>。难道SubList仅仅是ArrayList的一个被fromIndex和toIndex的区间视图？</p><p>上面的例子中，subList调用了它的set方法，我们来看一下这个set方法内部逻辑是什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">  rangeCheck(index);<span class="comment">// 下标校验</span></span><br><span class="line">  checkForComodification();<span class="comment">// 校验合法性</span></span><br><span class="line">  <span class="comment">// ***重点</span></span><br><span class="line">  <span class="comment">// 根据偏移量和下标，获取ArrayList对象的elementData数组中下标为(offset + index)的元素</span></span><br><span class="line">  <span class="comment">// offset是什么？从构造器中我们可以看到offset就是0 + fromIndex，也就是我们截取的起始下标，也就是SubList的set方法是直接在原ArrayList实例的内部数组上进行的操作</span></span><br><span class="line">  E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">  ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</span><br><span class="line">  <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里就一目了然了，怪不得我们修改了SubList的元素会影响到创建它的对象的值。所以在使用SubList的时候，如果需要修改SubList里面的值，一定要注意一下是否会影响到原List中的数据所涉及的业务，否则这个坑一旦踩上了，不太容易排查啊。</p><h3 id="2-客观再上眼看看sublist的add方法"><a class="markdownIt-Anchor" href="#2-客观再上眼看看sublist的add方法"></a> 2. 客观再上眼，看看SubList的add方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; sourceList = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                add(<span class="string">"H"</span>); add(<span class="string">"E"</span>); add(<span class="string">"L"</span>); add(<span class="string">"L"</span>); add(<span class="string">"O"</span>);</span><br><span class="line">                add(<span class="string">"W"</span>); add(<span class="string">"O"</span>); add(<span class="string">"R"</span>); add(<span class="string">"L"</span>); add(<span class="string">"D"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;String&gt; subList = sourceList.subList(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">        System.out.println(<span class="string">"sourceList.subList(2, 5)得到: "</span> + subList);</span><br><span class="line"></span><br><span class="line">        subList.add(<span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">        System.out.println(<span class="string">"subList: "</span> + subList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的执行结果又是什么呢？如果我们稍微思考一下，大致能正确的分析出结果：</p><blockquote><p>答案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceList: [H, E, L, L, O, W, O, R, L, D]</span><br><span class="line">subList: [L, L, O]</span><br><span class="line">sourceList: [H, E, L, L, O, cc, W, O, R, L, D]</span><br><span class="line">subList: [L, L, O, cc]</span><br></pre></td></tr></table></figure><p>我们向subList中添加一个元素，原列表sourceList在toIndex的位置插入了subList中add的元素，也就是我们在SubList中新增一个元素，同时会将这个元素添加到原List中。</p><blockquote><p>JDK源码</p></blockquote><p>我们查看SubList的源码，发现并没有add(E e)方法，那我们调用的add(“cc”)是调用到哪里去了呢？我们查看SubList类的声明，可以看到它是继承了<code>AbstractList</code>抽象类，所以这里应该是调用了超类里的add(E e)方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** AbstractList.java */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  add(size(), e);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到是调用了add(int index, E element)方法进行数据新增的，然而SubList里面实现了这个方法，那么我们来看下SubList中的这个方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 校验下标是否越界</span></span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line">  <span class="comment">// 校验原List是否有过修改</span></span><br><span class="line">  checkForComodification();</span><br><span class="line">  <span class="comment">// parent即是在构造器中注入的原List</span></span><br><span class="line">  parent.add(parentOffset + index, e);</span><br><span class="line">  <span class="comment">// 同步列表修改次数</span></span><br><span class="line">  <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">  <span class="comment">// 本列表的长度+1</span></span><br><span class="line">  <span class="keyword">this</span>.size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由SubList的源码可以看出，SubList实例的add方法实际上就是在修改原List，包括SubList中所有的方法均是在parent列表上进行操作。</p><h3 id="3-奇葩操作最坑的坑"><a class="markdownIt-Anchor" href="#3-奇葩操作最坑的坑"></a> 3. 奇葩操作，最坑的坑</h3><p>仔细分析如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; sourceList = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      add(<span class="string">"H"</span>); add(<span class="string">"E"</span>); add(<span class="string">"L"</span>); add(<span class="string">"L"</span>); add(<span class="string">"O"</span>);</span><br><span class="line">      add(<span class="string">"W"</span>); add(<span class="string">"O"</span>); add(<span class="string">"R"</span>); add(<span class="string">"L"</span>); add(<span class="string">"D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  List&lt;String&gt; subList = sourceList.subList(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">  System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">  System.out.println(<span class="string">"subList: "</span> + subList);</span><br><span class="line"></span><br><span class="line">  sourceList.add(<span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"sourceList: "</span> + sourceList);</span><br><span class="line">  System.out.println(<span class="string">"subList: "</span> + subList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的执行结果是什么？在不执行这段代码的情况下，是不是以为是下面的结果？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceList: [H, E, L, L, O, W, O, R, L, D]</span><br><span class="line">subList: [L, L, O]</span><br><span class="line">sourceList: [H, E, L, L, O, W, O, R, L, D, cc]</span><br><span class="line">subList: [L, L, O]</span><br></pre></td></tr></table></figure><p>如果你说对，就是这个，那你可就说错咯，实际上在执行到<code>System.out.println(&quot;sourceList: &quot; + sourceList);</code>这一句代码的时候整个程序的输出都是正常的，但在执行最后一句代码的时候，就会报错了，错误信息是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$SubList.checkForComodification(ArrayList.java:<span class="number">1239</span>)</span><br><span class="line">at java.util.ArrayList$SubList.listIterator(ArrayList.java:<span class="number">1099</span>)</span><br><span class="line">at java.util.AbstractList.listIterator(AbstractList.java:<span class="number">299</span>)</span><br><span class="line">at java.util.ArrayList$SubList.iterator(ArrayList.java:<span class="number">1095</span>)</span><br><span class="line">at java.util.AbstractCollection.toString(AbstractCollection.java:<span class="number">454</span>)</span><br><span class="line">at java.lang.String.valueOf(String.java:<span class="number">2994</span>)</span><br><span class="line">at java.lang.StringBuilder.append(StringBuilder.java:<span class="number">131</span>)</span><br><span class="line">at cc.kevinlu.sublist.SubListTest.main(SubListTest.java:<span class="number">31</span>)</span><br></pre></td></tr></table></figure><p>哦吼~！竟然报错了，我们可以看到是在<code>ArrayList$SubList.checkForComodificatio</code>方法中报的错，我们来看一下这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 比较原列表修改次数和SubList的修改次数是否相等</span></span><br><span class="line">  <span class="keyword">if</span> (ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里抛出异常，说明这两个数是不相等的，那为什么会不相等呢？我们看SubList的add方法中有同步主、'子’列表的语句<code>this.modCount = parent.modCount;</code>，也就是说我们在修改subList的时候，会同步更新主列表的modCount，以保证主、'子’列表始终是一致的。</p><p>但是我们在修改主List的时候是不会去同步SubList的modCount的，我们输出SubList的实例实际上就是调用<code>iterator</code>方法，最终是调用了SubList的<code>public ListIterator&lt;E&gt; listIterator(final int index)</code>方法，该方法第一句就是调用<code>checkForComodification</code>方法检查modCount，这里自然就会报错咯！</p><h3 id="4-填坑"><a class="markdownIt-Anchor" href="#4-填坑"></a> 4. 填坑</h3><p>既然有坑，就有填坑的办法，不可能一直把坑放在那，是吧。</p><p>如果既想修改subList，又不想影响到原list。那么可以创建一个机遇subList的拷贝:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.创建新的List：</span><br><span class="line">  subList = Lists.newArrayList(subList);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.lambda表达式：</span><br><span class="line">sourceList.stream().skip(fromIndex).limit(size).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><hr><h3 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结"></a> 5. 总结</h3><p>并不是说使用SubList一定不妥，文章开头我们也说的是慎用，所以，根据具体业务进行选择吧。</p><hr><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;双十一了，大家都省了多少钱啊？&lt;/p&gt;
&lt;p&gt;题外话：此处交给大家一个查看商品历史价格的小方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在商品链接的域名后加上三个v就能查看到该商品的历史价格啦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🌰&lt;/p&gt;
&lt;blo
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基本命令使用::zset篇</title>
    <link href="http://luxiaowan.github.io/2019/11/08/Redis%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E2%80%94zset%E7%AF%87/"/>
    <id>http://luxiaowan.github.io/2019/11/08/Redis基本命令使用—zset篇/</id>
    <published>2019-11-08T04:55:00.000Z</published>
    <updated>2019-11-21T16:05:02.245Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)</p></blockquote><p><strong>redis在线体验地址：<a href="http://try.redis.io/" target="_blank" rel="noopener">http://try.redis.io/</a></strong></p><h2 id="有序集合zset"><a class="markdownIt-Anchor" href="#有序集合zset"></a> 有序集合(ZSet)</h2><blockquote><p>介绍:</p></blockquote><p>Redis的有序集合和集合一样是一个简单的字符串集合，但该集合是有序的，且集合内的元素都是唯一的，也就是集合内不会出现重复元素，与集合唯一不同的是，有序集合中每一个元素都有一个double类型的score属性，Redis通过score的大小对元素进行排序的。有序集合中元素不能重复，但是元素的score值可以重复。</p><p>常用于做排行榜功能。</p><p>Redis中的集合是通过哈希表来实现的，所以获取集合中元素的时间复杂度为O(1)。</p><blockquote><p>创建缓存</p></blockquote><ol><li><p>创建一个集合缓存，为集合新增元素</p><ul><li><p>命令格式：<code>zadd key score member [score member ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zadd zk1 1 c 1 cc 1 ccc 2 cccc</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">创建有序集合zk1，元素为：</span><br><span class="line">key: c, score: 1</span><br><span class="line">key: cc, score: 1</span><br><span class="line">key: ccc, score: 1</span><br><span class="line">key: cccc, score: 2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个元素或修改元素的score值（一次只能修改一个元素）</p><ul><li><p>命令格式：<code>zincrby key increment member</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zincrby zk1 1 cc</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">1. 为集合zk1的元素cc的score进行+1操作</span><br><span class="line">2. 若集合zk1不存在，则创建</span><br><span class="line">3. 若元素cc不存在，则创建，且cc的score为1</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>查询缓存</p></blockquote><ol><li><p>查询缓存中元素个数</p><ul><li><p>命令格式：<code>zcard key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zcard zk1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">查询集合zk1内的元素总个数</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询集合指定范围的元素</p><ul><li><p>命令格式：<code>zrange key start stop [withscores]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. 返回元素名称</span><br><span class="line">zrange zk1 0 1</span><br><span class="line">---</span><br><span class="line">返回集合zk1中从下标0到下标1的元素名称，start和stop都是从0开始</span><br><span class="line"></span><br><span class="line">2. 返回元素和元素score</span><br><span class="line">zrange zk1 0 -1 withscores</span><br><span class="line">---</span><br><span class="line">返回集合zk1中全部元素的名称和分数</span><br><span class="line">member1</span><br><span class="line">score1</span><br><span class="line">member2</span><br><span class="line">score2</span><br><span class="line">★常用于查询排行榜及分数</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询集合中某元素的下标（下标从0开始）</p><ul><li><p>命令格式：<code>zrank key member</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zrank zk1 c</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回元素c在集合zk1中的下标</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询集合中某元素的分数</p><ul><li><p>命令格式：<code>zscore key member</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zscore zk1 c</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">查询集合zk1中元素c的分数</span><br><span class="line">★常用于点赞数类别查询等</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询集合中指定范围的元素，按照score从大到小排序</p><ul><li><p>命令格式：<code>zrevrange key start stop [withscores]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zrevrange zk1 0 3 withscore</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回集合zk1中从1~4位元素，按照score从大到小</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询集合中某元素的排名</p><ul><li><p>命令格式：<code>zrevrank key member</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zrevrank zk1 c</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回元素c在集合zk1中的排名</span><br><span class="line">★常用于名次查询</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询指定分数范围内的元素，可分页</p><ul><li><p>命令格式：<code>zrevrangebyscore key maxScore minScore [withscores] [limit offset count]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zrevrangebyscore zk1 3 2 withscores limit 0 1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">分页返回集合zk1中分数从2~3的元素</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询指定成员区间内的成员</p><ul><li><p>命令格式：<code>zrangebylex key minChar maxChar [limit offset count]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zrangebylex zk1 - (c1 limit 0 12</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回从第一个元素到元素c1之间的位置</span><br></pre></td></tr></table></figure><table><thead><tr><th>指令</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>ZRANGEBYLEX</td><td>是</td><td>指令</td></tr><tr><td>key</td><td>是</td><td>有序集合键名称</td></tr><tr><td>minChar</td><td>是</td><td>字典中排序位置较小的成员,必须以”[“(包含)开头,或者以”(“(不包含)开头,可使用”-“代替，&quot;-&quot;表示取最小值</td></tr><tr><td>maxChar</td><td>是</td><td>字典中排序位置较大的成员,必须以”[“(包含)开头,或者以”(“(不包含)开头,可使用”+”代替，&quot;+&quot;表示取最大值</td></tr><tr><td>limit</td><td>否</td><td>返回结果是否分页,指令中包含LIMIT后offset、count必须输入</td></tr><tr><td>offset</td><td>否</td><td>返回结果起始位置</td></tr><tr><td>count</td><td>否</td><td>返回结果数量</td></tr></tbody></table></li></ul></li><li><p>查询指定分数区间内的元素数</p><ul><li><p>命令格式：<code>zcount key min max</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zcount zk1 1 2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回score值为1~2的所有元素总数</span><br><span class="line">★计算排行榜中某一分数区间的数量</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询指定元素区间内的元素总数</p><ul><li><p>命令格式：<code>zlexcount key min max</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zlexcount zk1 (c [cccc</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">查询c~cccc之间的元素总数，不包括c，但包括cccc</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>移除缓存元素</p></blockquote><ol><li><p>移除集合中指定的元素</p><ul><li><p>命令格式：<code>zrem key member [member ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zrem zk1 cc c1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">移除集合zk1中的元素cc、c1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>移除指定元素区间的所有成员</p><ul><li><p>命令格式：<code>zremrangebylex key min max</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zremrangebylex zk1 [c (ccc</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">移除集合zk1中元素c到元素ccc之间的所有成员，包括c，但不包括ccc</span><br></pre></td></tr></table></figure></li></ul></li><li><p>移除指定排名区间所有成员</p><ul><li><p>命令格式：<code>zremrangebyrank key start stop</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyrank zk1 0 1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">移除集合zk1中0~1下标的所有元素</span><br></pre></td></tr></table></figure></li></ul></li><li><p>移除指定分数区间所有成员</p><ul><li><p>命令格式：<code>zremrangebyscore key min max</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyscore zk1 0 1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">移除集合zk1中score值为0~1的所有元素</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>特殊操作</p></blockquote><ol><li><p>计算多个集合的并集，并存入新的集合</p><ul><li><p>命令格式：<code>zunionstore destinationKey numkeys key[key ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zunionstore zku 2 zk1 zk2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">合并集合zk1和zk2，将并集存入zku，集合zku中元素的score为所有参与计算的集合中相同的元素的score之和</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;redis在线体验地址：
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://luxiaowan.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Java命令::jstat</title>
    <link href="http://luxiaowan.github.io/2019/11/08/Java%E5%91%BD%E4%BB%A4%E2%80%94jstat/"/>
    <id>http://luxiaowan.github.io/2019/11/08/Java命令—jstat/</id>
    <published>2019-11-08T04:00:00.000Z</published>
    <updated>2019-11-10T15:57:22.417Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jstat是用于监控虚拟机运行状态信息的命令，可以显示虚拟机进程中的类装载、内存使用、GC情况、JIT编译等运行状态数据，能够在Linux上快速定位虚拟机性能问题。</p><p>jstat命令在jdk的bin目录下，目录中还有很多实用的命令</p></blockquote><p><em><strong><font color="red">*以下分析是基于jdk1.8+</font></strong></em></p><p>jstat命令格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jstat -&lt;option&gt; &lt;pid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  option: 需要查看的虚拟机信息</span><br><span class="line">  pid: Java程序进程号</span><br><span class="line">    本地虚拟机: pid</span><br><span class="line">    远程虚拟机: [protocol:][<span class="comment">//] lvmid [@hostname[:port]/servername]</span></span><br><span class="line">  interval: 监控间隔时间，可选，默认立刻执行一次</span><br><span class="line">  count: 监控次数，可选，默认无限次</span><br></pre></td></tr></table></figure><table><thead><tr><th>option</th><th>说明</th></tr></thead><tbody><tr><td>class</td><td>查看类装载、卸载数量、总空间及类装载所耗时间</td></tr><tr><td>gc</td><td>查看Java堆状况，包括Eden、survivor、老年代、永久代的容量</td></tr><tr><td>gcutil</td><td>类似于gc，主要输出各区域空间使用占比</td></tr><tr><td>gccause</td><td>同gc，会多输出每次gc的原因</td></tr><tr><td>gccapacity</td><td>同gc，但输出的主要是Java堆各个区域使用到的最大、最小空间</td></tr><tr><td>gcnew</td><td>查看新生代的使用情况</td></tr><tr><td>gcnewcapacity</td><td>同gcnew，输出内容主要关注新生代的最大、最小空间</td></tr><tr><td>gcold</td><td>查看老年代的使用情况</td></tr><tr><td>gcoldcapacity</td><td>同gcold，输出内容主要关注老年代的最大、最小空间</td></tr><tr><td>gcpermcapacity</td><td>输出永久代使用到的最大、最小空间</td></tr><tr><td>compiler</td><td>输出JIT编译器编译过的方法、耗时等信息</td></tr><tr><td>printcompilation</td><td>输出已经被JIT编译的方法</td></tr></tbody></table><blockquote><p>🌰</p></blockquote><ol><li>jstat -class <pid> : 显示加载class的数量及所占空间等信息</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -class 19080</span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time   </span><br><span class="line"> 11512 22276.9      268   421.6      18.41</span><br><span class="line"> </span><br><span class="line">---</span><br><span class="line">Loaded: 装载类的数量</span><br><span class="line">Bytes: 装载类所占用的字节数</span><br><span class="line">Unloaded: 卸载类的数量</span><br><span class="line">Bytes: 卸载类所占用的字节数</span><br><span class="line">Time: 装载和卸载类所花费的时间</span><br></pre></td></tr></table></figure><ol start="2"><li>jstat -gc <pid> : 显示gc的信息，查看gc的次数和时间</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">，等于YGCT + FGCT[root@master0 ~]# jstat -gc 19080 1000 1</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">6656.0 6656.0  0.0   3761.4 94208.0  51469.2   73728.0    50832.0     -      -      -      -     20207   92.896  37      7.833  100.729</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">[容量为字节]</span><br><span class="line">S0C: 年轻代第一个survivor区的总容量（survivor 0 capacity）</span><br><span class="line">S1C: 年轻代第二个survivor区的总容量（survivor 1 capacity）</span><br><span class="line">S0U: 年轻代第一个survivor区的已使用容量（survivor 0 using）</span><br><span class="line">S1U: 年轻代第二个survivor区的已使用容量（survivor 1 using）</span><br><span class="line">EC: 年轻代Eden区的总容量（Eden capacity）</span><br><span class="line">EU: 年轻代Eden区的已使用容量（Eden using）</span><br><span class="line">OC: 老年代的总容量（Old capacity）</span><br><span class="line">OU: 老年代已使用的容量（Old using）</span><br><span class="line">MC: Metaspace的总容量, jdk1.8+</span><br><span class="line">MU: Metaspace已使用的容量, jdk1.8+</span><br><span class="line">CCSC:压缩类空间容量, jdk1.8+</span><br><span class="line">CCSU:压缩类空间已使用的容量, jdk1.8+</span><br><span class="line">YGC: 服务启动至今年轻代gc的次数（young gc）</span><br><span class="line">YGCT: 服务启动至今年轻代gc使用的时间，秒（young gc time）</span><br><span class="line">FGC: 服务启动至今fullgc的次数</span><br><span class="line">FGCT: 服务启动至今fullgc使用的时间，秒</span><br><span class="line">GCT: 服务启动至今gc用的总时间，秒，等于YGCT + FGCT</span><br></pre></td></tr></table></figure><ol start="3"><li>jstat -gcutil <pid> : 统计gc信息</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -gcutil 19080 1000 3</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">  0.00  48.90  20.83  69.35      -      -  20221   93.006    37    7.833  100.838</span><br><span class="line">  0.00  48.90  20.83  69.35      -      -  20221   93.006    37    7.833  100.838</span><br><span class="line">  0.00  48.90  20.83  69.35      -      -  20221   93.006    37    7.833  100.838</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">S0: 年轻代第一个survivor已使用容量比例</span><br><span class="line">S1: 年轻代第二个survivor已使用容量比例</span><br><span class="line">E: 年轻代Eden区已使用容量比例</span><br><span class="line">O: 老年代已使用容量比例</span><br><span class="line">M: 元空间已使用容量比例</span><br><span class="line">CCS: 压缩类空间已使用容量比例</span><br><span class="line">YGC: 服务启动至今年轻代gc次数</span><br><span class="line">YGCT: 服务启动至今年轻代gc所占用时间，秒</span><br><span class="line">FGC: 服务启动至今fullgc次数</span><br><span class="line">FGCT: 服务启动至今fullgc所占用时间，秒</span><br><span class="line">GCT: 服务启动至今gc总占用时间，秒，等于YGCT + FGCT</span><br></pre></td></tr></table></figure><ol start="4"><li>jstat -gccause <pid> : 查看gc原因</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -gccause 19080</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC                 </span><br><span class="line"> 57.32   0.00  13.35  69.36      -      -  20222   93.015    37    7.833  100.848 Allocation Failure   No GC</span><br><span class="line"> </span><br><span class="line">---</span><br><span class="line">上述可以看到比-gcutil多处了一个LGCC和GCC</span><br><span class="line">LGCC: 最近一次gc发生的原因（last gc cause）</span><br><span class="line">GCC: 当前gc发生的原因</span><br></pre></td></tr></table></figure><ol start="5"><li>jstat -gccapacity <pid> : 查看虚拟机中对象的使用和容量大小</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -gccapacity 19080</span><br><span class="line"> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC </span><br><span class="line"> 20480.0 323584.0 112640.0 7680.0 6656.0  96768.0    40448.0   647168.0    73728.0    73728.0        -        -        -        -        -        -  20223    37</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">[容量单位为字节]</span><br><span class="line">NGC开头的表示：新生代空间容量</span><br><span class="line">OGC开头的表示：老年代空间容量</span><br><span class="line">MC开头的表示：元空间容量（Metaspace capacity）</span><br><span class="line">CCS开头的表示：类压缩空间</span><br></pre></td></tr></table></figure><ol start="6"><li>jstat -gcnew <pid> : 查看新生代gc情况</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -gcnew 19080</span><br><span class="line"> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT  </span><br><span class="line">7680.0 6656.0    0.0 6354.4 15  15 7680.0  96768.0  95634.9  20223   93.023</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">[容量单位为字节]</span><br><span class="line">TT: 老年化阈值，也可以理解为对象持有次数，就是在被移动到老年代之前，在新生代中存活的次数</span><br><span class="line">MTT: 最大老年化阈值</span><br><span class="line">DSS: Survivor区所需空间大小</span><br></pre></td></tr></table></figure><ol start="7"><li>jstat -gcnewcapacity <pid> : 查看新生代空间容量</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -gcnewcapacity 19080</span><br><span class="line">  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC </span><br><span class="line">   20480.0   323584.0   112128.0 107520.0   7168.0 107520.0   7168.0   322560.0    97280.0 20225    37</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">[容量单位为字节]</span><br><span class="line">MN表示：最小</span><br><span class="line">MX表示：最大</span><br><span class="line">NGC开头表示：新生代空间总容量</span><br><span class="line">S0C开头：新生代第一个survivor区容量</span><br><span class="line">S1C开头：新生代第二个survivor区容量</span><br><span class="line">EC开头：新生代Eden区容量</span><br></pre></td></tr></table></figure><ol start="8"><li>jstat -gcold <pid> : 查看老年代gc情况</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -gcold 19080 1000</span><br><span class="line">   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT   </span><br><span class="line">       -        -        -        -     73728.0     51144.0  20234    37    7.833  100.943</span><br><span class="line">       -        -        -        -     73728.0     51144.0  20234    37    7.833  100.943</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">[容量单位为字节]</span><br></pre></td></tr></table></figure><ol start="9"><li>jstat -gcoldcapacity <pid> : 查看老年代容量</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -gcoldcapacity 19080 100 2</span><br><span class="line">   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT   </span><br><span class="line">    40448.0    647168.0     73728.0     73728.0 20235    37    7.833  100.949</span><br><span class="line">    40448.0    647168.0     73728.0     73728.0 20235    37    7.833  100.949</span><br></pre></td></tr></table></figure><ol start="10"><li>jstat -gcpermcapacity <pid> : 查看perm中对象的信息和容量</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdk1.8+以上去除了该命令，如果你当前使用的是jdk1.7-，那么自行谷歌吧</span><br></pre></td></tr></table></figure><ol start="11"><li>jstat -compiler <pid> : 查看虚拟机实时编译的信息</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -compiler 19080</span><br><span class="line">Compiled Failed Invalid   Time   FailedType FailedMethod</span><br><span class="line">    2737      0       0    41.90          0             </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">Compiled: 编译任务执行数量</span><br><span class="line">Failed: 编译任务执行失败数量</span><br><span class="line">Invalid: 编译任务执行失效数量</span><br><span class="line">Time: 编译任务消耗的时间</span><br><span class="line">FailedType: 最后一个编译失败任务的类型</span><br><span class="line">FailedMethod: 最后一个编译失败的任务所在类及方法</span><br></pre></td></tr></table></figure><ol start="12"><li>jstat -printcompilation <pid> : 查看虚拟机已经编译过的方法</pid></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master0 ~]# jstat -printcompilation 19080</span><br><span class="line">Compiled  Size  Type Method</span><br><span class="line">    2737   1562    1 sun/misc/FloatingDecimal dtoa</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">Compiled: 编译任务的数量</span><br><span class="line">Size: 方法生成字节码的大小（单位：字节）</span><br><span class="line">Type: 编译类型</span><br><span class="line">Method: 类名和方法名用来标识编译的方法</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;jstat是用于监控虚拟机运行状态信息的命令，可以显示虚拟机进程中的类装载、内存使用、GC情况、JIT编译等运行状态数据，能够在Linux上快速定位虚拟机性能问题。&lt;/p&gt;
&lt;p&gt;jstat命令在jdk的bin目录下，目录中还有很多实用的命令&lt;/p
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基本命令使用::set篇</title>
    <link href="http://luxiaowan.github.io/2019/10/31/Redis%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E2%80%94set%E7%AF%87/"/>
    <id>http://luxiaowan.github.io/2019/10/31/Redis基本命令使用—set篇/</id>
    <published>2019-10-31T04:55:00.000Z</published>
    <updated>2019-11-10T15:57:22.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)</p></blockquote><p><strong>redis在线体验地址：<a href="http://try.redis.io/" target="_blank" rel="noopener">http://try.redis.io/</a></strong></p><h2 id="集合set"><a class="markdownIt-Anchor" href="#集合set"></a> 集合(Set)</h2><blockquote><p>介绍:</p></blockquote><p>Redis的集合就是一个简单的字符串集合，该集合是无序的，且集合内的元素都是唯一的，也就是集合内不会出现重复元素。Redis中的集合是通过哈希表来实现的，所以获取集合中元素的时间复杂度为O(1)。</p><blockquote><p>创建缓存</p></blockquote><ol><li><p>创建一个集合缓存，为集合新增元素</p><ul><li><p>命令格式：<code>sadd key member [member ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sadd s1 1 2 3 0 -1 redis mongodb zookeeper</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">创建集合s1,元素为：1 2 3 0 -1 redis mongodb zookeeper</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>移除元素</p></blockquote><ol><li><p>随机移除集合中的一个元素并返回这个元素</p><ul><li><p>命令格式：<code>spop key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spop</span> <span class="string">s1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">移除之后，集合s1中就没有这个元素了</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>指定移除集合中一个或多个元素</p><ul><li><p>命令格式：<code>srem key member [member ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">srem s1 -1 0 99</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">将元素-1、0、99从集合s1中移除，仅移除集合中存在的元素</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>查询集合</p></blockquote><ol><li><p>查询集合中元素个数</p><ul><li><p>命令格式：<code>scard key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scard s1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回集合s1中元素总个数</span><br></pre></td></tr></table></figure></li></ul></li><li><p>返回集合中所有元素</p><ul><li><p>命令格式：<code>smembers key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">smembers s1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回集合s1中所有的元素</span><br></pre></td></tr></table></figure></li></ul></li><li><p>随机返回集合中的一个或多个元素</p><ul><li><p>命令格式：<code>srandmember key [count]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">srandmember s1 10</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">随机返回集合s1中的10个元素，若不指定数量，则默认返回一个元素</span><br></pre></td></tr></table></figure></li></ul></li><li><p>迭代集合中的元素</p><ul><li><p>命令格式：<code>sscan key cursor [MATCH pattern] [COUNT count]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sscan s1 0 match re* count 1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">迭代集合中re开头的所有元素，每次返回1个</span><br></pre></td></tr></table></figure></li></ul></li><li><p>判断元素是否存在于集合中</p><ul><li><p>命令格式：<code>sismember key member</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sismember s1 99</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">若99存在于s1中，则返回1，不存在则返回0</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>多集合之间操作</p></blockquote><ol><li><p>查看多个集合的差集</p><ul><li><p>命令格式：<code>sdiff key [key ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sdiff s1 s2 s3</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回集合s1相对于s2、s3的差集，也就是只返回s1中所有不存在于s2、s3中的所有元素</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多个集合的差集存储到指定集合中</p><ul><li><p>命令格式：<code>sdiffstore destination key [key ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sdiffstore ds1 s1 s2 s3</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">将s1中不存在于s2、s3中的元素存储到集合ds1中</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看多个集合的并集，去重</p><ul><li><p>命令格式：<code>sunion key [key ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sunion s1 s2 s3</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">将集合s1、s2、s3的元素合并去重后返回，所有元素均唯一</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多个集合的并集存储到指定集合中</p><ul><li><p>命令格式：<code>sunionstore destination key [key ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sunionstore us1 s1 s2 s3</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">集合s1、s2、s3的并集存储到集合us1中，并返回集合us1中的元素个数</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将一个集合中的某元素移动到另一个集合中</p><ul><li><p>命令格式：<code>smove source destination member</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">smove s1 s2 -2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">将s1中的元素-2移动到集合s2中，若s2不存在，则自动创建</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看多个集合的交集</p><ul><li><p>命令格式：<code>sinter key [key ...]</code>（intersection）</p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sinter s1 s3</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">返回集合s1和集合s3的交集，也就是两个集合中都存在的数据</span><br><span class="line"></span><br><span class="line">实际应用：查看两个人的共同好友；微信里查看和好友的共同群</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多个集合的交集存储到指定集合中</p><ul><li><p>命令格式：<code>sinterstore destination key [key ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sinterstore is1 s1 s3</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">将s1和s3的交集元素存储到集合is1中</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;redis在线体验地址：
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://luxiaowan.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基本命令使用::list篇</title>
    <link href="http://luxiaowan.github.io/2019/10/31/Redis%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E2%80%94list%E7%AF%87/"/>
    <id>http://luxiaowan.github.io/2019/10/31/Redis基本命令使用—list篇/</id>
    <published>2019-10-31T04:55:00.000Z</published>
    <updated>2019-10-31T17:23:56.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)</p></blockquote><p><strong>redis在线体验地址：<a href="http://try.redis.io/" target="_blank" rel="noopener">http://try.redis.io/</a></strong></p><h2 id="列表list"><a class="markdownIt-Anchor" href="#列表list"></a> 列表(List)</h2><blockquote><p>介绍:</p></blockquote><p>Redis的列表就是一个简单的字符串列表，我们可以往列表的头部和尾部添加新数据，要可以根据下标修改下标对应的值，列表是按照插入顺序有序的（按插入顺序倒序，类似于栈），并且列表可以出现重复数据。可以做消息队列，不过需要注意的是可能需要消息去重(后面有更牛的)。</p><blockquote><p>创建缓存</p></blockquote><ol><li><p>创建一个列表缓存</p><ul><li><p>命令格式：<code>lpush key value [value ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lpush c1 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">将<span class="number">1</span>~<span class="number">9</span>放入c1列表中，此时列表中存储顺序为<span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>向列表左侧新增值</p><ul><li><p>命令格式：<code>lpush key value [value ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lpush c1 <span class="number">10</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">将<span class="number">10</span>放入到c1列表头部，此时列表中存储顺序为<span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>向列表右侧新增值</p><ul><li><p>命令格式：<code>rpush key value [value ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpush c1 <span class="number">0</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">将<span class="number">0</span>放入到c1列表尾部，此时列表中存储顺序为<span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p><em><strong>以上两个命令很容易理解，lpush—&gt;left push, rpush—&gt;right push</strong></em></p><ol start="4"><li><p>在列表指定元素前/后插入数据</p><ul><li><p>命令格式：<code>linsert key BEFORE|AFTER pivot value</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) linsert c1 after <span class="number">0</span> <span class="number">-1</span></span><br><span class="line">---</span><br><span class="line">将<span class="number">-1</span>插入到元素值<span class="number">0</span>之前，此时列表中存储顺序为<span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)linsert c1 before <span class="number">0</span> <span class="number">1</span></span><br><span class="line">---</span><br><span class="line">将<span class="number">1</span>插入到元素值<span class="number">0</span>之前，此时列表中存储顺序为<span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>)linsert c1 before <span class="number">1</span> <span class="number">3</span></span><br><span class="line">---</span><br><span class="line">将<span class="number">3</span>插入到元素值<span class="number">1</span>之前，此时列表中存储顺序为<span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>)linsert c1 after <span class="number">1</span> <span class="number">4</span></span><br><span class="line">---</span><br><span class="line">将<span class="number">4</span>插入到元素值<span class="number">1</span>之后，此时列表中存储顺序为<span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>)linsert c1 after <span class="number">99</span> <span class="number">100</span></span><br><span class="line">---</span><br><span class="line">失败</span><br><span class="line"></span><br><span class="line">** 由<span class="number">3</span>、<span class="number">4</span>操作可以得出结论，当执行linsert指令时，列表是从头部开始进行遍历，直到查询到与pivot元素相同的值时停止，根据AFTER、BEFORE选择是插入到元素后还是元素前，所以划重点：若列表中存在pivot的重复元素，linsert只会以第一个遍历到的元素为准</span><br><span class="line">** 由<span class="number">5</span>可以得出结论，若指定的pivot元素不存在于列表中，则不进行任何设置</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过索引下标设置值</p><ul><li><p>命令格式：<code>lset key index value</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)<span class="keyword">lset</span> c1 <span class="number">0</span> <span class="number">21</span></span><br><span class="line">---</span><br><span class="line">将下标为<span class="number">0</span>的元素修改为<span class="number">21</span>，此时列表中存储顺序为<span class="number">21</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)<span class="keyword">lset</span> c1 <span class="number">99</span> <span class="number">99</span></span><br><span class="line">---</span><br><span class="line">ERR index out of range,说明通过<span class="keyword">lset</span>命令，不能越界修改元素</span><br></pre></td></tr></table></figure></li></ul></li><li><p>向已存在的列表头部添加元素</p><ul><li><p>命令格式：<code>lpushx key value [value ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)lpushx c1 <span class="number">22</span> <span class="number">23</span> <span class="number">24</span></span><br><span class="line">---</span><br><span class="line">将<span class="number">22</span>、<span class="number">23</span>、<span class="number">24</span>添加到列表c1头部，列表变为：<span class="number">24</span> <span class="number">23</span> <span class="number">22</span> <span class="number">21</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)lpushx c2 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">---</span><br><span class="line">因为列表c2不存在，所以设置失败，此时使用lrange查看c2会返回空</span><br></pre></td></tr></table></figure></li></ul></li><li><p>向已存在的列表尾部添加元素</p><ul><li><p>命令格式：<code>rpushx key value [value ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)rpushx c1 <span class="number">-2</span> <span class="number">-3</span></span><br><span class="line">---</span><br><span class="line">将<span class="number">-2</span>、<span class="number">-3</span>添加到列表c1尾部，列表变为：<span class="number">24</span> <span class="number">23</span> <span class="number">22</span> <span class="number">21</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">-3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>)rpushx c2 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">---</span><br><span class="line">因为列表c2不存在，所以设置失败，此时使用lrange查看c2会返回空</span><br></pre></td></tr></table></figure></li></ul></li><li><p>截取列表</p><ul><li><p>命令格式：<code>ltrim key start end</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ltrim c1 <span class="number">4</span> <span class="number">16</span></span><br><span class="line">---</span><br><span class="line">列表下标从<span class="number">0</span>开始，截取<span class="number">5</span>~<span class="number">17</span>位的元素，列表c1变为：<span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>查看缓存</p></blockquote><ol><li><p>查看列表内所有元素</p><ul><li><p>命令格式：<code>lrange key 0 -1</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lrange c1 0 -1</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">获取列表c1的所有元素</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看列表某一范围内的元素</p><ul><li><p>命令格式：<code>lrange key start end</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">lrange</span> <span class="string">c1</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">查看列表c1中弟2~4位上的元素</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>弹出列表头部元素</p><ul><li><p>命令格式：<code>lpop key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lpop c1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">弹出列表c1的头部元素<span class="number">9</span>，此时列表c1变为：<span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">0</span>，头部的<span class="number">9</span>已经没有了，是不是很适合做消息队列</span><br></pre></td></tr></table></figure></li></ul></li><li><p>弹出列表尾部元素</p><ul><li><p>命令格式：<code>rpop key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpop c1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">弹出c1的尾部元素<span class="number">0</span>，此时列表c1变为：<span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span>，尾部的<span class="number">0</span>已经没有了，是不是很适合做消息队列👀</span><br></pre></td></tr></table></figure></li></ul></li><li><p>弹出列表头部元素，若当前列表内无元素，则阻塞，直到获取到或达到超时时间</p><ul><li><p>命令格式：<code>blpop key [key ...] timeout</code>   timeout单位为***秒***</p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">blpop </span><span class="built_in">c1</span> <span class="built_in">c2</span> <span class="built_in">c3</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">弹出列表<span class="built_in">c1</span>或列表<span class="built_in">c2</span>/<span class="built_in">c3</span>的头部元素，只要<span class="built_in">c1</span>、<span class="built_in">c2</span>、<span class="built_in">c3</span>有一个列表中有元素被弹出，则结束阻塞</span><br><span class="line">若<span class="built_in">c1</span>、<span class="built_in">c2</span>、<span class="built_in">c3</span>均有元素，则返回第一个满足弹出条件的列表，然后结束阻塞</span><br></pre></td></tr></table></figure></li></ul></li><li><p>弹出列表尾部元素，若当前列表内无元素，则阻塞，直到获取到或达到超时时间</p><ul><li><p>命令格式：<code>brpop key [key ...] timeout</code>   timeout单位为***秒***</p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">blpop </span><span class="built_in">c1</span> <span class="built_in">c2</span> <span class="built_in">c3</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">弹出列表<span class="built_in">c1</span>或列表<span class="built_in">c2</span>/<span class="built_in">c3</span>的尾部元素，只要<span class="built_in">c1</span>、<span class="built_in">c2</span>、<span class="built_in">c3</span>有一个列表中有元素被弹出，则结束阻塞</span><br><span class="line">若<span class="built_in">c1</span>、<span class="built_in">c2</span>、<span class="built_in">c3</span>均有元素，则返回第一个满足弹出条件的列表，然后结束阻塞</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取列表指定位置的元素</p><ul><li><p>命令格式：<code>lindex key index</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1)lindex c1 2</span><br><span class="line">---</span><br><span class="line">返回列表c1中下标为2的元素，仅仅返回数据，不弹出，时间复杂度O(1)</span><br><span class="line"></span><br><span class="line">2)lindex c1 -1</span><br><span class="line">---</span><br><span class="line">返回列表最后一个元素。列表元素下标-1代表列表中最后一个元素，所以列表是可以通过负数下标从后往前遍历</span><br></pre></td></tr></table></figure></li></ul></li><li><p>弹出一个列表中的最后一个元素到另外一个列表头部，并返回这个元素——无阻塞</p><ul><li><p>命令格式：<code>rpoplpush source_key destination_key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">rpoplpush</span> <span class="string">c1</span> <span class="string">c2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">弹出列表c1的尾部元素插入到列表c2的头部，若c1为空，则返回nil，但不插入到c2中，是不是更适合做队列</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>弹出一个列表中的最后一个元素到另外一个列表头部，并返回这个元素——阻塞</p><ul><li><p>命令格式：<code>brpoplpush source_key destination_key timeout</code>    timeout单位为***秒***</p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">brpoplpush</span> <span class="string">c3</span> <span class="string">c2</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">弹出列表c3的尾部元素插入到列表c2的头部，若c3为空，则阻塞等到列表c3中有值，否则等到了10秒后结束阻塞返回nil，是不是更适合做阻塞队列</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>其他命令</p></blockquote><ol><li><p>删除指定范围内等于某个值的所有元素</p><ul><li><p>命令格式：<code>lrem key index element</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1)lrem c1 -2 3</span><br><span class="line">---</span><br><span class="line">移除列表c1中，从倒数第二个元素到列表头部范围内所有的3</span><br><span class="line"></span><br><span class="line">2)lrem c1 3 2</span><br><span class="line">---</span><br><span class="line">移除列表c1中，从第四位元素到尾部范围内所有的2</span><br><span class="line"></span><br><span class="line">3)lrem c1 0 1</span><br><span class="line">---</span><br><span class="line">移除列表c1中所有的1</span><br><span class="line"></span><br><span class="line">4)lrem c1 -1 4</span><br><span class="line">---</span><br><span class="line">移除列表c1中所有的4</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看列表长度</p><ul><li><p>命令格式：<code>llen key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">llen</span> <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">查看列表c1的总长度，若c1不存在，则返回0，不会报错，记住，若列表不存在也不会报错</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;redis在线体验地址：
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://luxiaowan.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基本命令使用::hash篇</title>
    <link href="http://luxiaowan.github.io/2019/10/30/Redis%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E2%80%94hash%E7%AF%87/"/>
    <id>http://luxiaowan.github.io/2019/10/30/Redis基本命令使用—hash篇/</id>
    <published>2019-10-30T15:55:00.000Z</published>
    <updated>2019-10-31T16:05:56.510Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)</p></blockquote><p><strong>redis在线体验地址：<a href="http://try.redis.io/" target="_blank" rel="noopener">http://try.redis.io/</a></strong></p><h2 id="哈希hash"><a class="markdownIt-Anchor" href="#哈希hash"></a> 哈希(Hash)</h2><blockquote><p>介绍:</p></blockquote><p>Redis hash 是一个存储多个键值对的映射表，适用于存储对象的属性，比如存储用户信息、用户Session信息等。在实际项目中使用的频率比较多，之前主要用于存储用户基本信息、用户临时订单信息、产品信息等。</p><blockquote><p>创建缓存</p></blockquote><ol><li><p>创建一个缓存</p><ul><li><p>命令格式：<code>hset key field value</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hset</span> <span class="string">cc</span> <span class="string">name</span> <span class="string">'cc'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">将cc的name属性的值设置为cc</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>批量创建缓存</p><ul><li><p>命令格式：<code>hmset key filed value [field value ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hmset</span> <span class="string">cc</span> <span class="string">name</span> <span class="string">'cc'</span> <span class="string">age</span> <span class="number">19</span> <span class="string">avatar</span> <span class="string">'a.png'</span> <span class="string">status</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">设置cc对象的name、age、avatar、status属性的值</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置一个key不存在field的value，若field已存在则不设置</p><ul><li><p>命令格式：<code>hsetnx key field value</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hsetnx</span> <span class="string">cc</span> <span class="string">name</span> <span class="string">'yy'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">若对象cc的name属性不存在，则设置cc的name属性值为yy</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>查看缓存</p></blockquote><ol><li><p>查看key下所有属性+值</p><ul><li><p>命令格式：<code>hgetall key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hgetall</span> <span class="string">cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">获取对象cc的所有属性，返回数据格式：</span></span><br><span class="line"> <span class="string">field1</span></span><br><span class="line"> <span class="string">value1</span></span><br><span class="line"> <span class="string">field2</span></span><br><span class="line"> <span class="string">value2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看key下所有的值</p><ul><li><p>命令格式：<code>hvals key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hvals</span> <span class="string">cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">返回cc对象的所有属性的值，仅返回值，不返回属性名称</span></span><br><span class="line"><span class="string">等同于</span> <span class="string">”hmget</span> <span class="string">key</span> <span class="string">所有field“</span> <span class="string">命令</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看key下所有的field名称</p><ul><li><p>命令格式：<code>hkeys key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hkeys</span> <span class="string">cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">返回对象cc的所有属性名</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看key的某一field的值</p><ul><li><p>命令格式：<code>hget key field</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hget</span> <span class="string">cc</span> <span class="string">name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">返回对象cc的name属性的值，若对象无此属性，则返回nil</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看key的多个field的值</p><ul><li><p>命令格式：<code>hmget key field [field ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hmget</span> <span class="string">cc</span> <span class="string">name</span> <span class="string">age</span> <span class="string">status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">返回对象cc的name、age、status属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>迭代对象的所有属性(适用于大对象)</p><ul><li><p>命令格式：<code>hscan key course [MATCH pattern] [COUNT num]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hscan cc <span class="number">0</span> MATCH *e COUNT <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看对象的属性数</p><ul><li><p>命令格式：<code>hlen key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hlen</span> <span class="string">cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">返回对象cc的属性数量</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>其他命令</p></blockquote><ol><li><p>删除一个/多个属性</p><ul><li><p>命令格式：<code>hdel key field [field ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hdel</span> <span class="string">cc</span> <span class="string">name</span> <span class="string">age</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">删除对象cc的name、age属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看对象属性是否存在</p><ul><li><p>命令格式：<code>hexists key field</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexists</span> <span class="string">cc</span> <span class="string">name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">对象cc若存在属性name，则返回1，不存在则返回0</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;redis在线体验地址：
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://luxiaowan.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis基本命令使用::string篇</title>
    <link href="http://luxiaowan.github.io/2019/10/29/Redis%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E2%80%94string%E7%AF%87/"/>
    <id>http://luxiaowan.github.io/2019/10/29/Redis基本命令使用—string篇/</id>
    <published>2019-10-29T15:55:00.000Z</published>
    <updated>2019-10-30T16:43:50.550Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)</p></blockquote><p><strong>redis在线体验地址：<a href="http://try.redis.io/" target="_blank" rel="noopener">http://try.redis.io/</a></strong></p><h2 id="字符串string"><a class="markdownIt-Anchor" href="#字符串string"></a> 字符串(String)</h2><blockquote><p>介绍:</p></blockquote><p>字符串是Redis中最基本的数据类型，数据以二进制的形式存储于内存中，所以Redis的字符串可以是任何形式的数据，比如JPEG图像、序列化的Ruby对象等。</p><p>字符串最大可存储512MB的数据，但一般一个字符串容量过大，会直接影响存储和查询的效率。字符串有两种编码方式：raw和embstr，根据字符串长度自动选择使用哪一种编码，目前最新版的长度是44个字节，字符串长度小于等于44个字节，则使用embstr编码，大于44个字节则使用raw编码，两种编码方式这里就不作详解，有兴趣的可以谷歌一下。</p><blockquote><p>创建缓存</p></blockquote><ol><li><p>创建一个缓存</p><ul><li><p>命令格式：<code>set key value</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">set</span> <span class="string">cc</span> <span class="string">'niubility'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">创建一个key为cc，值为niubility的缓存</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>批量创建缓存</p><ul><li><p>命令格式：<code>mset key value [key value ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mset</span> <span class="string">cc1</span> <span class="number">1</span> <span class="string">cc2</span> <span class="number">2</span> <span class="string">cc3</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">创建三个缓存，key:value分别为cc1:1,</span> <span class="attr">cc2:2,</span> <span class="attr">cc3:3</span></span><br></pre></td></tr></table></figure></li><li><p>命令格式：<code>msetnx key value [key value ...]</code></p><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">msetnx</span> <span class="string">cc1</span> <span class="number">11</span> <span class="string">cc2</span> <span class="number">22</span> <span class="string">cc5</span> <span class="number">5</span> <span class="string">cc6</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">此命令只会将尚不存在的key值创建到缓存中，已经存在的key则忽略</span></span><br><span class="line"><span class="string">*</span> <span class="string">cc1、cc2已存在于缓存中，所以不会创建/更新成功，cc5、cc6不存在于缓存中，会创建</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个带过期时间的缓存</p><ul><li><p>命令格式：<code>setex key time value</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">setex</span> <span class="string">cc1</span> <span class="number">10</span> <span class="number">234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">设置key:value为cc1:234且过期时间为10秒的缓存</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置一个不存在key的value，若key已存在则不设置</p><ul><li><p>命令格式：<code>setnx key value</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">setnx</span> <span class="string">cc5</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">若cc5的key不存在于缓存中，则创建key:value为cc5:12的缓存，否则不执行创建</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>组合创建一个缓存(缓存过期时间、是否覆盖)</p><ul><li><p>命令格式：<code>set key value [EX|PX time] [NX|XX]</code></p><blockquote><p>解析：</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   EX：表明过期时间为秒</span><br><span class="line">   </span><br><span class="line">PX：表明过期时间为毫秒</span><br><span class="line">   </span><br><span class="line">   NX：若<span class="built_in">key</span>不存在则执行，否则不执行，与XX相反</span><br><span class="line">   </span><br><span class="line">   XX：若<span class="built_in">key</span>存在则执行，否则不执行，与NX相反</span><br></pre></td></tr></table></figure></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">set</span> <span class="string">cc1</span> <span class="number">123</span> <span class="string">EX</span> <span class="number">20</span> <span class="string">XX</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line">  <span class="string">若cc1已存在则创建过期时间为20秒的key:value</span> <span class="string">=</span> <span class="attr">cc1:123</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>将key设置为新值的同时返回原值</p><ul><li><p>命令格式：<code>getset key value</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">getset</span> <span class="string">cc1</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">若key不存在，则返回nil</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>读取缓存</p></blockquote><ol><li><p>读取一个key的缓存值</p><ul><li><p>命令格式：<code>get key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">get</span> <span class="string">cc1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">读取key=cc1的值</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>批量读取一批数据</p><ul><li><p>命令格式：<code>mget key [key ...]</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget <span class="keyword">cc</span><span class="number">1</span> <span class="keyword">cc</span><span class="number">2</span> <span class="keyword">cc</span><span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>截取字符串并返回</p><ul><li><p>命令格式：<code>getrange key start end</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">getrange</span> <span class="string">cc1</span> <span class="number">1</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">字符串下标以0开始，若start超出字符串长度或key不存在，则返回空字符串</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>其他操作</p></blockquote><ol><li><p>将value加1( value必须为整数 )[ 可用于阅读量、点赞数等简单统计类的功能应用 ]</p><ul><li><p>命令格式：<code>incr key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">incr</span> <span class="string">cc1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">每次调用均对value进行+1操作</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>给value加上某个数( num必须为整数 )</p><ul><li><p>命令格式：<code>incrby key num</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">incrby</span> <span class="string">cc1</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">给cc1的值加上100</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>给value加上某个浮点数</p><ul><li><p>命令格式：<code>incrbyfloat key num</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrbyfloat cc1 <span class="number">0.2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>给value减1</p><ul><li><p>命令格式：<code>decr key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">decr</span> <span class="string">cc1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">每次调用均对value进行-1操作</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>给value减去某个数( num必须为整数 )</p><ul><li><p>命令格式：<code>descby key num</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">decrby</span> <span class="string">cc1</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">给cc1的值减去100</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看value的长度</p><ul><li><p>命令格式：<code>strlen key</code></p></li><li><blockquote><p>🌰</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strlen</span> cc1</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>目前先整理这些，都是一些基础的命令，随后再写一篇Java中使用Jedis操作字符串的随笔。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redis有6大基本类型，分别是字符串(String)、列表(List)、集合(set)、哈希结构(hash)、有序集合(zset)和基数(HyperLogLog)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;redis在线体验地址：
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://luxiaowan.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis数据在内存中是如何存储的</title>
    <link href="http://luxiaowan.github.io/2019/10/29/Redis%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E7%9A%84/"/>
    <id>http://luxiaowan.github.io/2019/10/29/Redis数据在内存中是如何存储的/</id>
    <published>2019-10-29T08:50:00.000Z</published>
    <updated>2019-10-29T15:02:17.269Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Redis" scheme="http://luxiaowan.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL索引什么时候用hash</title>
    <link href="http://luxiaowan.github.io/2019/10/28/MySQL%E7%B4%A2%E5%BC%95%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8hash/"/>
    <id>http://luxiaowan.github.io/2019/10/28/MySQL索引什么时候用hash/</id>
    <published>2019-10-28T11:06:00.000Z</published>
    <updated>2019-10-29T14:10:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL索引是在面试中常被问到的知识点，常用的两种索引方法有Hash和B+Tree，树的结构我们改天再扯，今天说收Hash。</p><blockquote><p>为什么使用hash</p></blockquote><p>Hash索引可以根据数据的hash值直接定位到索引数据的存储位置，就相当于我知道了数组的下标，然后根据下标去取数据，这个效率可以说是最高的了，使用hash就是为了如此。</p><blockquote><p>支持hash的存储引擎</p></blockquote><p>目前支持hash的引擎有MEMORY(这里需要谷歌)，其他的引擎都通过各自的方式去支持hash方法。如InnoDB有一套自适应hash算法，内部实现还是采用了BT的方式，可以理解为BT索引的索引</p><blockquote><p>InnoDB中hash索引支持的开启/关闭</p></blockquote><p>hash索引虽然非常快速，但是在InnoDB中确实支持的不是很好，并且索引的具体创建是由引擎决定的(创建后存在于内存中)，非DBA可控，所以一般情况下建议关闭hash支持，使用BT也能够满足性能要求。</p><p>​<code>set global innodb_adaptive_hash_index=off/on</code></p><blockquote><p>hash的使用场景</p></blockquote><p>hash使用场景比较局限</p><ol><li>hash索引仅适用于‘=’、‘&lt;=&gt;’和‘in’操作，所以hash仅仅适用于精确查找。</li><li>不适用于查询排序，因为hash后的数据并不会像原数据一样保持有序。</li><li>不适用于模糊查询，也就是不能使用like关键字。</li><li>既然不支持排序，也肯定不支持范围查询咯</li></ol><blockquote><p>解决hash冲突</p></blockquote><p>不论hash的算法多么精确，当数据量大的时候都有可能发生hash碰撞，解决hash碰撞的方法有很多，比如再hash、链表叠加等，MySQL采用的是链表叠加的方式，也就是类似于HashMap解决hash碰撞的方法。所以在发生hash碰撞过多的情况下，使用hash索引会影响查询性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL索引是在面试中常被问到的知识点，常用的两种索引方法有Hash和B+Tree，树的结构我们改天再扯，今天说收Hash。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么使用hash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hash索引可以根据数据的hash值直接定位
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-Session和Redis实现Session共享</title>
    <link href="http://luxiaowan.github.io/2019/10/24/Spring-Session%E5%92%8CRedis%E5%AE%9E%E7%8E%B0Session%E5%85%B1%E4%BA%AB/"/>
    <id>http://luxiaowan.github.io/2019/10/24/Spring-Session和Redis实现Session共享/</id>
    <published>2019-10-24T11:30:00.000Z</published>
    <updated>2019-10-24T15:18:45.220Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需求</p><blockquote><p>现在大部分服务都以集群负载均衡的方式部署，几乎很难再遇到单点部署的项目，因为大家都要保证最基本的HA，说到HA，第一要考虑的就是各系统之间的Session共享的问题，如何解决呢？负载均衡当前使用Nginx</p></blockquote></blockquote><hr><blockquote><p>分析</p><blockquote><p><img src="/images/image-20191024193415981.png" alt></p></blockquote><blockquote><ol><li>不同的POD之间如果需要达到数据共享的目的，那么则需要使用同一个存储媒介，一开始想到使用MySQL来存储登录session，但是每次请求都去MySQL中查询数据，开销还是非常大的；然后最近使用MongoDB比较嗨，想着用MongoDB，但是MongoDB查询起来也不方便，况且我们这个Session也不是量级很大的数据集，最终采用了内存级的Redis来解决这个问题。</li><li>使用Redis的基本操作是将jsessionId为key，用户信息为value，使用jedis或者redisTemplate来操作Redis的读写行为。但是这种方式侵入了业务代码，并不是最优解，查了部分资料之后，发现spring-session.jar包中有一个非常有特色的注解@EnableRedisHttpSession，可以不需要侵入业务代码就能使用redis实现session共享的问题。</li></ol></blockquote></blockquote><ul><li>我们看一下@EnableRedisHttpSession的源码是怎么说的：</li></ul><p><img src="/images/image-20191024223839113.png" alt="image-20191024223839113"></p><blockquote><p>将此注释添加到一个单独的类上，该类必须加上@Configuration注解。使用方式在注释里也给出了demo代码。</p></blockquote><hr><blockquote><p>实现</p></blockquote><ol><li>修改pom.xml文件，引入我们需要的jar包</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-session&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改application.yml文件，配置redis信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.database=<span class="number">0</span></span><br><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=<span class="number">6379</span></span><br><span class="line">spring.redis.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisHttpSessionConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，我们使用Redis实现Session共享的所有配置和代码都已经写完了，可以看到我们没有侵入到任何业务代码中，从头到尾也很简单。</p><blockquote><p>扩展</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGemFireHttpSession</span></span><br><span class="line"><span class="meta">@EnableSpringHttpSession</span></span><br><span class="line"><span class="meta">@EnableMongoHttpSession</span></span><br><span class="line"><span class="meta">@EnableJdbcHttpSession</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;需求&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在大部分服务都以集群负载均衡的方式部署，几乎很难再遇到单点部署的项目，因为大家都要保证最基本的HA，说到HA，第一要考虑的就是各系统之间的Session共享的问题，如何解决呢？负载均衡当前使用Ngin
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://luxiaowan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>Java简单操作MongoDB</title>
    <link href="http://luxiaowan.github.io/2019/10/24/Java%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9CMongoDB/"/>
    <id>http://luxiaowan.github.io/2019/10/24/Java简单操作MongoDB/</id>
    <published>2019-10-24T02:16:00.000Z</published>
    <updated>2019-10-24T13:20:12.762Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前面已经掌握了mongo最基本的一些命令，对各个命令也都实操过，理解各命令的意思，也对mongo有了最基本的理解，但大部分猿还是想使用Java去连接mongo，串串也不例外</p></blockquote><ul><li><p>在pom.xml中加入mongodb-java-driver.jar的依赖</p><ul><li><p>Maven项目依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mongodb&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.0.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot项目依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>连接mongo</p><ul><li><p>认证连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建验证信息，根据加密方式选择MongoCredential内对应的加密方式</span></span><br><span class="line">List&lt;MongoCredential&gt; credentials = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">MongoCredential credential = MongoCredential.createCredential(<span class="string">"admin"</span>, <span class="string">"test1"</span>, <span class="string">"admin"</span>.toCharArray());</span><br><span class="line">credentials.add(credential);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建mongo服务地址</span></span><br><span class="line">ServerAddress serverAddress = <span class="keyword">new</span> ServerAddress(<span class="string">"localhost"</span>, <span class="number">27017</span>);</span><br><span class="line">MongoClient mongoClient = <span class="keyword">new</span> MongoClient(serverAddress, credentials);</span><br></pre></td></tr></table></figure></li><li><p>无需认证连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MongoClient client = <span class="keyword">new</span> MongoClient(<span class="string">"localhost"</span>, <span class="number">27017</span>);</span><br></pre></td></tr></table></figure><p>然后就可以通过MongoClient的实例方法对mongo进行相关操作了</p></li></ul></li><li><p>创建数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MongoDatabase db = client.getDatabase(<span class="string">"test1"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>mongo特性是不管数据库事先是否存在，都可以正常创建数据库连接，不会像MySQL一样报错，连接成功后，在mongo服务器上执行<code>show dbs</code>，会发现仍然查不到我们连接的这个数据库，这是正常情况，只有在数据库中有数据的时候，才会查得出来，<code>client.getDatabase(&quot;test&quot;) === use test命令</code></p></blockquote></li><li><p>创建集合</p><ul><li>使用数据库连接实例方法创建一个空的集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(<span class="string">"base_info"</span>);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  命令：db.createCollection(<span class="string">"base_info"</span>)</span><br></pre></td></tr></table></figure><ul><li>直接向创建的集合中插入数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MongoCollection&lt;Document&gt; collection = db.getCollection(<span class="string">"base_info"</span>);</span><br><span class="line">collection.insertOne(<span class="keyword">new</span> Document(<span class="string">"name"</span>, <span class="string">"lxl"</span>));</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  命令：db.base_info.insert(&#123;<span class="string">"name"</span>: <span class="string">"lxl"</span>&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>以上两种方式均可创建一个集合，区别在于第一种方式创建的是空集合，</p></blockquote></li><li><p>删除集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collection.drop();</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  命令：db.base_info.drop()</span><br></pre></td></tr></table></figure></li></ul><h4 id="对集合的crud"><a class="markdownIt-Anchor" href="#对集合的crud"></a> 对集合的CRUD</h4><ul><li><p>新增数据</p><ul><li><p>单条新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Document document = <span class="keyword">new</span> Document().append(<span class="string">"name"</span>,<span class="string">"cc"</span>).append(<span class="string">"age"</span>,<span class="number">30</span>).append(<span class="string">"location"</span>,<span class="string">"SZ"</span>);</span><br><span class="line">collection.insertOne(document);</span><br></pre></td></tr></table></figure></li><li><p>批量新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Document&gt; documentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  Document doc = <span class="keyword">new</span> Document().append(<span class="string">"name"</span>, <span class="string">"cc"</span> + i).append(<span class="string">"age"</span>, <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>)).append(<span class="string">"location"</span>, <span class="string">"SZ"</span>);</span><br><span class="line">  documentList.add(doc);</span><br><span class="line">&#125;</span><br><span class="line">collection.insertMany(documentList);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>insertOne(Document)方法每次插入一条数据</p><p>insertMany(List<document>)方法批量插入数据，并且可以通过参数InsertManyOptions设置是否排序</document></p></blockquote></li><li><p>删除数据</p><ul><li>删除第一条匹配的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.eq(<span class="string">"age"</span>, <span class="number">99</span>);</span><br><span class="line">collection.deleteOne(condition);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  命令：db.base_info.deleteOne(&#123;<span class="string">"age"</span>: <span class="number">99</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>删除所有匹配数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.eq(<span class="string">"age"</span>, <span class="number">99</span>);</span><br><span class="line">collection.deleteMany(condition);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">  命令：db.base_info.deleteMany(&#123;<span class="string">"ag"</span>: <span class="number">99</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><ul><li><p>查询返回第一条匹配的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.eq(<span class="string">"age"</span>, <span class="number">16</span>);</span><br><span class="line">FindIterable&lt;Document&gt; vals = collection.find(condition);</span><br><span class="line">Document document = vals.first();</span><br><span class="line">System.out.println(document.toJson());</span><br></pre></td></tr></table></figure><blockquote><p>通过调用FindIterable的实例方法first()取第一条数据</p></blockquote></li><li><p>查询返回所有匹配数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.eq(<span class="string">"age"</span>, <span class="number">16</span>);</span><br><span class="line">FindIterable&lt;Document&gt; vals = collection.find(condition);</span><br><span class="line"><span class="keyword">for</span> (Document val : vals) &#123;</span><br><span class="line">  System.out.println(val.toJson());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>find()方法返回所有匹配数据</p></blockquote></li><li><p>分页查询</p><p>分页查询是我们日常开发中经常用到的功能，尤其是mongo这种量级较大的存储，分页使用limit()和skip()两个方法来实现，limit指定查询的条数，skip进行分页，参数为从第几条开始，需要使用当前页码和分页条数进行计算(pageNo - 1) * pageSize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.lt(<span class="string">"age"</span>, <span class="number">2</span>);</span><br><span class="line">FindIterable&lt;Document&gt; vals = collection.find(condition).limit(<span class="number">10</span>).skip(<span class="number">10</span>).sort(Sorts.descending(<span class="string">"age"</span>));</span><br><span class="line"><span class="keyword">for</span> (Document val : vals) &#123;</span><br><span class="line">  System.out.println(val.toJson());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>limit(10): 每页取10条数据</p><p>skip(10): 从第11条开始查询，起始位置为0</p><p>sort(Sorts.descending(“age”)): 以列age倒序</p><blockquote><p>对应MySQL：select * from base_info where age &lt; 2 order by age desc limit 7, 7</p></blockquote></blockquote></li></ul></li><li><p>更新数据</p><ul><li><p>更新第一条匹配数据中的某些字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.eq(<span class="string">"age"</span>, <span class="number">15</span>);</span><br><span class="line">Document document = <span class="keyword">new</span> Document(<span class="string">"$set"</span>, <span class="keyword">new</span> Document(<span class="string">"location"</span>, <span class="string">"XZ"</span>));</span><br><span class="line">collection.updateOne(condition, document);</span><br></pre></td></tr></table></figure><blockquote><p>注意这里有一个<code>$set</code>，这个指令是必须的，相对应的指令还有<code>$inc</code></p></blockquote></li><li><p>替换第一条匹配数据全部内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.eq(<span class="string">"age"</span>, <span class="number">15</span>);</span><br><span class="line">Document document = <span class="keyword">new</span> Document(<span class="string">"location"</span>, <span class="string">"XZ"</span>);</span><br><span class="line">collection.updateOne(condition, document);</span><br></pre></td></tr></table></figure><blockquote><p>没有<code>$set</code>指令,则表示使用参数document替换掉第一条匹配到的数据</p></blockquote></li><li><p>第一条匹配的数据中指定字段数量+1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.eq(<span class="string">"location"</span>, <span class="string">"XZ"</span>);</span><br><span class="line">Document document = <span class="keyword">new</span> Document(<span class="string">"$inc"</span>, <span class="keyword">new</span> Document(<span class="string">"age"</span>, <span class="number">1</span>));</span><br><span class="line">collection.updateOne(condition, document);</span><br></pre></td></tr></table></figure></li><li><p>更新所有匹配数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bson condition = Filters.eq(<span class="string">"age"</span>, <span class="number">15</span>);</span><br><span class="line">Document document = <span class="keyword">new</span> Document(<span class="string">"$set"</span>, <span class="keyword">new</span> Document(<span class="string">"location"</span>, <span class="string">"XZ"</span>));</span><br><span class="line">collection.updateMany(condition, document);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="全部代码"><a class="markdownIt-Anchor" href="#全部代码"></a> 全部代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> org.bson.conversions.Bson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.FindIterable;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.model.Filters;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.model.Sorts;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: cc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConnectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MongoClient client = <span class="keyword">new</span> MongoClient(<span class="string">"localhost"</span>, <span class="number">27017</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            // 创建验证信息，根据加密方式选择MongoCredential内对应的加密方式</span></span><br><span class="line"><span class="comment">            List&lt;MongoCredential&gt; credentials = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">            MongoCredential credential = MongoCredential.createCredential("admin", "test", "".toCharArray());</span></span><br><span class="line"><span class="comment">            credentials.add(credential);</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            // 创建mongo服务地址</span></span><br><span class="line"><span class="comment">            ServerAddress serverAddress = new ServerAddress("localhost", 27017);</span></span><br><span class="line"><span class="comment">            MongoClient mongoClient = new MongoClient(serverAddress, credentials);*/</span></span><br><span class="line"></span><br><span class="line">            MongoDatabase db = client.getDatabase(<span class="string">"test1"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建集合</span></span><br><span class="line">            <span class="comment">// 方式1</span></span><br><span class="line">            <span class="comment">// db.createCollection("base_info2");</span></span><br><span class="line">            <span class="comment">// 方式2</span></span><br><span class="line">            MongoCollection&lt;Document&gt; collection = db.getCollection(<span class="string">"base_info"</span>);</span><br><span class="line">            <span class="comment">// collection.insertOne(new Document("name", "lxl"));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除集合</span></span><br><span class="line">            <span class="comment">// collection.drop();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新增数据</span></span><br><span class="line">            <span class="comment">// 单条新增</span></span><br><span class="line">            <span class="comment">/*Document document = new Document().append("name", "cc").append("age", 30).append("location", "SZ");</span></span><br><span class="line"><span class="comment">            collection.insertOne(document);</span></span><br><span class="line"><span class="comment">            // 批量新增</span></span><br><span class="line"><span class="comment">            List&lt;Document&gt; documentList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">            for (int i = 0; i &lt; 1000; i++) &#123;</span></span><br><span class="line"><span class="comment">                Document doc = new Document().append("name", "cc" + i).append("age", new Random().nextInt(100))</span></span><br><span class="line"><span class="comment">                        .append("location", "SZ");</span></span><br><span class="line"><span class="comment">                documentList.add(doc);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            collection.insertMany(documentList);*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除数据</span></span><br><span class="line">            <span class="comment">// 删除第一条匹配数据</span></span><br><span class="line">            <span class="comment">/*Bson condition = Filters.eq("age", 99);</span></span><br><span class="line"><span class="comment">            collection.deleteOne(condition);</span></span><br><span class="line"><span class="comment">            // 删除所有匹配数据</span></span><br><span class="line"><span class="comment">            collection.deleteMany(condition);*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 修改数据</span></span><br><span class="line">            <span class="comment">// 修改第一条匹配数据</span></span><br><span class="line">            <span class="comment">/*Bson condition = Filters.eq("age", 15);</span></span><br><span class="line"><span class="comment">            Document document = new Document("$set", new Document("location", "XZ"));</span></span><br><span class="line"><span class="comment">            collection.updateOne(condition, document);</span></span><br><span class="line"><span class="comment">            collection.updateMany(condition, document);*/</span></span><br><span class="line">            <span class="comment">// 年龄+1</span></span><br><span class="line">            <span class="comment">/*Bson condition = Filters.eq("location", "XZ");</span></span><br><span class="line"><span class="comment">            Document document = new Document("$inc", new Document("age", 1));</span></span><br><span class="line"><span class="comment">            collection.updateOne(condition, document);*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询返回第一条匹配数据</span></span><br><span class="line">            Bson condition = Filters.lt(<span class="string">"age"</span>, <span class="number">2</span>);</span><br><span class="line">            FindIterable&lt;Document&gt; vals = collection.find(condition).sort(Sorts.descending(<span class="string">"age"</span>)).limit(<span class="number">7</span>).skip(<span class="number">7</span>);</span><br><span class="line">            <span class="comment">// Document document = vals.first();</span></span><br><span class="line">            <span class="comment">// System.out.println(document.toJson());</span></span><br><span class="line">            <span class="keyword">for</span> (Document val : vals) &#123;</span><br><span class="line">                System.out.println(val.toJson());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前面已经掌握了mongo最基本的一些命令，对各个命令也都实操过，理解各命令的意思，也对mongo有了最基本的理解，但大部分猿还是想使用Java去连接mongo，串串也不例外&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在pom.x
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://luxiaowan.github.io/categories/MongoDB/"/>
    
    
      <category term="Java与MongoDB" scheme="http://luxiaowan.github.io/tags/Java%E4%B8%8EMongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB监控、分片及备份恢复</title>
    <link href="http://luxiaowan.github.io/2019/10/24/MongoDB%E7%9B%91%E6%8E%A7%E3%80%81%E5%88%86%E7%89%87%E5%8F%8A%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/"/>
    <id>http://luxiaowan.github.io/2019/10/24/MongoDB监控、分片及备份恢复/</id>
    <published>2019-10-23T16:00:00.000Z</published>
    <updated>2019-10-24T13:20:12.764Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://luxiaowan.github.io/categories/MongoDB/"/>
    
    
      <category term="监控" scheme="http://luxiaowan.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基础应用</title>
    <link href="http://luxiaowan.github.io/2019/10/23/MongoDB%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/"/>
    <id>http://luxiaowan.github.io/2019/10/23/MongoDB基础应用/</id>
    <published>2019-10-22T16:00:00.000Z</published>
    <updated>2019-10-24T13:20:12.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h3><blockquote><p>说明：索引是为了加快查询速度，可以对集合中的一列或多列设置索引。</p><p>– 无索引：扫描整个集合的文档，查找符合条件的文档</p><p>– 有索引：查找索引，根据索引取出文档数据</p></blockquote><ol><li><p>创建索引</p><p><code>db.&lt;collection_name&gt;.createIndex(keys, option)</code></p><blockquote><p>栗子：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 单索引</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.user</span><span class="selector-class">.createIndex</span>(&#123;<span class="attribute">age</span>:-<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">age</span>:索引列名</span><br><span class="line"><span class="selector-tag">-1</span>:倒序索引</span><br><span class="line">1:正序索引</span><br><span class="line"></span><br><span class="line">2. 多索引(复合索引)</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.user</span><span class="selector-class">.createIndex</span>(&#123;<span class="attribute">age</span>:<span class="number">1</span>, gender:-<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>可选参数</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>background</td><td>Boolean</td><td>指定创建索引时是否阻塞集合的其他操作。true:后台执行，不阻塞；false:阻塞，默认</td></tr><tr><td>unique</td><td>Boolean</td><td>指定索引是否为唯一索引。true:唯一索引；false:不唯一，默认</td></tr><tr><td>name</td><td>String</td><td>索引名称，默认为字段名+索引顺序</td></tr><tr><td>v</td><td>index<br>version</td><td>索引版本号，默认为当前mongo的版本号</td></tr><tr><td>weights</td><td>Integer</td><td>1~99999之间，值越大权重越大</td></tr><tr><td>expireAfterSeconds</td><td>Integer</td><td>指定集合生存时间。秒级，TTL</td></tr><tr><td>sparse</td><td>Boolean</td><td>指定是否忽略不存在的字段。true:不查出不包含查询字段的文档；false:查询所有文档，默认</td></tr></tbody></table><blockquote><p>栗子：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.create<span class="constructor">Index(&#123;<span class="params">name</span>:1&#125;, &#123;<span class="params">background</span>: <span class="params">true</span>, <span class="params">unique</span>: <span class="params">true</span>, <span class="params">name</span>: <span class="string">"idx_user_name"</span>, <span class="params">v</span>: 1, <span class="params">weights</span>: 99, <span class="params">sparse</span>: <span class="params">true</span>&#125;)</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; ---</span><br><span class="line">&gt; 后台不阻塞集合的方式创建一个name列正序,版本号为<span class="number">1</span>,权重<span class="number">99</span>,忽略无name字段的文档的唯一索引idx_user_name</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>查看所有索引</p><p><code>db.&lt;collection_name&gt;.getIndexes()</code></p><blockquote><p>栗子：</p><p><code>db.user.getIndexes()</code></p></blockquote></li><li><p>重建索引</p><ul><li><p>方法1：<code>db.&lt;collection_name&gt;.reIndex()</code></p></li><li><p>方法2：先删除原索引，然后再创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="tag">&lt;<span class="name">collection_name</span>&gt;</span>.dropIndex(<span class="tag">&lt;<span class="name">idx_name</span>&gt;</span>)</span><br><span class="line">db.<span class="tag">&lt;<span class="name">collection_name</span>&gt;</span>.createIndex(...)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除索引</p><ul><li><p>删除指定名称的索引：</p><p><code>db.user.dropIndex(&lt;idx_name&gt;)</code></p></li><li><p>删除集合中所有索引</p><p><code>db.user.dropIndexes()</code></p><blockquote><p>说明：只会删除自建的索引，集合中_id列的索引不会被删除</p></blockquote></li></ul></li></ol><hr><h3 id="聚合查询"><a class="markdownIt-Anchor" href="#聚合查询"></a> 聚合查询</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">创建集合并插入数据：</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.agg</span><span class="selector-class">.save</span>([&#123;</span><br><span class="line">   <span class="attribute">title</span>: <span class="string">'MongoDB Overview'</span>, </span><br><span class="line">   <span class="attribute">description</span>: <span class="string">'MongoDB is no sql database'</span>,</span><br><span class="line">   <span class="attribute">by_user</span>: <span class="string">'runoob.com'</span>,</span><br><span class="line">   <span class="attribute">url</span>: <span class="string">'http://www.runoob.com'</span>,</span><br><span class="line">   <span class="attribute">tags</span>: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">   <span class="attribute">likes</span>: <span class="number">100</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attribute">title</span>: <span class="string">'NoSQL Overview'</span>, </span><br><span class="line">   <span class="attribute">description</span>: <span class="string">'No sql database is very fast'</span>,</span><br><span class="line">   <span class="attribute">by_user</span>: <span class="string">'runoob.com'</span>,</span><br><span class="line">   <span class="attribute">url</span>: <span class="string">'http://www.runoob.com'</span>,</span><br><span class="line">   <span class="attribute">tags</span>: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">   <span class="attribute">likes</span>: <span class="number">10</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attribute">title</span>: <span class="string">'Neo4j Overview'</span>, </span><br><span class="line">   <span class="attribute">description</span>: <span class="string">'Neo4j is no sql database'</span>,</span><br><span class="line">   <span class="attribute">by_user</span>: <span class="string">'Neo4j'</span>,</span><br><span class="line">   <span class="attribute">url</span>: <span class="string">'http://www.neo4j.com'</span>,</span><br><span class="line">   <span class="attribute">tags</span>: [<span class="string">'neo4j'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">   <span class="attribute">likes</span>: <span class="number">750</span></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><blockquote><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.&lt;collection_name&gt;.aggregate(condition)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ---</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> condition:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [&#123;<span class="variable">$group</span>:&#123;_id:<span class="string">"$&lt;key&gt;"</span>, num_tutorial:&#123;$&lt;fun_expression&gt;:<span class="string">"$&lt;key&gt;"</span>&#125;&#125;&#125;]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="variable">$group</span>:一个组</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> _id:组合列，类同于MySQL的group by后面的字段，默认_id的列会在查询结果中显示</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> num_tutorial:输出的列名</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> $&lt;fun_expression&gt;:聚合表达式</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> $&lt;key&gt;:运算的列名</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>关键字：aggregate</p><p>说明：聚合查询就是求和、最大、最小、最前、最后、平均数的统称，类似于MySQL的count()、sum()、avg()</p></blockquote><blockquote><p>栗子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.aggregate([&#123;<span class="variable">$group</span>: <span class="variable">$&#123;_id:"$gender", num_tutorial:&#123;$sum:1&#125;</span>&#125;&#125;])</span><br><span class="line">&gt; </span><br><span class="line">&gt; ---</span><br><span class="line">&gt; 等同于MySQL：select gender, count(1) <span class="keyword">from</span><span class="built_in"> user group </span>by gender</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li>聚合表达式</li></ol><table><thead><tr><th>表达式</th><th>描述</th><th>案例</th></tr></thead><tbody><tr><td>$sum</td><td>计算总和</td><td><code>db.agg.aggregate([{$group:{_id:&quot;$by_user&quot;, num_tutorial:{$sum:&quot;$likes&quot;}}}])</code><br>—<br>等同于MySQL：<code>select by_user, sum(likes) from agg group by by_user</code></td></tr><tr><td>$avg</td><td>计算平均值</td><td><code>db.agg.aggregate([{$group:{_id:&quot;$by_user&quot;, num_tutorial:{$avg:&quot;$likes&quot;}}}])</code><br>—<br>等同于MySQL：<code>select by_user, avg(likes) from agg group by by_user</code></td></tr><tr><td>$min</td><td>获取集合中指定列的最小值记录</td><td><code>db.agg.aggregate([{$group:{_id:&quot;$by_user&quot;, num_tutorial:{$min:&quot;$like&quot;}}}])</code><br>—<br>等同于MySQL：<code>select by_user, min(likes) from agg group by by_user</code></td></tr><tr><td>$max</td><td>获取集合中指定列的最大值记录</td><td><code>db.agg.aggregate([{$group:{_id:&quot;$by_user&quot;, num_tutorial:{$max:&quot;$likes&quot;}}}])</code><br>—<br>等同于MySQL：<code>select by_user, max(likes) from agg group by by_user</code></td></tr><tr><td>$push</td><td>在结果文档中插入值到数组</td><td><code>db.agg.aggregate([{$group:{_id:&quot;$by_user&quot;, num_tutorial:{$push:&quot;$url&quot;}}}])</code><br>—<br>等同于MySQL：查出所有数据，然后取字段url写入同一个列表中，url不去重，然后输出</td></tr><tr><td>$addToSet</td><td>在结果文档中插入值到一个数组中，但不创建副本</td><td><code>db.agg.aggregate([{$group:{_id:&quot;$by_user&quot;, num_tutorial:{$addToSet:&quot;$url&quot;}}}])</code><br>—<br>等同于MySQL：查出所有数据，然后取字段url写入同一个列表中，url去重，然后输出</td></tr><tr><td>$first</td><td>根据资源文档的排序获取第一个文档数据</td><td><code>db.agg.aggregate([{$group:{_id:&quot;$by_user&quot;, num_tutorial:{$first:&quot;$title&quot;}}}])</code></td></tr><tr><td>$last</td><td>根据资源文档的排序获取最后一个文档数据</td><td><code>db.agg.aggregate([{$group:{_id:&quot;$by_user&quot;, num_tutorial:{$last:&quot;$title&quot;}}}])</code></td></tr></tbody></table><hr><h3 id="管道函数"><a class="markdownIt-Anchor" href="#管道函数"></a> 管道函数</h3><blockquote><p>说明：管道函数类似于Linux系统中的管道操作，将上一步的运算结果作为下一步的输入值，最终达到理想计算结果的运算方式</p></blockquote><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>$project</td><td>指定需要输出的列，默认显示_id，格式：{$project:{by_user:1, title:1, url:1, _id:0<code>不显示id</code>}},</td></tr><tr><td>$limit</td><td>限制查询返回的文档数，格式：{$limit: 1},只返回一个文档</td></tr><tr><td>$skip</td><td>跳过指定数量的文档，返回之后的所有文档，格式：{$skip: 1},从第二个文档开始输出</td></tr><tr><td>$match</td><td>条件筛选，格式：{<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;}&#039;, got &#039;EOF&#039; at end of input: …atch: {likes: {">match: {likes: {</span>gte: 10}}}</td></tr><tr><td>$group</td><td>聚合条件，格式：{<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;}&#039;, got &#039;EOF&#039; at end of input: group: {_id: &quot;">group: {_id: &quot;</span>by_user&quot;, count: {$sum: -1}}}</td></tr><tr><td>$sort</td><td>排序，格式：{$sort: {likes: -1}}，-1:倒序; 1:正序</td></tr><tr><td>$unwind</td><td>将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值</td></tr><tr><td>$geoNear</td><td>输出接近某一地理位置的有序文档。</td></tr></tbody></table><blockquote><p>栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.agg.aggregate(&#123;<span class="variable">$match</span>: &#123;likes: &#123;<span class="variable">$gte</span>: 10&#125;&#125;&#125;, &#123; <span class="variable">$project</span>: &#123;_id: 0, title: 1, by_user: 1, likes: 1&#125;&#125;, &#123;<span class="variable">$limit</span>: 5&#125;, &#123;<span class="variable">$skip</span>: 1&#125;, &#123;<span class="variable">$sort</span>: &#123;likes: -1&#125;&#125;)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ---</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 等同于MySQL: </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select title, by_user, likes from agg <span class="built_in">where</span> likes &gt;= 10 order by likes desc <span class="built_in">limit</span> 1,5</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;索引&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#索引&quot;&gt;&lt;/a&gt; 索引&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：索引是为了加快查询速度，可以对集合中的一列或多列设置索引。&lt;/p&gt;
&lt;p&gt;– 无索引：扫描整个集合的文档，查找符
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://luxiaowan.github.io/categories/MongoDB/"/>
    
    
      <category term="基础应用" scheme="http://luxiaowan.github.io/tags/%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB连接报错java.lang.NoSuchFieldError ACKNOWLEDGED</title>
    <link href="http://luxiaowan.github.io/2019/10/23/MongoDB%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99java.lang.NoSuchFieldError-ACKNOWLEDGED/"/>
    <id>http://luxiaowan.github.io/2019/10/23/MongoDB连接报错java.lang.NoSuchFieldError-ACKNOWLEDGED/</id>
    <published>2019-10-22T16:00:00.000Z</published>
    <updated>2019-10-24T13:20:12.764Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>BUG描述</p></blockquote><p>使用SpringBoot整合MongoDB时，正要运行代码连接mongo，就赤红赤红的报了个错：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.NoSuchFieldError</span>: ACKNOWLEDGED</span><br><span class="line">at com<span class="selector-class">.mongodb</span><span class="selector-class">.MongoClientOptions</span><span class="variable">$Builder</span>.&lt;init&gt;(MongoClientOptions<span class="selector-class">.java</span>:<span class="number">960</span>)</span><br><span class="line">at com<span class="selector-class">.mongodb</span><span class="selector-class">.MongoClient</span>.&lt;init&gt;(MongoClient<span class="selector-class">.java</span>:<span class="number">155</span>)</span><br><span class="line">at com<span class="selector-class">.mongodb</span><span class="selector-class">.MongoClient</span>.&lt;init&gt;(MongoClient<span class="selector-class">.java</span>:<span class="number">145</span>)</span><br><span class="line">at com<span class="selector-class">.example</span><span class="selector-class">.demo</span><span class="selector-class">.mongo</span><span class="selector-class">.MongoConnectTest</span><span class="selector-class">.main</span>(MongoConnectTest<span class="selector-class">.java</span>:<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p>这一下就傻眼了，对于刚接触mongo的人来说，是很懵圈的，大脑知识库中没有这个异常信息的解决办法，只能谷歌了，没想到有那么多人遇到过这个问题</p><hr><blockquote><p>BUG解决</p></blockquote><p>在Stack Overflow上找到一个帖子：</p><blockquote><p><a href="https://stackoverflow.com/questions/13593614/mongodb-java-lang-nosuchfielderror" target="_blank" rel="noopener">https://stackoverflow.com/questions/13593614/mongodb-java-lang-nosuchfielderror</a></p></blockquote><p>其中jyemin的回答可以说是直击要害了，顺利的解决了这个问题，我把截图贴上，以防帖子被删</p><blockquote><blockquote><p><img src="/images/image-20191023182806521.png" alt="image-20191023182806521"></p></blockquote></blockquote><p><strong>其实就是在工程中引入了多个版本不同的mongo-java-driver，所以导致程序混乱，只要保留自己真正使用的那个版本，其他的都删除即可</strong></p><blockquote><p>我的配置：</p><blockquote><p><img src="/images/image-20191023183034949.png" alt="image-20191023183034949"></p></blockquote><p>将2.7.1版本的依赖删除就可以正常运行了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;BUG描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用SpringBoot整合MongoDB时，正要运行代码连接mongo，就赤红赤红的报了个错：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://luxiaowan.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB错误记录" scheme="http://luxiaowan.github.io/tags/MongoDB%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基本指令</title>
    <link href="http://luxiaowan.github.io/2019/10/23/MongoDB%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
    <id>http://luxiaowan.github.io/2019/10/23/MongoDB基本指令/</id>
    <published>2019-10-22T16:00:00.000Z</published>
    <updated>2019-10-24T13:20:12.763Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>查看所有的db</p><p><code>show dbs</code></p></li><li><p>切换db</p><p><code>user &lt;db_name&gt;</code></p></li><li><p>查看当前所在db名称</p><p><code>db</code></p></li><li><p>删除db**(必须在要删除的db中操作)**</p><p><code>db.dropDatabase()</code></p></li><li><p>查看db下所有的集合</p><p><code>show tables</code></p><p><code>show collections</code></p></li><li><p>创建集合</p><ul><li><code>db.createCollection(&quot;abc&quot;)</code></li><li><code>db.createCollection(&quot;def&quot;, {capped: true, autoIndexId: true, size: 1024, max: 100})</code></li><li>往一张不存在的集合中插入一条数据，会自动创建集合<ul><li><code>db.test.insert({title: 123})</code></li></ul></li></ul></li><li><p>删除集合</p><p><code>db.&lt;collection_name&gt;.drop()</code></p><p>例：<code>db.abc.drop()</code></p></li><li><p>插入文档</p><ul><li><p><code>db.&lt;collection_name&gt;.insert({title: 1234})</code></p></li><li><p><code>doc=({title: 12345, name: &quot;MongoDB指南&quot;})</code></p><p><code>db.&lt;collection_name&gt;.insert(doc)</code></p></li><li><p><code>db.&lt;collection_name&gt;.save({name: &quot;MongoDB简单指令&quot;}})</code></p></li><li><p><code>doc2=({name: &quot;MongoDB从入门到放弃&quot;})</code></p><p><code>db.&lt;collection_name&gt;.save(doc2)</code></p></li><li><p><code>doc3=({_id: &quot;edrftgyhjkgjhfgv2ryuoio&quot;, name: &quot;MongoDB从入门到放弃&quot;})</code></p><p><code>db.&lt;collection_name&gt;.save(doc3)</code>// 若_id对应值的数据已经存在，则更新这条数据，否则新增一条数据</p></li></ul></li><li><p>更新文档</p><ul><li><code>db.&lt;collection_name&gt;.update({title: 1234}, {$set:{title: &quot;4321&quot;}})</code></li></ul><blockquote><p>格式：</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.&lt;collection_name&gt;.update(</span><br><span class="line">&lt;where&gt;,<span class="regexp">//</span> 相当于MySQL的where</span><br><span class="line">&lt;update&gt;,<span class="regexp">//</span> 相当于MySQL的update语句的set，需要跟一些指令：<span class="variable">$,</span><span class="variable">$inc</span>,<span class="variable">$set</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="symbol">upsert:</span> <span class="keyword">true</span>,<span class="regexp">//</span> <span class="keyword">true</span>：如果不存在记录，则新增；<span class="keyword">false</span>相反，默认</span><br><span class="line"><span class="symbol">multi:</span> <span class="keyword">true</span>,<span class="regexp">//</span> <span class="keyword">true</span>：只更新第一条匹配的记录；<span class="keyword">false</span>相反，全部更新， 默认</span><br><span class="line"><span class="symbol">writeConcern:</span> &lt;document&gt;<span class="regexp">//</span> 异常级别</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 1. 只更新第一条记录：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="variable">$gt</span> : 1 &#125; &#125; , &#123; <span class="variable">$set</span> : &#123; <span class="string">"test2"</span> : <span class="string">"OK"</span>&#125; &#125; );</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 2. 全部更新：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="variable">$gt</span> : 3 &#125; &#125; , &#123; <span class="variable">$set</span> : &#123; <span class="string">"test2"</span> : <span class="string">"OK"</span>&#125; &#125;,<span class="literal">false</span>,<span class="literal">true</span> );</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 3. 只添加第一条：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="variable">$gt</span> : 4 &#125; &#125; , &#123; <span class="variable">$set</span> : &#123; <span class="string">"test5"</span> : <span class="string">"OK"</span>&#125; &#125;,<span class="literal">true</span>,<span class="literal">false</span> );</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 4. 全部添加进去:</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="variable">$gt</span> : 5 &#125; &#125; , &#123; <span class="variable">$set</span> : &#123; <span class="string">"test5"</span> : <span class="string">"OK"</span>&#125; &#125;,<span class="literal">true</span>,<span class="literal">true</span> );</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 5. 全部更新：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="variable">$gt</span> : 15 &#125; &#125; , &#123; <span class="variable">$inc</span> : &#123; <span class="string">"count"</span> : 1&#125; &#125;,<span class="literal">false</span>,<span class="literal">true</span> );</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 6. 只更新第一条记录：</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.col.update( &#123; <span class="string">"count"</span> : &#123; <span class="variable">$gt</span> : 10 &#125; &#125; , &#123; <span class="variable">$inc</span> : &#123; <span class="string">"count"</span> : 1&#125; &#125;,<span class="literal">false</span>,<span class="literal">false</span> );</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><ul><li><p><code>db.&lt;collection_name&gt;.save()</code></p><p>调用save指令一般需要指定_id</p></li></ul></li><li><p>删除文档</p><p><code>db.&lt;collection_name&gt;.remove({title: &quot;4321&quot;}, true)</code></p><blockquote><p>格式</p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="params">&lt;collection_name&gt;</span>.remove(</span><br><span class="line"><span class="params">&lt;where&gt;</span>,<span class="comment">// 相当于MySQL的where</span></span><br><span class="line"><span class="params">&lt;justOne&gt;</span><span class="comment">// true：只删除一条匹配条件的数据；false：匹配条件的数据全部删除，默认</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p>删除集合中所有数据</p><p><code>db.&lt;collection_name&gt;.remove({})</code></p></li><li><p>新函数：</p><ul><li><code>db.&lt;collection_name&gt;.deleteMany({})</code></li><li><code>db.&lt;collection_name&gt;.deleteOne({title: &quot;12345&quot;})</code></li></ul></li></ul></li><li><p>查询文档</p><ol><li>普通查询</li></ol><blockquote><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.&lt;collection_name&gt;.find(</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &lt;<span class="built_in">where</span>&gt;, // 查询条件</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &lt;colName&gt;// 返回字段名称</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> )</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><ul><li>创建一个集合，插入三条数据</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.insert([&#123;<span class="string">name:</span> <span class="string">"cc"</span>, <span class="string">age:</span> <span class="string">"29"</span>, <span class="string">gender:</span> <span class="number">1</span>&#125;, &#123;<span class="string">name:</span> <span class="string">"ccc"</span>, <span class="string">age:</span> <span class="string">"30"</span>, <span class="string">gender:</span> <span class="number">2</span>&#125;, &#123;<span class="string">name:</span> <span class="string">"c"</span>, <span class="string">age:</span> <span class="string">"28"</span>, <span class="string">gender:</span> <span class="number">1</span>&#125;])</span><br></pre></td></tr></table></figure><ul><li><p>查询集合中全部数据</p><p>普通显示：<code>db.user.find()</code></p><p>格式化显示：<code>db.user.find().pretty()</code></p></li><li><p>查询name=&quot;c&quot;的信息</p><p><code>db.user.find({name: &quot;c&quot;}).pretty()</code></p></li><li><p>查询只返回第一个匹配到的数据</p><p><code>db.user.findOne({name: &quot;c&quot;})</code></p></li></ul><ol start="2"><li><p>AND查询</p><p><code>db.user.find({key: value, key: value})</code></p><p>And查询即是在where条件里面用逗号&quot;,&quot;分隔</p><blockquote><p>栗子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.<span class="builtin-name">find</span>(&#123;name:<span class="string">"cc"</span>, gender:1&#125;)</span><br><span class="line">&gt; </span><br><span class="line">&gt; ---</span><br><span class="line">&gt; 等同于MySQL：</span><br><span class="line">&gt; select * <span class="keyword">from</span><span class="built_in"> user </span>where name = <span class="string">"c"</span> <span class="keyword">AND</span> gender = 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>OR查询</p><p><code>db.user.find({$or:[{key:value}, {key:value}]})</code></p><blockquote><p>栗子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.<span class="builtin-name">find</span>(&#123;</span><br><span class="line">&gt; <span class="variable">$or</span>:[&#123;name:<span class="string">"c"</span>&#125;, &#123;gender:2&#125;]</span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt; </span><br><span class="line">&gt; ---</span><br><span class="line">&gt; 等同于MySQL：</span><br><span class="line">&gt; select * <span class="keyword">from</span><span class="built_in"> user </span>where name = <span class="string">"c"</span> <span class="keyword">OR</span> gender = 2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>AND和OR组合查询</p><p><code>db.user.find({key:value, $or:[{key:value}, {key:value}]})</code></p><blockquote><p>栗子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.<span class="builtin-name">find</span>(&#123;gender:1, <span class="variable">$or</span>:[&#123;name: <span class="string">"c"</span>&#125;, &#123;age: <span class="string">"28"</span>&#125;]&#125;)</span><br><span class="line">&gt; </span><br><span class="line">&gt; ---</span><br><span class="line">&gt; 等同于MySQL：</span><br><span class="line">&gt; select * <span class="keyword">from</span><span class="built_in"> user </span>where gender = 1 <span class="keyword">AND</span> (name = <span class="string">"c"</span> <span class="keyword">OR</span> age = <span class="string">"28"</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>运算符</p><table><thead><tr><th>运算符</th><th>格式</th><th>案例</th><th>MySQL对应语句</th></tr></thead><tbody><tr><td>等于</td><td>{key:value}<br>{key:{$eq:value}}</td><td>db.user.find({age:“29”})<br>db.user.find({age:{$eq:“29”}})</td><td>where age = “29”</td></tr><tr><td>大于</td><td>{key:{$gt: value}}</td><td>db.user.find({age:{$gt:“30”}})</td><td>where age &gt; “30”</td></tr><tr><td>小于</td><td>{key:{$lt: value}}</td><td>db.user.find({age:{$lt: “30”}})</td><td>where age &lt; “30”</td></tr><tr><td>大于等于</td><td>{key:{$gte: value}}</td><td>db.user.find({age:{$gte:“30”}})</td><td>where age &gt;= “30”</td></tr><tr><td>小于等于</td><td>{key:{$lte: value}}</td><td>db.user.find({age:{$lte:“30”}})</td><td>where age &lt;= “30”</td></tr><tr><td>不等于</td><td><span class="katex-error" title="ParseError: KaTeX parse error: Expected &#039;}&#039;, got &#039;EOF&#039; at end of input: {key:{">{key:{</span>ne: value}}</td><td>db.user.find({age:{$ne:“29”}})</td><td>where age != “30”</td></tr></tbody></table></blockquote><ol start="5"><li><p>模糊查询</p><ul><li>查询age包含0的：<code>db.user.find({age:/0/})</code></li><li>查询age以2开头的：db.user.find({age:/^2/})</li><li>查询age以8结束的：db.user.find({age:/8$/})</li></ul></li><li><p>分页查询</p><blockquote><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.&lt;collection_name&gt;.find().<span class="built_in">limit</span>(Number).skip(Number)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ---</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">limit</span>(Number)表示查询多少条数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> skip(Number)表示从第几条开始查询</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><ul><li><p>查询一条数据</p><ul><li>第一种方法：<code>db.user.findOne({})</code></li><li>第二种方法：<code>db.user.find({}).limit(1)</code></li></ul></li><li><p>从第二条数据开始查询一条数据</p><p><code>db.user.find().limit(1).skip(2)</code></p></li></ul></li><li><p>查询排序</p><blockquote><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.&lt;collection_name&gt;.find().sort(&#123;&lt;key_name&gt;:-1/1&#125;)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ---</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &lt;key_name&gt;：排序字段</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> -1：倒序</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 1：正序</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><ul><li><p>按照年龄倒序</p><p><code>db.user.find().sort({age:-1})</code></p></li><li><p>按照年龄倒序、性别正序</p><p><code>db.user.find().sort({age:-1, gender:1})</code></p></li></ul></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查看所有的db&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show dbs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换db&lt;/p&gt;
&lt;p&gt;&lt;code&gt;user &amp;lt;db_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看当前所在db
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://luxiaowan.github.io/categories/MongoDB/"/>
    
    
      <category term="基本指令" scheme="http://luxiaowan.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Git Stash用法</title>
    <link href="http://luxiaowan.github.io/2019/10/22/git%20stash%E5%91%BD%E4%BB%A4/"/>
    <id>http://luxiaowan.github.io/2019/10/22/git stash命令/</id>
    <published>2019-10-21T16:00:00.000Z</published>
    <updated>2019-10-24T13:20:12.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建仓库"><a class="markdownIt-Anchor" href="#创建仓库"></a> 创建仓库</h3><ol><li>git init</li><li>echo 123 &gt; test.txt</li><li>git add .</li><li>git commit -m “add test file”</li><li>git remote add origin git@git.xx.xx.xx:xxx/xxx.git</li><li>git push origin master</li></ol><p><em>以上内容比较简单，就不作详细讲述，如果上面的内容看不懂，下面的请放弃</em></p><h3 id="使用git-stash暂存"><a class="markdownIt-Anchor" href="#使用git-stash暂存"></a> 使用git stash暂存</h3><ol><li><p>随意修改test.txt文件的内容，比如：画个心形，你正热火朝天修改中……</p></li><li><p>这时领导走过来拍了拍你的肩膀说到：”小伙子啊，创建个<code>朕.txt</code>文件提交上来，内容就写<code>我还想再活五百年</code>，test.txt文件这一版不作修改“。</p></li><li><p><strong>你面露笑容的回答：“好的，没问题！”，内心却是：“MMP,MMP,MMP……”</strong></p></li><li><p>辛辛苦苦修改的<code>test.txt</code>文件怎么办？眼瞅着就要完成了，难道复制出去，然后等解决领导需求后再粘贴回来？low不low？肯定<code>不low</code>啊，一个文件而已，这种方法很简单，*但是当你实际项目中修改了几十个文件的时候呢？*挨个儿复制出去？累傻小子呐？！！！！！</p></li><li><p><code>git stash</code>命令帮你解决问题，stash是存储的意思，也就是将当前工作区内的所有东西都存储起来，然后工作区所有文件恢复到修改之前的状态(并不是最新状态，不会和仓库中进行自动同步，需要你自己去pull)，然后你就可以继续完成任务了。(<font color="red">在执行git stash之前需要先执行git add命令</font>)</p><p>stash可以进行多次操作，每次操作都会将当前工作区的文件情况暂存起来，stash是类栈存储，每次stash的序号都为0，此次之前stash的序号会自动+1</p></li></ol><h3 id="使用git-stash-pop取出"><a class="markdownIt-Anchor" href="#使用git-stash-pop取出"></a> 使用git stash pop取出</h3><ol><li><code>git stash pop</code>取出栈顶元素，也就是序号为0的那个，即最近一次执行<code>git stash</code>保存的内容。pop之后，暂存列表中就会自动将其清除掉，这个时候你再执行<code>git stash list</code>会发现毛都没有</li><li>这个时候可能就会纳闷了，我保存了好几次，但是我这次是想使用最开始stash的那份内容，怎么办？一直pop，直到最后一次？当然不行，上面刚讲过pop之后暂存列表中就没有stash的信息了，已经被pop出去的就找不回来了，等于是自杀式攻击，那咋整呢？</li><li><code>git stash apply stash@{序号}</code>可以将指定序号的stash内容弹出到工作区，此时工作区里文件的状态就和<code>stash@{序号}</code>里的一致了，但是这个命令<strong>无法将stash记录从暂存列表中删除，仅仅只是将文件恢复而已</strong></li><li><code>git stash drop stash@{序号}</code>来丢弃暂存列表中的记录，可以配合apply使用</li></ol><h3 id="查看暂存记录中的信息"><a class="markdownIt-Anchor" href="#查看暂存记录中的信息"></a> 查看暂存记录中的信息</h3><ol><li>查看暂存列表：<code>git stash list</code>查看当前stash的列表</li><li>查看暂存内容：<code>git stash show stash@{序号}</code>查看指定序号的stash的内容</li></ol><h3 id="git-stash-save-msg"><a class="markdownIt-Anchor" href="#git-stash-save-msg"></a> git stash save ‘msg’</h3><p>等于是在stash的时候打了个标签，妖娆！！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建仓库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#创建仓库&quot;&gt;&lt;/a&gt; 创建仓库&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;echo 123 &amp;gt; test.txt&lt;/li&gt;
&lt;li&gt;git add .&lt;
      
    
    </summary>
    
    
      <category term="Git" scheme="http://luxiaowan.github.io/categories/Git/"/>
    
    
  </entry>
  
</feed>
