<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>串一串</title>
  
  <subtitle>断舍离</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chuanyichuan.github.io/"/>
  <updated>2021-02-06T15:17:26.080Z</updated>
  <id>http://chuanyichuan.github.io/</id>
  
  <author>
    <name>cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL之my.cnf配置信息</title>
    <link href="http://chuanyichuan.github.io/2021/02/06/MySQL%E4%B9%8Bmy.cnf%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <id>http://chuanyichuan.github.io/2021/02/06/MySQL之my.cnf配置信息/</id>
    <published>2021-02-05T16:00:00.000Z</published>
    <updated>2021-02-06T15:17:26.080Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="attr">port</span> = <span class="string">3306</span></span><br><span class="line"><span class="attr">socket</span> = <span class="string">/tmp/mysql.sock</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># Mysql服务的唯一编号 每个mysql服务Id需唯一</span></span><br><span class="line"><span class="meta">server-id</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端口号 默认3306</span></span><br><span class="line"><span class="attr">port</span> = <span class="string">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql安装根目录</span></span><br><span class="line"><span class="attr">basedir</span> = <span class="string">/usr/local/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql数据文件所在位置</span></span><br><span class="line"><span class="attr">datadir</span> = <span class="string">/usr/local/mysql/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pid</span></span><br><span class="line"><span class="meta">pid-file</span> = <span class="string">/usr/local/mysql/mysql.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置socke文件所在目录</span></span><br><span class="line"><span class="attr">socket</span> = <span class="string">/tmp/mysql.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置临时目录</span></span><br><span class="line"><span class="attr">tmpdir</span> = <span class="string">/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户</span></span><br><span class="line"><span class="attr">user</span> = <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许访问的IP网段</span></span><br><span class="line"><span class="meta">bind-address</span> = <span class="string">0.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过密码登录</span></span><br><span class="line"><span class="comment"># skip-grant-tables</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要用于MyISAM存储引擎,如果多台服务器连接一个数据库则建议注释下面内容</span></span><br><span class="line"><span class="comment"># skip-external-locking</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只能用IP地址检查客户端的登录，不用主机名</span></span><br><span class="line"><span class="attr">skip_name_resolve</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 事务隔离级别，默认为可重复读，mysql默认可重复读级别（此级别下可能参数很多间隙锁，影响性能）</span></span><br><span class="line"><span class="comment"># transaction_isolation = READ-COMMITTED</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）</span></span><br><span class="line"><span class="meta">character-set-server</span> = <span class="string">utf8mb4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库字符集对应一些排序等规则，注意要和character-set-server对应</span></span><br><span class="line"><span class="meta">collation-server</span> = <span class="string">utf8mb4_general_ci</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置client连接mysql时的字符集,防止乱码</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8mb4'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否对sql语句大小写敏感，1表示不敏感</span></span><br><span class="line"><span class="attr">lower_case_table_names</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="string">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大错误连接数</span></span><br><span class="line"><span class="attr">max_connect_errors</span> = <span class="string">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TIMESTAMP如果没有显示声明NOT NULL，允许NULL值</span></span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SQL数据包发送的大小，如果有BLOB对象建议修改成1G</span></span><br><span class="line"><span class="attr">max_allowed_packet</span> = <span class="string">1024M</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span></span><br><span class="line"><span class="comment"># MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span></span><br><span class="line"><span class="attr">interactive_timeout</span> = <span class="string">1800</span></span><br><span class="line"><span class="attr">wait_timeout</span> = <span class="string">1800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内部内存临时表的最大值 ，设置成128M。</span></span><br><span class="line"><span class="comment"># 比如大数据量的group by ,order by时可能用到临时表，</span></span><br><span class="line"><span class="comment"># 超过了这个值将写入磁盘，系统IO压力增大</span></span><br><span class="line"><span class="attr">tmp_table_size</span> = <span class="string">134217728</span></span><br><span class="line"><span class="attr">max_heap_table_size</span> = <span class="string">134217728</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用mysql的缓存查询结果集功能</span></span><br><span class="line"><span class="comment"># 后期根据业务情况测试决定是否开启</span></span><br><span class="line"><span class="comment"># 大部分情况下关闭下面两项</span></span><br><span class="line"><span class="attr">query_cache_size</span> = <span class="string">0</span></span><br><span class="line"><span class="attr">query_cache_type</span> = <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库错误日志文件</span></span><br><span class="line"><span class="attr">log_error</span> = <span class="string">error.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 慢查询sql日志设置</span></span><br><span class="line"><span class="attr">slow_query_log</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span> = <span class="string">slow.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查未使用到索引的sql</span></span><br><span class="line"><span class="attr">log_queries_not_using_indexes</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数</span></span><br><span class="line"><span class="attr">log_throttle_queries_not_using_indexes</span> = <span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作为从库时生效,从库复制中如何有慢sql也将被记录</span></span><br><span class="line"><span class="attr">log_slow_slave_statements</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 慢查询执行的秒数，必须达到此值可被记录</span></span><br><span class="line"><span class="attr">long_query_time</span> = <span class="string">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检索的行数必须达到此值才可被记为慢查询</span></span><br><span class="line"><span class="attr">min_examined_row_limit</span> = <span class="string">666</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql binlog日志文件保存的过期时间，过期后自动删除</span></span><br><span class="line"><span class="attr">expire_logs_days</span> = <span class="string">5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL修改启动端口无效</title>
    <link href="http://chuanyichuan.github.io/2021/02/05/MySQL%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E7%AB%AF%E5%8F%A3%E6%97%A0%E6%95%88/"/>
    <id>http://chuanyichuan.github.io/2021/02/05/MySQL修改启动端口无效/</id>
    <published>2021-02-05T15:16:00.000Z</published>
    <updated>2021-02-06T11:53:53.481Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个特别沙雕的问题：在安装MySQL的时候，指定了<code>my.cnf</code>文件，但是文件中指定的端口一直不生效，每次启动都是用的3306。对<code>my.cnf</code>内容进行了检查核对，发现配置文件并无问题，也就是在配置文件内容没有任何错误的情况下，配置并未生效，这就相当的奇怪了，排查了好久，最终在官网，找到了响应的解决方案，不过在讲解决方案之前，我们来说一下mysql配置文件的使用规则。</p><p>####my.cnf加载顺序</p><p>我们查看MySQL在启动的过程中，如果未指定<code>--defaults-file</code>，那么会加载哪里的<code>my.cnf</code>呢？我们查看一下<code>mysql</code>命令的帮助信息：<code>mysql --help | grep 'my.cnf'</code>，控制台输出:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chuan@MacBook-Pro ~ % mysql --help | grep 'my.cnf' -C1 --color</span><br><span class="line">--</span><br><span class="line">Default options are read from the following files in the given order:</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure><p>原来mysql在启动的时候，如果未指定<code>my.cnf</code>的话，会依次去寻找<code>/etc/my.cnf</code>、<code>/etc/mysql/my.cnf</code>、<code>/usr/local/mysql/etc/my.cnf</code>、<code>~/.my.cnf</code>，只要找到</p><blockquote><p>注意: 在<code>$HOME</code>目录下的文件是隐藏文件，所以前面有个<code>.</code></p></blockquote><h4 id="自定义mycnf"><a class="markdownIt-Anchor" href="#自定义mycnf"></a> 自定义my.cnf</h4><p><code>mysqld</code>命令允许我们通过参数<code>--defaults-file=./my.cnf</code>的方式来指定实例启动时使用的配置文件，这时MySQL在启动时，会只读取指定的文件中的配置，若文件不存在或者配置内容错误，也不会去寻找下一顺位的文件，而是直接报错。</p><blockquote><p>如何自定义不解释了</p></blockquote><h4 id="问题解决"><a class="markdownIt-Anchor" href="#问题解决"></a> 问题解决</h4><p>配置文件核查了很多遍，发现是没有任何的问题，然后就开始翻官网，在官网文档中看到了这样一句话：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> you <span class="builtin-name">enable</span> certain MySQL features, you might need <span class="keyword">to</span> <span class="builtin-name">set</span> the SELinux TCP<span class="built_in"> port </span>context <span class="keyword">for</span> additional ports used by those features. <span class="keyword">If</span> ports used by MySQL features <span class="keyword">do</span> <span class="keyword">not</span> have the correct SELinux context, the features might <span class="keyword">not</span> function correctly.</span><br></pre></td></tr></table></figure><p>大致意思就是如果启用了SELinux，需要把端口加入到mysqld_port_t中。具体的加入方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 检查SELinux是否开启</span></span><br><span class="line">getenforce</span><br><span class="line"><span class="meta"> &gt;</span><span class="bash"> Disabled</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明：(详细可百度细看)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">disable</span> - No SELinux policy is loaded.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> enforcing - SELinux security policy is enforced.  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 查看mysql当前开放的端口</span></span><br><span class="line">semanage port -l | grep mysqld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 第二步添加需要使用的端口</span></span><br><span class="line">semanage port -a -t mysqld_port_t -p tcp 3308</span><br></pre></td></tr></table></figure><p>加上端口之后，再次启动MySQL服务，发现端口使用的还是<code>3306</code>，这就很奇怪了，明明按照官网要求设置好了，怎么还不行？然后再次尝试使用命令<code>setenforce 0</code>把SELinux关闭，发现仍然无济于事，但是启动日志中出现了这么一句话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_print_defaults: [Warning] World-writable config file &apos;/usr/local/mysql3/config/my.cnf&apos; is ignored.</span><br></pre></td></tr></table></figure><p>哦吼？ignore？？？配置文件被忽略了，因为配置文件是<code>World-writable</code>权限，那我们来看下配置文件的权限：</p><p><img src="/images/image-20210206194846939.png" alt="image-20210206194846939"></p><p>哟呵，权限是777，所有用户都可以修改，这就很危险了，谁都能改，这不扯淡么，并且在官网找到了这么一句话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">On Unix platforms, MySQL ignores configuration files that are world-writable. This is intentional as a security measure.</span><br></pre></td></tr></table></figure><p>那么既然这样的话，我们就把配置文件修改为555，剥夺其写权限，然后再次启动MySQL服务，哦哟，搞定了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天遇到一个特别沙雕的问题：在安装MySQL的时候，指定了&lt;code&gt;my.cnf&lt;/code&gt;文件，但是文件中指定的端口一直不生效，每次启动都是用的3306。对&lt;code&gt;my.cnf&lt;/code&gt;内容进行了检查核对，发现配置文件并无问题，也就是在配置文件内容没有任何错误
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>服务器Load过高排查手册</title>
    <link href="http://chuanyichuan.github.io/2021/01/27/%E6%9C%8D%E5%8A%A1%E5%99%A8Load%E8%BF%87%E9%AB%98%E6%8E%92%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
    <id>http://chuanyichuan.github.io/2021/01/27/服务器Load过高排查手册/</id>
    <published>2021-01-27T14:50:00.000Z</published>
    <updated>2021-02-06T11:54:07.990Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一-前言"><a class="markdownIt-Anchor" href="#一-前言"></a> 一、前言</h3><h4 id="11-工具"><a class="markdownIt-Anchor" href="#11-工具"></a> 1.1 工具</h4><h4 id="12-命令"><a class="markdownIt-Anchor" href="#12-命令"></a> 1.2 命令</h4><h3 id="二-操作影响"><a class="markdownIt-Anchor" href="#二-操作影响"></a> 二、操作影响</h3><p>当机器负载过高时，对于机器所有的操作基本都会变慢，最显著的表现就是登录服务器都会变得很慢，好不容易登录上去了，敲一个命令都要响应半天，尤其是当使用<code>tab</code>键进行命令补齐时，操作窗口直接卡住了；同时我们还会发现，不仅仅是服务器的响应变慢了，网络、IO也变慢了，然后连带着部署在机器上的服务的响应也变慢了(很大可能是它自己引起的)。</p><p>既然机器负载过高的影响这么大，我们就来看看怎么盘它。</p><h3 id="三-系统负载"><a class="markdownIt-Anchor" href="#三-系统负载"></a> 三、系统负载</h3><p>系统负载也叫CPU负载，代表着机器CPU的压力，我们首先要知道负载是什么，然后再知道怎么查看负载，看到了负载我们还需要知道是否过载。我们先来说下负载是什么：负载表示当前机器活着的可执行队列(执行中+待执行)的长度，长度越多，表明机器越忙，负载则越大，也可以理解为当嘴塞满了之后还一直往嘴里塞东西，如果一个进程满足以下条件则其就会位于运行队列中：</p><ul><li>它没有在等待I/O操作的结果</li><li>它没有主动进入等待状态(也就是没有调用<code>wait</code>)</li><li>没有被停止(例如：等待终止)</li></ul><h4 id="31-查看负载"><a class="markdownIt-Anchor" href="#31-查看负载"></a> 3.1 查看负载</h4><p>查看负载的方式有多种，我们可以使用<code>top</code>、<code>uptime</code>、<code>w</code>、<code>vmstat</code>等命令进行查看，前三个命令的输出格式都一样，仅<code>vmstat</code>我们可能需要稍微分析一下</p><ol><li>先来看下前三个的输出</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00:55:56 up 136 days,  1:40,  1 user,  load average: 0.55, 0.33, 0.26</span><br></pre></td></tr></table></figure><p>这是一整行数据(这不废话么)，这一行数据分了四个部分：</p><p><code>00:55:56</code>：系统当前时间</p><p><code>up 136 days, 1:40</code>：系统自上次启动后持续运行时长</p><p><code>1 user</code>：当前系统在线用户</p><p><code>load average: 0.55, 0.33, 0.26</code>：系统1分钟、5分钟、15分钟的平均负载信息(<strong>在CPU上运行或者等待运行多少进程</strong>)</p><p>在这里主要关注第四部分，也就是<code>load average</code></p><ol start="2"><li>再来看<code>vmstat</code>的输出</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 1  0      0 202176  31500 347424    0    0    58   144    1    1  2  2 95  1  0</span><br></pre></td></tr></table></figure><p>这个命令输出的内容详细的记录了当前正在执行的任务数以及被阻塞的任务数，并且输出了内存、swap区、io、cpu和系统信息。</p><ol start="3"><li>总结一下</li></ol><p>查看机器负载的简单方法已经介绍完了，单从简洁角度看的话，使用<code>w</code>和<code>uptime</code>输出的内容更加简洁明了，而<code>vmstat</code>输出的内容多样且详细。平时我们第一步大多是快速查看系统1分钟、5分钟、15分钟内的平均负载，所以还是前三个命令使用的多，需要查看具体详细内容的话，再使用最后一个。</p><h4 id="32-过载判定"><a class="markdownIt-Anchor" href="#32-过载判定"></a> 3.2 过载判定</h4><p>当使用命令把负载输出之后，还需要对负载数据进行判断，要能够知道什么情况下的负载是正常的，什么情况下的负载是过载的，也要能判断出过载程度如何。</p><p>一般根据CPU的数量去判断系统负载是否超载，目前应该没有公司会使用单核的服务器了吧，我们这里也说一下。我们可以把CPU当成是高速公路收费站的人工收费口，进程就是路过的一辆辆车：</p><ul><li><p>单核服务器</p><p>单核服务器就是只有一个可用的人工收费口，这时所有的车辆都需要从这一个收费口通过(这是一句废话)。</p></li></ul><ol><li>当有牌照的车通过时，车只需刷一下卡交个费就可以从收费口通过，每分钟可以通过多辆车，这时负载就会很低；</li><li>当使用临时牌照的车通过时，需要先出示通行卡，然后再出示临时牌照，收费员刷了卡，然后调用车辆进入高速时的监控照片，随后查验车辆临时牌照，然后再收费…这么一系列操作完成之后，一般一分钟就过去了，这时单收费口的负载就是1；</li><li>如果车辆在通过时出现了故障，那么这个时候整个通道都会被堵塞住，后面的车辆全部处于待通过状态，负载就变得非常高</li></ol><ul><li><p>多核服务器</p><p>当车流量激增时，一个收费口显然无法满足通行需求，收费站调控室会下达开放其他收费口的指令，利用多个收费口来将车辆分流，提升吞吐量。那么当CPU不够的时候当然也可以通过增加CPU来提升进程队列的吞吐量，这也就是我们所说的多核机器，一个CPU代表一核(这话说的好弱智)。我们还拿上面三个例子来说，以4核为例，和单核相比，吞吐量提升了4倍，负载降低了4倍左右，这就不用解释了吧，如果不懂，那就去看看小学二年级数学吧。</p></li></ul><p>通过上面的不太恰当的例子可以总结出，当负载低于CPU核数时，服务器的负载是正常的，然后越低越好，正常情况下，一台正常的机器的负载一般在<code>1.0</code>以下，那么负载到底超过多少算是过载了呢？从上面的小栗子我们可以看出来，如果每一个CPU每分钟都处理1个进程，4核机器在1分钟内的负载就是4，服务器每一个CPU都一直处于忙碌中，毫无休息的时间，长期如此，机器会扛不住，短时间的可以接受，5分钟以上就需要好好排查一下了，理论上可容忍的最高负载为：<strong>1.2 * CPU核数</strong></p><h3 id="四-监控工具"><a class="markdownIt-Anchor" href="#四-监控工具"></a> 四、监控工具</h3><p>如果机器长时间负重前行，就会变得很累，所以要能及时发现并帮它把负重降下来，所以我们要对服务器做相应的指标监控，给每一个监控设置阈值，当指标超过阈值时能够主动的给运维人员发送通知。</p><h4 id="41-监控选型"><a class="markdownIt-Anchor" href="#41-监控选型"></a> 4.1 监控选型</h4><p>监控的方式有基于Prometheus的node_exporter，有界面炫酷的Netdata，也可以自己写shell脚本，当然也有很多其他的工具，这里我们主要介绍这三类：</p><ol><li>Prometheus主要是指标的采集和告警，界面化并不是很好，一般需要搭配Grafana进行可视化，而对于告警来说，Prometheus可以通过集成Alertmanager来实现告警，也可以在Grafana中配置Alert来达到告警的目的。Alertmanager完全配置化操作，并且对重复消息及告警规则比较人性化，Grafana则为界面化操作，两种选其一即可。</li><li>Netdata可视化页面非常炫酷，但是需要访问国外资源，不能科学上网的话，不推荐，下面会告诉怎么使用国内资源。</li><li>shell脚本编写起来也很简单，并且方便，定制化强，可以根据自己的实际需求设置告警，但是对编写shell脚本的能力有一定的要求</li></ol><p>对比下来看，使用Prometheus+Alertmanager+Grafana是容易上手的，我们先来重点看下怎么使用它，后面会将Shell脚本贴到文末。</p><h4 id="42-配置监控"><a class="markdownIt-Anchor" href="#42-配置监控"></a> 4.2 配置监控</h4><p>Prometheus、node_exporter、Alertmanager和Grafana的安装步骤就不单独做说明了，自行谷歌吧，我们主要解释一下怎么使用node_exporter采集信息，然后用Alertmanager配置告警、用Grafana配置告警。</p><ol><li><p>node_exporter使用很简单，官网下载下来，然后启动即可，但是要注意的是机器的<code>9100</code>端口不能被占用，因为它默认使用的端口是<code>9100</code>，也可以通过启动参数进行修改，见下方。exporter采集关于机器的很多指标，关于机器负载性能这块只需要关注这几个参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1分钟平均负载</span></span><br><span class="line">node_load1 0.11</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5分钟平均负载</span></span><br><span class="line">node_load5 0.11</span><br><span class="line"><span class="meta">#</span><span class="bash"> 15分钟平均负载</span></span><br><span class="line">node_load15 0.04</span><br></pre></td></tr></table></figure></li><li><p>Prometheus只需要定期通过<code>node_exporter</code>的url来进行数据采集，配置内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># 采集node exporter监控数据</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node_exporter'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['ip:9100']</span></span><br></pre></td></tr></table></figure></li><li><p>Alertmanager与Prometheus配合实现告警的通知，Alertmanager是Prometheus官方提供的插件，安装办法不做介绍，配置信息主要是在Alertmanager的配置文件<code>alertmanager.yml</code>中。<code>Alert</code>有三个阶段，分别是<code>Inactive</code>、<code>Pending</code>、<code>Firing</code>，分别表示告警规则的三个阶段，当监控指标处于正常情况下，告警规则处于<code>Inactive</code>阶段，在Prometheus的web页面可以查看相关状态<code>http://ip:9090/alerts</code>：</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210202145723835.png" alt="image-20210202145723835" style="zoom:50%;"><p>说完了<code>Inactive</code>，接下来就是它的邻居<code>Pending</code>，这玩意儿是代表着啥呢？我们当监控的值满足条件时，是否应该立即发送告警呢？如果你需要这样的操作，当然也可以，但是一般我们监控任何事情都需要一个观察期，防止出现误报、乱报的情况出现，提高告警准确性。配置信息中<code>for</code>关键词就是持续观察的作用，意思是当指标异常时，持续观察指定时长，比如上面图中指定的<code>5m</code>代表持续观察5分钟，如果5分钟之后指标依然异常，那么就触发告警，那么在这五分钟之内，告警规则的状态就处于<code>Pending</code>状态；</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210202153913561.png" alt="image-20210202153913561" style="zoom:50%;"><p>观察期内指标恢复正常，则回溯到<code>Inactive</code>，观察期后指标依然异常，则触发告警通知，并将规则状态修改为<code>Firing</code>（莫名的想大喊：二营长，你他娘的意大利炮呢!?）</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210202155650371.png" alt="image-20210202155650371" style="zoom:50%;"></li><li><p>Grafana配置就比较简单了，只需要配置一个数据源就可以了，目标地址指向Prometheus即可，就不展示了。</p></li></ol><h4 id="43-告警设置"><a class="markdownIt-Anchor" href="#43-告警设置"></a> 4.3 告警设置</h4><p>告警可以通过Prometheus或者Grafana实现，Grafana设置比较简单，全部都是可视化的，Prometheus则稍微复杂一点，并且需要搭配Alertmanager来实现，Alertmanager支持多种告警方式：邮件、 即时通讯软件（如Slack、Hipchat）、移动应用消息推送(如Pushover)和自动化运维工具（例如：Pagerduty、Opsgenie、Victorops），我们主要拿邮件来说一说。</p><h5 id="431-prometheus告警设置"><a class="markdownIt-Anchor" href="#431-prometheus告警设置"></a> 4.3.1 Prometheus告警设置</h5><p>Prometheus的告警由两部分组成，一部分是告警规则设置，也就是<code>AlertRule</code>，定义在<code>prometheus.yml</code>文件中的<code>rule_files</code>标签下；另一部分就是<code>Alertmanager</code>，具体的告警处理器，Prometheus会周期性的对告警规则进行计算，如果满足条件就会向<code>Alertmanager</code>发送告警信息，盗用一张架构图：</p><p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/prometheus-alert-artich.png" alt="img"></p><p>如果需要让Prometheus达到自动告警的目的，需要配置两块内容，一个是Prometheus的<code>prometheus.yml</code>，另一个是Alertmanager的<code>alertmanager.yml</code>，两者各司其职，Prometheus进行数据采集、分析计算、通知Alertmanager，Alertmanager执行告警，具体配置如下：</p><blockquote><p>prometheus.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置Alertmanager</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alertmanagers:</span> <span class="comment"># 从命名上看就是可以配置多个alertmanager</span></span><br><span class="line"><span class="attr">  - static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['ip:9093']</span> <span class="comment"># ip是Alertmanager所在机器的ip，9093是Alertmanager的端口，可以配置多个，同时发送</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置告警监控rule</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"rules/*.yml"</span></span><br><span class="line">  <span class="comment"># - "rules2/*yml" # 这是一个链表，可以配置多个</span></span><br></pre></td></tr></table></figure><blockquote><p>rules/basic_rule.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">loadAlert</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line">  <span class="comment"># 监控1分钟内负载情况</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">load1Alert</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">sum</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">(node_load1)</span> <span class="string">&gt; count by (instance) (count by (instance, cpu) (node_cpu_seconds_total&#123;mode='system'&#125;)) * 1.2</span></span><br><span class="line"><span class="string"></span><span class="attr">    for:</span> <span class="number">5</span><span class="string">m</span> <span class="comment"># 持续观察5分钟</span></span><br><span class="line"><span class="attr">    labels:</span> <span class="comment"># 自定义label</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    annotations:</span> <span class="comment"># 自定义通知内容</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">'<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> load is overload, current value is <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>'</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">'<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> load is overload, current value is <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>'</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">load5Alert</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">sum</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">(node_load5)</span> <span class="string">&gt; count by (instance) (count by (instance, cpu) (node_cpu_seconds_total&#123;mode='system'&#125;)) * 1.2</span></span><br><span class="line"><span class="string"></span><span class="attr">    for:</span> <span class="number">5</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">'<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> load5 is overload, current value is <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>'</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">'<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> load5 is overload, current value is <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>'</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">load15Alert</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">sum</span> <span class="string">by</span> <span class="string">(instance)</span> <span class="string">(node_load15)</span> <span class="string">&gt; count by (instance) (count by (instance, cpu) (node_cpu_seconds_total&#123;mode='system'&#125;)) * 1.2</span></span><br><span class="line"><span class="string"></span><span class="attr">    for:</span> <span class="number">8</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      severity:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">'<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> load15 is overload, current value is <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>'</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">'<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> load15 is overload, current value is <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>'</span></span><br></pre></td></tr></table></figure><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210202162235639.png" alt="image-20210202162235639" style="zoom:50%;"><blockquote><p>alertmanager.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span> <span class="comment"># 全局参数配置</span></span><br><span class="line"><span class="attr">  resolve_timeout:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">  smtp_from:</span> <span class="string">'xx@xx.com'</span></span><br><span class="line"><span class="attr">  smtp_smarthost:</span> <span class="string">'smtp.xx.com'</span></span><br><span class="line"><span class="attr">  smtp_auth_username:</span> <span class="string">'xx@xx.com'</span></span><br><span class="line"><span class="attr">  smtp_auth_identity:</span> <span class="string">'xx@xx.com'</span></span><br><span class="line"><span class="attr">  smtp_auth_password:</span> <span class="string">'密码'</span></span><br><span class="line"><span class="attr">  smtp_require_tls:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line"><span class="attr">  group_by:</span> <span class="string">['alertname']</span></span><br><span class="line"><span class="attr">  receiver:</span> <span class="string">'manager-receiver'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 告警接收器</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">'manager-receiver'</span></span><br><span class="line"><span class="attr">    email_configs:</span></span><br><span class="line"><span class="attr">    - to:</span> <span class="string">'cc@xx.com'</span></span><br><span class="line"><span class="attr">      send_resolved:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      headers:</span> <span class="string">&#123;</span> <span class="attr">Subject:</span> <span class="string">'机器负载告警'</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210202162356883.png" alt="image-20210202162356883" style="zoom:50%;"><h5 id="432-prometheus智能预测"><a class="markdownIt-Anchor" href="#432-prometheus智能预测"></a> 4.3.2 Prometheus智能预测</h5><p>Prometheus内置了<code>predict_linear(v range-vector, t scalar)</code>函数预测时间序列v在t秒后的值，它基于简单线性回归的方式，对时间窗口内的样本数据进行统计，从而可以对时间序列的变化趋势做出预测，比如我们基于15m的样本数据，来预测主机5分钟负载是否在5分钟后过载，可以使用如下表达式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predict_linear(node_load5&#123;&#125;[15m], 300) &lt; 0</span><br></pre></td></tr></table></figure><h5 id="433-grafana告警设置"><a class="markdownIt-Anchor" href="#433-grafana告警设置"></a> 4.3.3 Grafana告警设置</h5><p>Grafana告警就比较简单了，在配置文件中设置告警发送邮件配置，然后在Grafana控制台<code>http://ip:3000</code>进行相关的配置，主要步骤是先到Grafana安装目录下找到<code>conf/defaults.ini</code>文件，修改如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################################### SMTP / Emailing #####################</span></span><br><span class="line"><span class="section">[smtp]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">host</span> = cc.xx.com</span><br><span class="line"><span class="attr">user</span> = cc@xx.com</span><br><span class="line"><span class="comment"># If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""</span></span><br><span class="line"><span class="attr">password</span> = xxxxx</span><br><span class="line"><span class="attr">cert_file</span> =</span><br><span class="line"><span class="attr">key_file</span> =</span><br><span class="line"><span class="attr">skip_verify</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">from_address</span> = cc@xx.com</span><br><span class="line"><span class="attr">from_name</span> = Grafana</span><br><span class="line"><span class="attr">ehlo_identity</span> =</span><br><span class="line"></span><br><span class="line"><span class="section">[emails]</span></span><br><span class="line"><span class="attr">welcome_email_on_sign_up</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">templates_pattern</span> = emails/*.html</span><br></pre></td></tr></table></figure><p>修改完成之后重新加载该配置文件或者重启Grafana，在控制台左侧菜单中找到<code>Alerting</code>，进入后到<code>Notification channels</code>下新增一个通知<code>channel</code>，可依据不同的告警业务线配置各自的<code>channel</code>，<code>channel</code>中可以指定告警方式、告警处理人等信息</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210202165852886.png" alt="image-20210202165852886" style="zoom:50%;"><p>通知channel配置完成之后就可以愉快的配置我们的告警指标了：</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210202192327907.png" alt="image-20210202192327907" style="zoom:50%;"><h4 id="44-验证监控"><a class="markdownIt-Anchor" href="#44-验证监控"></a> 4.4 验证监控</h4><p>我们配置了那么多监控，需要验证一下到底有没有用啊，如果没用的话，那我们配置这么多玩意儿干啥，为了测试，我们可以把CPU全都吃满，<strong>第十节有具体的使用方法</strong>，这里我们使用最简单的一种方式把机器所有的CPU资源都消耗殆尽<code>cat /dev/urandom | gzip -9 | gzip -d | gzip -9 | gzip -d &gt; /dev/null</code>，然后等待系统邮件告警通知。</p><h3 id="五-排查定位"><a class="markdownIt-Anchor" href="#五-排查定位"></a> 五、排查定位</h3><p>上面讲了那么多监控的信息，实际上就是为了能让我们及时的发现机器负载故障，这是重点之一，另一个重点就是找出负载过高的原因，然后解决它，服务器负载主要受CPU、内存、IO、网络等因素的影响，下面重点说一下各自的排查手段和问题定位方法。</p><h4 id="51-cpu排查"><a class="markdownIt-Anchor" href="#51-cpu排查"></a> 5.1 CPU排查</h4><p>负载过高一般都是由CPU引起，但是CPU会受系统硬件瓶颈和用户进程的影响，所以我们首先需要找出到底是什么原因造成的CPU飙升，第一步当然是要排查一下用户进程，因为系统硬件一般不会出问题，如果是硬件问题，那么应该老早就出问题了，不会等到现在，并且突然出问题的可能性也比较小，所以第一步还是直截了当的去看用户进程吧。</p><p>可以使用<code>top</code>命令查看用户进程对CPU的资源使用情况，命令使用方式和介绍可以使用<code>man top</code>查看，top命令详细分析查看**《10.1小节》**，top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用-c查看用户进程详细的COMMAND信息</span></span><br><span class="line">top -c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 详细输出</span></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                            </span><br><span class="line">11558 root      20   0 4559780 272688      0 S   300.7  3.4 269:25.76 java -jar /app.jar</span><br></pre></td></tr></table></figure><p>我们需要关注<code>%CPU</code>，负载高的时候，该值可能是100%的好几倍，但并不是值很大就一定是它引起的，还需要看服务器CPU数量和CPU使用率分布，比如服务器是8核的，某进程CPU的使用率为300%，这时候可以按数字键<code>1</code>查看每一个CPU的使用率：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">Cpu0  :  55.0 us,  0.3 sy,  0.0 ni, 98.0 id,  0.0 wa,  0.0 hi,  0.3 si,  0.3 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu1  :  55.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu2  :  30.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu3  :  30.0 us,  0.3 sy,  0.0 ni, 98.7 id,  1.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu4  :  45.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu5  :  40.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu6  :  30.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu7  :  30.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br></pre></td></tr></table></figure><p>从指标数据上看到每一个CPU的使用率都没有超过60%，说明CPU的利用率还是蛮高的，这个时候不用担心，可以持续关注。但是一旦用户进程的CPU使用率把每一个CPU都吃满了，那就要好好的排查一下了，如果用户进程是java进程，那么直接跳到第六章吧，有详细的排查介绍；如果是其他进程，</p><h4 id="52-内存排查"><a class="markdownIt-Anchor" href="#52-内存排查"></a> 5.2 内存排查</h4><h4 id="53-io排查"><a class="markdownIt-Anchor" href="#53-io排查"></a> 5.3 IO排查</h4><h4 id="54-网络排查"><a class="markdownIt-Anchor" href="#54-网络排查"></a> 5.4 网络排查</h4><h3 id="六-java进程解决"><a class="markdownIt-Anchor" href="#六-java进程解决"></a> 六、Java进程解决</h3><h4 id="61-查看占用资源最高的java进程"><a class="markdownIt-Anchor" href="#61-查看占用资源最高的java进程"></a> 6.1 查看占用资源最高的Java进程</h4><h4 id="62-查看进程中占用资源最高的线程"><a class="markdownIt-Anchor" href="#62-查看进程中占用资源最高的线程"></a> 6.2 查看进程中占用资源最高的线程</h4><h4 id="63-输出线程栈信息"><a class="markdownIt-Anchor" href="#63-输出线程栈信息"></a> 6.3 输出线程栈信息</h4><h4 id="64-分析线程栈"><a class="markdownIt-Anchor" href="#64-分析线程栈"></a> 6.4 分析线程栈</h4><h4 id="65-缺陷解决"><a class="markdownIt-Anchor" href="#65-缺陷解决"></a> 6.5 缺陷解决</h4><h3 id="七-mysql进程解决"><a class="markdownIt-Anchor" href="#七-mysql进程解决"></a> 七、MySQL进程解决</h3><h4 id="71-查询processlist"><a class="markdownIt-Anchor" href="#71-查询processlist"></a> 7.1 查询processlist</h4><h4 id="72-判定慢查询"><a class="markdownIt-Anchor" href="#72-判定慢查询"></a> 7.2 判定慢查询</h4><h4 id="73-查询死锁"><a class="markdownIt-Anchor" href="#73-查询死锁"></a> 7.3 查询死锁</h4><h3 id="八-其他因素解决"><a class="markdownIt-Anchor" href="#八-其他因素解决"></a> 八、其他因素解决</h3><h3 id="九-工具介绍"><a class="markdownIt-Anchor" href="#九-工具介绍"></a> 九、工具介绍</h3><h4 id="91-prometheus"><a class="markdownIt-Anchor" href="#91-prometheus"></a> 9.1 Prometheus</h4><h5 id="911-node_exporter设置"><a class="markdownIt-Anchor" href="#911-node_exporter设置"></a> 9.1.1 node_exporter设置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">node_exporter监听的端口，默认是9100，若需要修改则通过此参数。</span></span><br><span class="line">--web.listen-address=":9100"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">获取metric信息的url，默认是/metrics，若需要修改则通过此参数</span></span><br><span class="line">--web.telemetry-path="/metrics"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置日志级别</span></span><br><span class="line">--log.level="info"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置打印日志的格式，若有自动化日志提取工具可以使用这个参数规范日志打印的格式</span></span><br><span class="line">--log.format="logger:stderr"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过正则表达式忽略某些磁盘的信息收集</span></span><br><span class="line">--collector.diskstats.ignored-devices="^(ram|loop|fd|(h|s|v|xv)d[a-z]|nvme\\d+n\\d+p)\\d+$"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过正则表达式忽略某些文件系统挂载点的信息收集</span></span><br><span class="line">--collector.filesystem.ignored-mount-points="^/(dev|proc|sys|var/lib/docker/.+)($|/)"  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过正则表达式忽略某些文件系统类型的信息收集</span></span><br><span class="line">--collector.filesystem.ignored-fs-types="^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过正则表达式忽略某些网络类的信息收集</span></span><br><span class="line">--collector.netclass.ignored-devices="^$"  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过正则表达式忽略某些网络设备的信息收集</span></span><br><span class="line">--collector.netdev.ignored-devices="^$"  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过正则表达式配置需要获取的网络状态信息</span></span><br><span class="line">--collector.netstat.fields="^$"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过正则表达式配置vmstat返回信息中需要收集的选项 </span></span><br><span class="line">--collector.vmstat.fields="^(oom_kill|pgpg|pswp|pg.*fault).*"</span><br></pre></td></tr></table></figure><p>启动之后请求路径为：<code>http://ip:9100/metrics</code></p><p>#####9.1.2 Prometheus设置</p><p>Prometheus主要使用PromQL进行数据的分析和计算，PromQL的语法和函数不在这里讨论，可以到官网学习一下，我们主要看下<code>prometheus.yml</code>的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置Alertmanager</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alertmanagers:</span> <span class="comment"># 从命名上看就是可以配置多个alertmanager</span></span><br><span class="line"><span class="attr">  - static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['ip:9093']</span> <span class="comment"># ip是Alertmanager所在机器的ip，9093是Alertmanager的端口，可以配置多个，同时发送</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置告警监控rule</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"rules/*.yml"</span></span><br><span class="line">  <span class="comment"># - "rules2/*yml" # 这是一个链表，可以配置多个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置采集监听</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node_exporter'</span></span><br><span class="line"><span class="attr">    metrics_path:</span> <span class="string">/metrics</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['ip:9100',</span> <span class="string">'ip1:9100'</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>#####9.1.3 Alertmanager设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">resolve_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = 5m ]</span></span><br><span class="line"><span class="string">  [ smtp_from: &lt;tmpl_string&gt; ] </span></span><br><span class="line"><span class="string">  [ smtp_smarthost: &lt;string&gt; ] </span></span><br><span class="line"><span class="string">  [ smtp_hello: &lt;string&gt; | default = "localhost" ]</span></span><br><span class="line"><span class="string">  [ smtp_auth_username: &lt;string&gt; ]</span></span><br><span class="line"><span class="string">  [ smtp_auth_password: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string">  [ smtp_auth_identity: &lt;string&gt; ]</span></span><br><span class="line"><span class="string">  [ smtp_auth_secret: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string">  [ smtp_require_tls: &lt;bool&gt; | default = true ]</span></span><br><span class="line"><span class="string">  [ slack_api_url: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string">  [ victorops_api_key: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string">  [ victorops_api_url: &lt;string&gt; | default = "https://alert.victorops.com/integrations/generic/20131114/alert/" ]</span></span><br><span class="line"><span class="string">  [ pagerduty_url: &lt;string&gt; | default = "https://events.pagerduty.com/v2/enqueue" ]</span></span><br><span class="line"><span class="string">  [ opsgenie_api_key: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string">  [ opsgenie_api_url: &lt;string&gt; | default = "https://api.opsgenie.com/" ]</span></span><br><span class="line"><span class="string">  [ hipchat_api_url: &lt;string&gt; | default = "https://api.hipchat.com/" ]</span></span><br><span class="line"><span class="string">  [ hipchat_auth_token: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string">  [ wechat_api_url: &lt;string&gt; | default = "https://qyapi.weixin.qq.com/cgi-bin/" ]</span></span><br><span class="line"><span class="string">  [ wechat_api_secret: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string">  [ wechat_api_corp_id: &lt;string&gt; ]</span></span><br><span class="line"><span class="string">  [ http_config: &lt;http_config&gt; ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">templates:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;filepath&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">route:</span> <span class="string">&lt;route&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">&lt;receiver&gt;</span> <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">inhibit_rules:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;inhibit_rule&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><ol><li>Grafana设置</li></ol><h4 id="92-netdata"><a class="markdownIt-Anchor" href="#92-netdata"></a> 9.2 Netdata</h4><h4 id="93-shell"><a class="markdownIt-Anchor" href="#93-shell"></a> 9.3 Shell</h4><h5 id="931-用脚本统计出来处于运行队列的进程"><a class="markdownIt-Anchor" href="#931-用脚本统计出来处于运行队列的进程"></a> 9.3.1 用脚本统计出来处于运行队列的进程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">LANG=C</span><br><span class="line">PATH=/sbin:/usr/sbin:/bin:/usr/bin</span><br><span class="line">interval=1</span><br><span class="line">length=86400</span><br><span class="line">for i in $(seq 1 $(expr $&#123;length&#125; / $&#123;interval&#125;)); do</span><br><span class="line">  date</span><br><span class="line">  LANG=C ps -eTo stat,pid,tid,ppid,comm --no-header | sed -e 's/^ \*//' | perl -nE 'chomp;say if (m!^\S*[RD]+\S*!)'</span><br><span class="line">  date</span><br><span class="line">  cat /proc/loadavg</span><br><span class="line">  echo -e "\n"</span><br><span class="line">  sleep $&#123;interval&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>运行结果（R代表运行中的队列，D是不可中断的睡眠进程）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tue Feb  2 23:31:12 CST 2021</span><br><span class="line">R         10      10       2 rcu_sched</span><br><span class="line">R&lt;sl    1109    1138       1 AliYunDun</span><br><span class="line">R+    188837  188837  188832 ps</span><br><span class="line">D+    188839  188839  188832 perl</span><br><span class="line">Tue Feb  2 23:31:12 CST 2021</span><br><span class="line">0.00 0.00 0.00 5/272 188841</span><br></pre></td></tr></table></figure><p>在load比较高的时候，有大量的进程处于R或者D状态，他们就是造成load上升的元凶</p><h5 id="932-查cpu使用率比较高的线程小脚本"><a class="markdownIt-Anchor" href="#932-查cpu使用率比较高的线程小脚本"></a> 9.3.2 查CPU使用率比较高的线程小脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">LANG=C</span><br><span class="line">PATH=/sbin:/usr/sbin:/bin:/usr/bin</span><br><span class="line">interval=1</span><br><span class="line">length=86400</span><br><span class="line">for i in $(seq 1 $(expr $&#123;length&#125; / $&#123;interval&#125;));do</span><br><span class="line">  date</span><br><span class="line">  LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20</span><br><span class="line">  date</span><br><span class="line">  LANG=C cat /proc/loadavg</span><br><span class="line">&#123; LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | sed -e 's/^ *//' | tr -s ' ' | grep -v CPU | sort -n -r | cut -d ' ' -f 1 | xargs -I&#123;&#125; echo -n "&#123;&#125; + " &amp;&amp; echo ' 0'; &#125; | bc -l</span><br><span class="line">  sleep $&#123;interval&#125;</span><br><span class="line">done</span><br><span class="line">fuser -k $0</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Tue Feb  2 23:32:23 CST 2021</span><br><span class="line"> 2.0  188867  188867  188807 sh</span><br><span class="line"> 0.4   45570   45590   45505 RemoteInvocatio</span><br><span class="line"> 0.2    1109    1124       1 AliYunDun</span><br><span class="line"> 0.0  189469  189469  188867 head</span><br><span class="line"> 0.0  189468  189468  188867 sort</span><br><span class="line"> 0.0  189467  189467  188867 grep</span><br><span class="line"> 0.0  189466  189466  188867 ps</span><br><span class="line"> 0.0  188807  188807  188806 bash</span><br><span class="line"> 0.0  188806  188806  188804 sshd</span><br><span class="line"> 0.0  188804  188804   28948 sshd</span><br><span class="line"> 0.0  188789  188789       2 kworker/0:0-events_power_efficient</span><br><span class="line"> 0.0  188778  188778       2 kworker/0:2-xfs-cil/vda1</span><br><span class="line"> 0.0  188738  188738       2 kworker/0:1-xfs-cil/vda1</span><br><span class="line"> 0.0  188143  188143       2 kworker/u2:0-events_unbound</span><br><span class="line"> 0.0  178025  178025       2 kworker/u2:2-events_unbound</span><br><span class="line"> 0.0  102042  102053       1 Timer thread</span><br><span class="line"> 0.0  102042  102052       1 assist_daemon</span><br><span class="line"> 0.0  102042  102051       1 Timer thread</span><br><span class="line"> 0.0  102042  102050       1 assist_daemon</span><br><span class="line"> 0.0  102042  102048       1 assist_daemon</span><br><span class="line">Tue Feb  2 23:32:23 CST 2021</span><br><span class="line">0.00 0.00 0.00 7/272 189471</span><br><span class="line">2.6</span><br></pre></td></tr></table></figure><h4 id="94-stress"><a class="markdownIt-Anchor" href="#94-stress"></a> 9.4 stress</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CPU</span></span><br><span class="line">stress --cpu 2 # 产生 2 个工作进程对 CPU 施加压力，也就是将会占用两个 CPU 核心</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Memory</span></span><br><span class="line">stress --vm 1 --vm-bytes 128M --vm-hang 0 # 产生 1 个工作进程，占用 128MB 内存并保持</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> IO</span></span><br><span class="line">stress --io 1 # 产生 1 个工作进程对 IO 施加压力</span><br></pre></td></tr></table></figure><h4 id="95-lookbusy"><a class="markdownIt-Anchor" href="#95-lookbusy"></a> 9.5 lookbusy</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CPU</span></span><br><span class="line">lookbusy -c 50 # 占用所有 CPU 核心各 50%</span><br><span class="line">lookbusy -c 50 -n 2 # 占用两个 CPU 核心各 50%</span><br><span class="line">lookbusy -c 50-80 -r curve # 占用所有 CPU 核心在 50%-80% 左右浮动</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Memory</span></span><br><span class="line">lookbusy -c 0 -m 128MB -M 1000 # 每 1000 毫秒，循环释放并分配 128MB 内存</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> IO</span></span><br><span class="line">lookbusy -c 0 -d 1GB -b 1MB -D 10 # 每 10 毫秒，循环进行 1MB 磁盘写入，临时文件不超过 1GB</span><br></pre></td></tr></table></figure><h3 id="十-命令介绍"><a class="markdownIt-Anchor" href="#十-命令介绍"></a> 十、命令介绍</h3><h4 id="101-top命令"><a class="markdownIt-Anchor" href="#101-top命令"></a> 10.1 top命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">top - 23:59:34 up 141 days, 43 min,  1 user,  load average: 0.11, 0.17, 0.18</span><br><span class="line">Tasks: 116 total,   1 running, 115 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu0  :  3.7 us,  3.3 sy,  0.0 ni, 91.6 id,  1.3 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu1  :  4.4 us,  3.7 sy,  0.0 ni, 90.9 id,  1.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem :  8010688 total,   195456 free,  7432208 used,   383024 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.   331660 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                            </span><br><span class="line">28587 root      20   0 1042440 412456   9108 S   2.3  5.1   2265:28 dockerd                                                                                            </span><br><span class="line">29316 systemd+  20   0 1786752 418820   1632 S   1.0  5.2 804:25.69 mysqld                                                                                             </span><br><span class="line"> 9953 root      20   0       0      0      0 S   0.7  0.0   0:06.79 kworker/u4:0                                                                                       </span><br><span class="line">13359 systemd+  20   0 2223112 112728   1240 S   0.7  1.4 601:31.44 beam.smp                                                                                           </span><br><span class="line">26834 root      20   0  861360  37928   2208 S   0.7  0.5 558:16.32 containerd                                                                                         </span><br><span class="line">    1 root      20   0  191188   3144   1512 S   0.3  0.0 259:32.99 systemd                                                                                            </span><br><span class="line">  335 root      20   0   94508  39056  38660 S   0.3  0.5 230:56.75 systemd-journal                                                                                    </span><br><span class="line"> 9688 root      20   0   44800   1000    552 S   0.3  0.0  48:11.88 systemd-udevd                                                                                      </span><br><span class="line">11558 root      20   0 4559780 275692      0 S   0.3  3.4 267:19.61 java                                                                                               </span><br><span class="line">13161 root      20   0   17892   1720   1152 S   0.3  0.0   1:48.83 assist_daemon                                                                                      </span><br><span class="line">18410 1000      20   0 4956704   2.3g      0 S   0.3 30.7 607:24.69 java                                                                                               </span><br><span class="line">23197 root      20   0       0      0      0 S   0.3  0.0   0:00.38 kworker/1:1                                                                                        </span><br><span class="line">28907 200       20   0 5670264   1.7g      0 S   0.3 22.6 819:54.59 java                                                                                               </span><br><span class="line">29243 systemd+  20   0  137788   8316    276 S   0.3  0.1 234:31.14 redis-server</span><br></pre></td></tr></table></figure><p>第一行解释：<br>top - 23:59:34 up 141 days, 43 min,  1 user,  load average: 0.11, 0.17, 0.18<br>23:59:34：系统当前时间<br>up 141 days, 43 min ：系统开机到现在经过了2天<br>1 users：当前1用户在线<br>load average: 0.11, 0.17, 0.18：系统1分钟、5分钟、15分钟的CPU负载信息.<br>备注：load average后面三个数值的含义是最近1分钟、最近5分钟、最近15分钟系统的负载值。这个值的意义是，单位时间段内CPU活动进程数。如果你的机器为单核，那么只要这几个值均&lt;1，代表系统就没有负载压力，如果你的机器为N核，那么必须是这几个值均＜N才可认为系统没有负载压力。</p><p>第二行解释：<br>Tasks: 116 total,   1 running, 115 sleeping,   0 stopped,   0 zombie<br>116 total：当前有116个任务<br>1 running：1个任务正在运行<br>115 sleeping：115个进程处于睡眠状态<br>0 stopped：停止的进程数<br>0 zombie：僵死的进程数</p><p>第三/四行解释：<br>%Cpu0  :  3.7 us,  3.3 sy,  0.0 ni, 91.6 id,  1.3 wa,  0.0 hi,  0.0 si,  0.0 st<br>3.7%us：用户态进程占用第一/二个CPU时间百分比<br>3.3%sy：内核占用第一/二个CPU时间百分比<br>0.0%ni：renice值为负的任务的用户态进程的CPU时间百分比。nice是优先级的意思<br>91.6%id：第一/二个CPU空闲时间百分比<br>1.3%wa：等待I/O的CPU时间百分比<br>0.0%hi：第一/二个CPU硬中断时间百分比<br>0.0%si：第一/二个CPU软中断时间百分比</p><p>第五行解释：<br>KiB Mem :  8010688 total,   195456 free,  7432208 used,   383024 buff/cache<br>8010688k total：物理内存总数<br>195456k used： 使用的物理内存<br>7432208k free：空闲的物理内存<br>383024k cached：用作缓存的内存</p><p>第五行解释：<br>KiB Swap:        0 total,        0 free,        0 used.   331660 avail Mem<br>0k total：交换空间的总量<br>0k used： 使用的交换空间<br>0k free：空闲的交换空间<br>331660k cached：缓存的交换空间</p><p>最后一行：<br>PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND<br>PID：进程ID<br>USER：进程的所有者<br>PR：进程的优先级<br>NI：nice值<br>VIRT：占用的虚拟内存<br>RES：占用的物理内存<br>SHR：使用的共享内存<br>S：进行状态  S休眠 R运行 Z僵尸进程<br>%CPU：占用的CPU<br>%MEM：占用内存<br>TIME+： 占用CPU的时间的累加值<br>COMMAND：启动命令</p><h4 id="102-uptime命令"><a class="markdownIt-Anchor" href="#102-uptime命令"></a> 10.2 uptime命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top - 23:59:34 up 141 days, 43 min,  1 user,  load average: 0.11, 0.17, 0.18</span><br></pre></td></tr></table></figure><p>第一行解释：<br>top - 23:59:34 up 141 days, 43 min,  1 user,  load average: 0.11, 0.17, 0.18<br>23:59:34：系统当前时间<br>up 141 days, 43 min ：系统开机到现在经过了2天<br>1 users：当前1用户在线<br>load average: 0.11, 0.17, 0.18：系统1分钟、5分钟、15分钟的CPU负载信息.<br>备注：load average后面三个数值的含义是最近1分钟、最近5分钟、最近15分钟系统的负载值。这个值的意义是，单位时间段内CPU活动进程数。如果你的机器为单核，那么只要这几个值均&lt;1，代表系统就没有负载压力，如果你的机器为N核，那么必须是这几个值均＜N才可认为系统没有负载压力。</p><h4 id="103-w命令"><a class="markdownIt-Anchor" href="#103-w命令"></a> 10.3 w命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00:05:53 up 141 days, 50 min,  1 user,  load average: 0.14, 0.20, 0.20</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    183.209.110.74   23:59    1.00s 10:07m  0.00s -bash</span><br></pre></td></tr></table></figure><p>第一行解释：<br>top - 23:59:34 up 141 days, 43 min,  1 user,  load average: 0.11, 0.17, 0.18<br>23:59:34：系统当前时间<br>up 141 days, 43 min ：系统开机到现在经过了2天<br>1 users：当前1用户在线<br>load average: 0.11, 0.17, 0.18：系统1分钟、5分钟、15分钟的CPU负载信息.<br>备注：load average后面三个数值的含义是最近1分钟、最近5分钟、最近15分钟系统的负载值。这个值的意义是，单位时间段内CPU活动进程数。如果你的机器为单核，那么只要这几个值均&lt;1，代表系统就没有负载压力，如果你的机器为N核，那么必须是这几个值均＜N才可认为系统没有负载压力。</p><p>第二行解释：<br>USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT<br>USER —登录的用户名<br>TTY —登录后系统分配的终端号<br>FROM—远程主机名，即从哪儿登录来的<br>LOGIN@—何时登录<br>IDLE—空闲了多长时间，表示用户闲置的时间。这是一个计时器，一旦用户执行任何操作，该计时器便会被重置<br>JCPU—和该终端（tty）连接的所有进程占用的时间，这个时间里并不包括过去的后台作业时间，但却包括当前正在运行的后台作业所占用的时间<br>PCPU—指当前进程（即在WHAT项中显示的进程）所占用的时间<br>WHAT—当前正在运行进程的命令行</p><h4 id="104-vmstat命令"><a class="markdownIt-Anchor" href="#104-vmstat命令"></a> 10.4 vmstat命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 1  0      0 202176  31500 347424    0    0    58   144    1    1  2  2 95  1  0</span><br></pre></td></tr></table></figure><p><code>r</code>：当前运行的进程数量，也就是当前有多少进程真正的分配到了CPU，这个值很重要，可以即刻看出机器压力，值超出CPU数量的时候就要着重关注了</p><p><code>b</code>：当前阻塞的进程数量，值越高压力越大</p><p><code>swpd</code>：虚拟内存已使用的大小，如果这个值不为0，则表示机器的物理内存已经不够使了，如果非程序内存泄漏，那就加内存吧</p><p><code>free</code>：空闲的物理内存大小，单位byte，这里表示当前机器的物理内存还有202176byte(197M)可用，8G的内存得到了充分的利用</p><p><code>buff</code>：用来存储目录里面有什么内容、权限等信息的缓存，</p><p><code>cache</code>：用来记忆我们打开的文件,给文件做缓冲，提升了内存的使用效率，在快上又快了一步，神奇~</p><p><code>si</code>：每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了</p><p><code>so</code>：每秒虚拟内存写入磁盘的大小，判断规则和<code>si</code>一样</p><p><code>bi</code>：块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte</p><p><code>bo</code>：块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整</p><p><code>in</code>：每秒CPU的中断次数，包括时间中断</p><p><code>cs</code>：每秒上下文切换次数</p><p><code>us</code>：用户CPU时间</p><p><code>sy</code>：系统CPU时间</p><p><code>id</code>：空闲 CPU时间，id + us + sy = 100</p><p><code>wa</code>：等待IO时间</p><p><code>st</code>：虚拟机偷取的CPU时间的百分比(具体是啥意思，还没搞懂，暂时不需要关注这个)</p><h4 id="105-sar命令"><a class="markdownIt-Anchor" href="#105-sar命令"></a> 10.5 sar命令</h4><h4 id="106-free命令"><a class="markdownIt-Anchor" href="#106-free命令"></a> 10.6 free命令</h4><h4 id="107-df命令"><a class="markdownIt-Anchor" href="#107-df命令"></a> 10.7 df命令</h4><h4 id="108-du命令"><a class="markdownIt-Anchor" href="#108-du命令"></a> 10.8 du命令</h4><h4 id="109-cpu使用率"><a class="markdownIt-Anchor" href="#109-cpu使用率"></a> 10.9 CPU使用率</h4><blockquote><p>对单核CPU</p></blockquote><p>以下四条中的任何一条命令都可以将CPU吃满</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/zero &gt; /dev/null</span><br><span class="line">cat /dev/urandom | gzip -9 &gt; /dev/null</span><br><span class="line">dd if=/dev/zero of=/dev/null</span><br><span class="line">yes &gt; /dev/null</span><br></pre></td></tr></table></figure><blockquote><p>对多核</p></blockquote><p>使用循环或者管道实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 循环</span></span><br><span class="line">for i in 'seq 1 $(cat /proc/cpuinfo | grep "physical id" | wc -l)'; do cat /dev/zero &gt; /dev/null &amp; done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 管道</span></span><br><span class="line">cat /dev/urandom | gzip -9 | gzip -d | gzip -9 | gzip -d &gt; /dev/null</span><br></pre></td></tr></table></figure><h4 id="1010-内存使用率"><a class="markdownIt-Anchor" href="#1010-内存使用率"></a> 10.10 内存使用率</h4><p>内存使用率有点难搞，有人推荐使用<code>stress</code> 和<code>lookbusy</code>工具来实现，参见<strong>9.4</strong>和<strong>9.5</strong></p><h4 id="1011-磁盘使用率"><a class="markdownIt-Anchor" href="#1011-磁盘使用率"></a> 10.11 磁盘使用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=loadfile bs=1M count=1024 # 输出 1024M 的 \0 到 loadfile</span><br><span class="line"></span><br><span class="line">while true; do cp loadfile loadfile1; done # 无限循环复制文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;一-前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-前言&quot;&gt;&lt;/a&gt; 一、前言&lt;/h3&gt;
&lt;h4 id=&quot;11-工具&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11-工具
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://chuanyichuan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>MyBatis自定义TypeHandler解决字段映射问题</title>
    <link href="http://chuanyichuan.github.io/2021/01/18/MyBatis%E8%87%AA%E5%AE%9A%E4%B9%89TypeHandler%E8%A7%A3%E5%86%B3%E5%AD%97%E6%AE%B5%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98/"/>
    <id>http://chuanyichuan.github.io/2021/01/18/MyBatis自定义TypeHandler解决字段映射问题/</id>
    <published>2021-01-18T15:22:00.000Z</published>
    <updated>2021-01-18T17:16:58.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小林子：串哥</p><p>串一串：干哈啊，又来</p><p>小林子：如果MySQL一张表中一个字段存储的数据格式是&quot;1,2,3,4,5&quot;，也就是逗号分隔的，我如何能让别的使用者在无感知的情况下，只用List&lt;Integer&gt;来传输和接收？持久层用的MyBatis。你滴明白我的意思吗？</p><p>串一串：不明白</p><p>小林子：…</p><p>串一串：你知道MyBatis中有一个类叫<code>BaseTypeHandler</code>吗？这个类可以满足你的需求。</p><p>小林子：具体要怎么做？我有点懵，没接触过这个类，它是干嘛的？</p><p>串一串：我们来看个例子</p></blockquote><p>创建一张表待用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table qfant_message.demo (</span><br><span class="line">id int auto_increment primary key,</span><br><span class="line">name varchar(10) null,</span><br><span class="line">hobbies varchar(100) null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后新建一个SpringBoot工程，在工程中引入<code>mybatis-generator</code>，我们使用它来生成Mapper文件，如果不会的话，自行谷歌，这里不做详细讲解，下一篇再说。</p><p>在生成Mapper文件之前，我们先定义一个处理字段<code>hobbies</code>的<code>TypeHandler</code>，命名为<code>ListTypeHandler</code>，这里问个问题：为什么不叫<code>HobbiesTypeHandler</code>呢？这样应该和字段更加贴合啊。原因是这个Handler不仅仅是能处理<code>hobbies</code>，它可以处理所有相同情况的任何表的任何字段。这个类继承自<code>org.apache.ibatis.type.BaseTypeHandler</code>，来看下简化后的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">TypeReference</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">TypeHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parameter == <span class="keyword">null</span>) &#123;</span><br><span class="line">      ps.setNull(i, jdbcType.TYPE_CODE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      setNonNullParameter(ps, i, parameter, jdbcType);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getNullableResult(rs, columnName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getNullableResult(rs, columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getNullableResult(cs, columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，不论是通过哪一个<code>getResult</code>方法获取数据，都是去调用下面的几个抽象方法，MyBatis帮我们实现了很多常用的类型的Handler，都在<code>org.apache.ibatis.type</code>包里面，截图看下吧，免得以为在忽悠你</p><img src="/images/image-20210118235512640.png" alt="image-20210118235512640" style="zoom:50%;"><blockquote><p>小林子：那这里面有没有能满足我这个需求的Handler？如果有的话我就直接用了</p><p>串一串：你去看看，这里我说一下怎么重复造轮子</p></blockquote><p>根据上述内容，我们就可以来写<code>ListTypeHandler</code>了，在写之前先整理一下思路：</p><p>因为我们实体类中<code>hobbies</code>属性是<code>java.util.List</code>类型的，而数据库表中<code>hobbies</code>字段是<code>varchar</code>类型的，所以我们需要在更新(插入)之前和查询之后对数据进行一次转换</p><ol><li>插入之前：将List中的数据转换为以逗号分隔的字符串</li><li>查询之后：将逗号分隔的字符串转换为List结构</li></ol><p>思路理顺了，我们来看看具体的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc.kevinlu.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qfant.sms.data.model.DemoDO;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MappedJdbcTypes</span>(value = &#123; JdbcType.VARCHAR &#125;)</span><br><span class="line"><span class="comment">//① @MappedTypes(value = DemoDO.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">List</span>&lt;<span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, List&lt;Integer&gt; parameter, JdbcType jdbcType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String d = parameter.stream().map(v -&gt; String.valueOf(v)).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">        ps.setString(i, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String values = rs.getString(columnName);</span><br><span class="line">        <span class="keyword">return</span> getResults(values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String values = rs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">return</span> getResults(values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String values = cs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">return</span> getResults(values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getResults</span><span class="params">(String values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(values)) &#123;</span><br><span class="line">            String[] data = values.split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(data).mapToInt(v -&gt; Integer.parseInt(v)).boxed().collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后生成对应的Mapper和DO实体类，刚才说了我们使用的是<code>mybatis-generator</code>，这里直接贴上<code>&lt;table&gt;</code>的相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"demo"</span> <span class="attr">domainObjectName</span>=<span class="string">"DemoDO"</span> <span class="attr">mapperName</span>=<span class="string">"DemoMapper"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableCountByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableDeleteByExample</span>=<span class="string">"true"</span> <span class="attr">enableInsert</span>=<span class="string">"true"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableUpdateByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">selectByExampleQueryId</span>=<span class="string">"true"</span> <span class="attr">enableSelectByPrimaryKey</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"MySql"</span> <span class="attr">identity</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"hobbies"</span> <span class="attr">property</span>=<span class="string">"hobbies"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">javaType</span>=<span class="string">"java.util.List"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">typeHandler</span>=<span class="string">"cc.kevinlu.handler.ListTypeHandler"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里我们使用标签<code>&lt;columnOverride&gt;</code>重写了column的定义，这里一定要指明<code>javaType</code>和<code>typeHandler</code>，<code>javaType</code>的目的是让生成的<code>DemoDO</code>的属性<code>hobbies</code>声明为<code>java.util.List</code>，如果不加该字段的话，默认会根据<code>jdbcType=&quot;VARCHAR&quot;</code>生成<code>java.lang.String</code>类型，然后<code>typeHandler</code>指向我们刚创建的<code>ListTypeHandler</code>，这样在生成DemoMapper.xml的时候，会在对应的字段上加上<code>typeHandler</code>，否则需要我们挨个儿位置的去修改，xml中的内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"cc.kevinlu.data.model.DemoDO"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    SELECT LAST_INSERT_ID()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into demo (name, hobbies)</span><br><span class="line">  values (</span><br><span class="line">  #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">  #&#123;hobbies,jdbcType=VARCHAR,typeHandler=com.qfant.sms.handler.ListTypeHandler&#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>小林子：是不是这样就可以直接使用了？</p><p>串一串：你有没有注意到<code>ListTypeHandler</code>上有一个被注释掉的注解，把那个注释打开，然后value指向DO实体类即可，这个注释的意思是<code>指定该Handler映射的java类</code>，value是一个数组，可以指定一组映射类，当然也可以不指定。即使指定了，也可以用于其他类型，然后<code>@MappedJdbcTypes</code>映射的是jdbc的类型</p><p>小林子：那现在是不是可以测试啦？走一波~</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DemoMapper demoMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;DemoDO&gt; data = demoMapper.selectByExample(<span class="keyword">new</span> DemoDOExample());</span><br><span class="line">  data.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出：</p><p>Demo1DO [Hash = 3112387, id=1, name=123, hobbies=[1, 2, 3], serialVersionUID=1]<br>Demo1DO [Hash = 3294608, id=2, name=456, hobbies=[4, 5, 6], serialVersionUID=1]</p></blockquote><hr><p>我们来总结一下：</p><ol><li>MyBatis之所以能解决MySQL字段和Java属性之间的匹配，全都依赖于<code>org.apache.ibatis.type.BaseTypeHandler&lt;T&gt;</code>抽象类，在该类中定义了3个获取结果的方法、1个更新的方法和4个抽象方法，我们可以自定义该抽象类来实现这个4个抽象方法进行Java类的属性和表字段的映射，可以做一些相关的处理。</li><li>MyBatis在<code>org.apache.ibatis.type</code>包中定义了常用的字段映射<code>Handler</code>，并且在服务启动的时候会在<code>TypeHandlerRegistry</code>构造方法中将其注册到一个Map中，而<code>TypeHandlerRegistry</code>是在MyBatis的核心类<code>Configuration</code>中进行的实例化</li><li>自定义的<code>Handler</code>可以全局通用，不受限于某一个字段或某一个Java类</li><li>在生成Mapper时使用<code>&lt;columnOverride&gt;</code>重写<code>column</code>声明，然后需要指定<code>jdbcType</code>和<code>typeHandler</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;小林子：串哥&lt;/p&gt;
&lt;p&gt;串一串：干哈啊，又来&lt;/p&gt;
&lt;p&gt;小林子：如果MySQL一张表中一个字段存储的数据格式是&amp;quot;1,2,3,4,5&amp;quot;，也就是逗号分隔的，我如何能让别的使用者在无感知的情况下，只用List&amp;lt;Integ
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://chuanyichuan.github.io/categories/MyBatis/"/>
    
    
  </entry>
  
  <entry>
    <title>idea打包Java工程为jar</title>
    <link href="http://chuanyichuan.github.io/2021/01/16/idea%E6%89%93%E5%8C%85Java%E5%B7%A5%E7%A8%8B%E4%B8%BAjar/"/>
    <id>http://chuanyichuan.github.io/2021/01/16/idea打包Java工程为jar/</id>
    <published>2021-01-16T13:56:00.000Z</published>
    <updated>2021-01-17T16:49:55.883Z</updated>
    
    <content type="html"><![CDATA[<p>目前创建Java工程大多是使用Maven或者Gradle了，但是在某种情况下，还是需要单独创建一个Java工程来做些事情，正巧最近机缘巧合需要搞这么个事情，因为idea将Java工程打成jar包还是有点麻烦的，所以就此记录一下我的使用方法，废话了半天，往下看吧。</p><ol><li><p>创建一个Java工程</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116220410433.png" alt="image-20210116220410433" style="zoom:50%;"><p>很简单，一直下一步就可以了</p></li><li><p>加入依赖jar包</p><p>新创建好的工程只有一个src目录，只能使用响应的jdk包中的类，我们创建一个名叫lib的Directory，然后把需要的jar包全部都copy到到该目录下，然后选中所有的jar后右击鼠标，选择<code>Add as Library</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116222800748.png" alt="image-20210116222800748" style="zoom:50%;"><p>然后给Library起一个名字，不要和现存的Library重名</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116222945461.png" alt="image-20210116222945461" style="zoom:50%;"><p>这里有三个参数，我们需要关注一下<code>Level</code>这个参数，它指定了该<code>Library</code>的适用范围，分别有Global、Project、Module三种，分别对应全局、项目、模块，这个就不用解释了，如果真有人不懂的话，额。。那就不懂了吧！创建完成之后，根据<code>Add to module</code>选择的module自动加到模块的环境中</p></li><li><p>创建打包策略</p><p>idea右上角有一个<code>project structure</code>，点击一下进入项目配置控制台，或者快捷键<code>command+;</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116224612820.png" alt="image-20210116224612820" style="zoom:50%;"><p>可以到Libraries中查看刚才创建的Library，然后进入到<code>Artifacts</code>创建打包策略，选择<code>From modules with dependencies</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116225003451.png" alt="image-20210116225003451" style="zoom:50%;"><p>接着选择打包要执行的<code>Main</code>方法，点击<code>OK</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116225353055.png" alt="image-20210116225353055" style="zoom:50%;"><p>确定之后，在src目录下会自动生成一个<code>META-INF/MANIFEST.MF</code>文件，文件内容就是指定一下<code>Main-Class</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Manifest-Version</span>: 1<span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">Main-Class</span>: <span class="selector-tag">com</span><span class="selector-class">.qfant</span><span class="selector-class">.sms</span><span class="selector-class">.Main</span></span><br></pre></td></tr></table></figure></li><li><p>执行打包</p><p>以上就是打包前的准备，现在已经准备好了，那就开始打包吧，我没找到快捷键，所以就笨一点吧</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116231258739.png" alt="image-20210116231258739" style="zoom:50%;"><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116234106955.png" alt="image-20210116234106955" style="zoom:50%;"><p>打包完成之后，默认在out目录下就会出现一个jar包，大概是这个样子的</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116234606179.png" alt="image-20210116234606179" style="zoom:50%;"></li><li><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sms-demo.jar</span><br></pre></td></tr></table></figure><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116235732927.png" alt="image-20210116235732927" style="zoom:50%;"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前创建Java工程大多是使用Maven或者Gradle了，但是在某种情况下，还是需要单独创建一个Java工程来做些事情，正巧最近机缘巧合需要搞这么个事情，因为idea将Java工程打成jar包还是有点麻烦的，所以就此记录一下我的使用方法，废话了半天，往下看吧。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://chuanyichuan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据迁移到Elasticsearch方案</title>
    <link href="http://chuanyichuan.github.io/2021/01/14/MySQL%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0Elasticsearch%E6%96%B9%E6%A1%88/"/>
    <id>http://chuanyichuan.github.io/2021/01/14/MySQL数据迁移到Elasticsearch方案/</id>
    <published>2021-01-14T02:38:00.000Z</published>
    <updated>2021-01-14T02:54:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL单表建议存储数据为5kw，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL单表建议存储数据为5kw，&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL全量备份和增量备份</title>
    <link href="http://chuanyichuan.github.io/2021/01/13/MySQL%E5%85%A8%E9%87%8F%E5%A4%87%E4%BB%BD%E5%92%8C%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD/"/>
    <id>http://chuanyichuan.github.io/2021/01/13/MySQL全量备份和增量备份/</id>
    <published>2021-01-13T15:50:00.000Z</published>
    <updated>2021-01-14T02:30:04.326Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL目前是市面上比较流程的关系型数据库，很多人使用MySQL里的数据真的安全吗？如果发生以下问题的话：</p><ul><li>MySQL数据目录所在磁盘损坏</li><li>MySQL服务器发生故障</li><li>人为操作失误导致删除了一些数据</li><li>黑客入侵导致数据被攻陷等问题</li></ul><p>这个时候如果没有备份数据库中的数据，造成的影响将是非常严重的，但是我们备份数据不能每天手动的去全量导出，如果放假忘记了或者啥啥啥的，咋整？所以还是要让备份交给服务器去做调度。</p><p>这里推荐的备份工具是<code>innobackupex</code>，首先要安装它，步骤如下(centos)：</p><p>官网：<a href="https://www.percona.com/downloads/Percona-XtraBackup-2.4/" target="_blank" rel="noopener">https://www.percona.com/downloads/Percona-XtraBackup-2.4/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install percona-xtrabackup</span><br></pre></td></tr></table></figure><blockquote><p>如果安装失败，那么就更改一下yum源，然后再执行安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 备份源</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 更新阿里云源</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>在安装的过程中，如果出现依赖报错，那么就安装一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL</span><br></pre></td></tr></table></figure><p>完整的命令过程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份源</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新阿里云源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装备份工具</span></span><br><span class="line">yum -y install percona-xtrabackup</span><br></pre></td></tr></table></figure><p>测试是否安装成功，执行一下命令<code>innobackupex --help</code>，出现以下内容即为安装成功</p><img src="/images/image-20210114004925713.png" alt="image-20210114004925713" style="zoom:50%;"><hr><p>备份工具已经准备好了，那么我们就开始编写备份脚本（因为我们备份是一个逻辑流程，不是一条命令能解决的，这里就不特地讲解备份命令了，在下方的脚本中进行相关的解释）</p><ol><li>全量备份</li></ol><p>首先看一下全量备份，也就是将整个数据库的所有数据(包括库、表、视图、表数据等)，脚本的主要逻辑是这样的：</p><ul><li>声明数据库账号信息和数据留存时间等基础信息</li><li>动态创建备份文件临时存储目录</li><li>执行备份命令开始数据备份</li><li>校验备份结果是否超过，如果成功则将最新备份的文件目录写入到指定文件中(用于动态增量备份)</li><li>如果失败，则给备份管理人员发送告警提醒邮件</li><li>筛选数据备份存储目录中指定日期之前的备份记录，然后删除已经过期的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> -e</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 声明数据库账号信息和数据留存时间等基础信息</span></span><br><span class="line">user=root # 数据库用户名</span><br><span class="line">password=rXH?py2 # 数据库密码</span><br><span class="line">LEAVE_DAY_AGO=$(date -d "-30 day" +'%s')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 动态创建备份文件临时存储目录</span></span><br><span class="line">[ -d /app/backupdb ]|| mkdir -p /app/backupdb &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">[ -d /data/backup/db ]|| mkdir -p /data/backup/db &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">echo "start copying ..." &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 执行备份命令开始数据备份</span></span><br><span class="line">/usr/bin/innobackupex --user="$user" --password="$password" /data/backup/db/ &gt; /app/backupdb/backupdb_log.log 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 校验备份结果是否超过</span></span><br><span class="line">if [ "$?" != "0" ]; then</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.1 备份失败，则给备份管理人员发送告警提醒邮件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;from_email&gt;：发送邮件</span></span><br><span class="line">    # &lt;receiver_email&gt;：多个邮箱以,分隔</span><br><span class="line">    # &lt;smtp_server&gt;：邮箱服务器</span><br><span class="line">    # &lt;send_account&gt;：邮件发送账户名</span><br><span class="line">    # &lt;send_password&gt;：邮件发送账户密码</span><br><span class="line">    /usr/local/bin/sendEmail -f &lt;from_email&gt; -t &lt;receiver_email&gt; -s &lt;smtp_server&gt; -u "数据库备份失败" -o message-charset=utf-8 -xu &lt;send_account&gt; -xp &lt;send_password&gt; -m "数据库备份失败，详情请查看日志文件 /app/backupdb/backupdb_log.log" -o tls=no &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">    exit 1;</span><br><span class="line">else</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.2 备份成功，则将最新备份的文件目录写入到指定文件中(用于动态增量备份)</span></span><br><span class="line">    echo "end copied! ..." &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">    echo `ls -lt /data/backup/db/ | grep - | head -n 1 |awk '&#123;print $9&#125;'` &gt; /data/backup/last_backup_dir_name</span><br><span class="line">fi;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 删除<span class="variable">$&#123;LEAVE_DAY_AGO&#125;</span>天前的备份目录及子目录、文件</span></span><br><span class="line">path="/data/backup/db"</span><br><span class="line">files=$(ls $path)</span><br><span class="line">for filename in $files</span><br><span class="line">do</span><br><span class="line">    file=($&#123;filename:0:10&#125;)</span><br><span class="line">    if echo $file | grep -Eq "[0-9]&#123;4&#125;-[0-9]&#123;1,2&#125;-[0-9]&#123;1,2&#125;" &amp;&amp; date -d $file +%Y%m%d &gt; /dev/null 2&gt;&amp;1;then</span><br><span class="line">        echo $filename 'format is right date' &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">        file_time=$(date -d $file +'%s')</span><br><span class="line">        </span><br><span class="line">        # 校验备份记录是否已过期</span><br><span class="line">        if [ $file_time -lt $LEAVE_DAY_AGO ];then</span><br><span class="line">            rm -rf $path/$filename*</span><br><span class="line">            echo "删除$filename 备份目录" &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">        else</span><br><span class="line">            echo "$filename 为有效期内数据库备份" &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">        fi;</span><br><span class="line">    else</span><br><span class="line">        echo "日期格式不正确:" $filename &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">    fi;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ol start="2"><li>增量备份</li></ol><p>上面讲了全量备份，增量备份是依据于上一次全量备份的记录去做的增量，这里最重要的就是要获取到上一次备份生成的目录，也就是全量备份中4.2中保存的，具体步骤为：</p><ul><li>声明数据库账号信息和数据留存时间等基础信息</li><li>动态创建备份文件临时存储目录</li><li>搜索并获取上一次全量备份的目录地址</li><li>执行备份命令开始数据备份</li><li>校验备份结果是否超过，如果成功则将最新备份的文件目录写入到指定文件中(用于动态增量备份)</li><li>如果失败，则给备份管理人员发送告警提醒邮件</li><li>筛选数据备份存储目录中指定日期之前的备份记录，然后删除已经过期的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> -e</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 声明数据库账号信息和数据留存时间等基础信息</span></span><br><span class="line">user=root # 数据库用户名</span><br><span class="line">password=rXH?py2 # 数据库密码</span><br><span class="line">LEAVE_DAY_AGO=$(date -d "-30 day" +'%s')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 动态创建备份文件临时存储目录</span></span><br><span class="line">[ -d /app/backupdb ]|| mkdir -p /app/backupdb &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">[ -d /data/backup/db/increment ]|| mkdir -p /data/backup/db/increment &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">echo "increment start copying ..." &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 搜索并获取上一次全量备份的目录地址，这里也就是上一次全量备份输出的文件中的内容</span></span><br><span class="line">last_backup_dir_name=`echo /data/backup/last_backup_dir_name`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 执行备份命令开始数据备份</span></span><br><span class="line">/usr/bin/innobackupex --user="$user" --password="$password" --incremental /data/backup/db/increment/ --incremental-basedir /data/backup/db/"$last_backup_dir_name" &gt; /app/backupdb/backupdb_increment_log.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 校验备份结果是否超过</span></span><br><span class="line">if [ "$?" != "0" ]; then</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.1 备份失败，则给备份管理人员发送告警提醒邮件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;from_email&gt;：发送邮件</span></span><br><span class="line">    # &lt;receiver_email&gt;：多个邮箱以,分隔</span><br><span class="line">    # &lt;smtp_server&gt;：邮箱服务器</span><br><span class="line">    # &lt;send_account&gt;：邮件发送账户名</span><br><span class="line">    # &lt;send_password&gt;：邮件发送账户密码</span><br><span class="line">    /usr/local/bin/sendEmail -f &lt;from_email&gt; -t &lt;receiver_email&gt; -s &lt;smtp_server&gt; -u "数据库增量备份失败" -o message-charset=utf-8 -xu &lt;send_account&gt; -xp &lt;send_password&gt; -m "数据库增量备份失败，详情请查看日志文件 /app/backupdb/backupdb_increment_log.log" -o tls=no &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">    exit 1;</span><br><span class="line">else</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.2 备份成功，则将最新备份的文件目录写入到指定文件中(用于动态增量备份)</span></span><br><span class="line">    echo "increment end copied! ..." &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">fi;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 删除30天前的备份目录及子目录、文件</span></span><br><span class="line">path="/data/backup/db/increment"</span><br><span class="line">files=$(ls $path)</span><br><span class="line">for filename in $files</span><br><span class="line">do</span><br><span class="line">    file=($&#123;filename:0:10&#125;)</span><br><span class="line">    if echo $file | grep -Eq "[0-9]&#123;4&#125;-[0-9]&#123;1,2&#125;-[0-9]&#123;1,2&#125;" &amp;&amp; date -d $file +%Y%m%d &gt; /dev/null 2&gt;&amp;1;then</span><br><span class="line">        echo $filename 'format is right date' &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">        file_time=$(date -d $file +'%s')</span><br><span class="line">        # 校验备份记录是否已过期</span><br><span class="line">        if [ $file_time -lt $LEAVE_DAY_AGO ];then</span><br><span class="line">            rm -rf $path/$filename*</span><br><span class="line">            echo "删除$filename 备份目录" &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">        else</span><br><span class="line">            echo "$filename 为有效期内数据库备份" &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">        fi;</span><br><span class="line">    else</span><br><span class="line">        echo "日期格式不正确:" $filename &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">    fi;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p>到目前，MySQL全量和增量备份脚本都已经编写完成了，接下来就是将脚本的执行设置为系统调度<code>corntab</code>中，由crontab进行调度，设置crontab的命令为：<code>crontab -e</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">每周一凌晨4点执行全量备份</span></span><br><span class="line">0 4 * * 1 sh /app/backupdb/db_backup.sh &gt;&gt; /app/backupdb/backupdb_log.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">每天凌晨2点执行增量备份</span></span><br><span class="line">0 2 * * * sh /app/backupdb/db_backup_increment.sh &gt;&gt; /app/backupdb/backupdb_increment_log.log</span><br></pre></td></tr></table></figure><hr><p>既然讲了备份，那么就需要讲一下恢复，如何使用备份的数据进行全量恢复呢？下次再说</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL目前是市面上比较流程的关系型数据库，很多人使用MySQL里的数据真的安全吗？如果发生以下问题的话：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL数据目录所在磁盘损坏&lt;/li&gt;
&lt;li&gt;MySQL服务器发生故障&lt;/li&gt;
&lt;li&gt;人为操作失误导致删除了一些数据&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Maven配置之dependencyManagement</title>
    <link href="http://chuanyichuan.github.io/2021/01/07/Maven%E9%85%8D%E7%BD%AE%E4%B9%8BdependencyManagement/"/>
    <id>http://chuanyichuan.github.io/2021/01/07/Maven配置之dependencyManagement/</id>
    <published>2021-01-07T12:40:00.000Z</published>
    <updated>2021-01-09T18:11:19.197Z</updated>
    
    <content type="html"><![CDATA[<p>今天小林子突然发来一条消息：</p><blockquote><p>小林子：这个关键字是干嘛用的，为什么我的子模块导入不了依赖的jar？是子模块需要配置什么吗？</p><img src="/images/image-20210107214458024.png" alt="image-20210107214458024" style="zoom:50%;"><p>串一串：这是gradle吧，dependencyManagement的作用是什么你知道么？</p><p>小林子：…</p><p>串一串：看来你是不知道哈，在单模块中，我们使用dependencies就可以实现对依赖的引入和管理，并且模块中使用的依赖版本会和我们手动引入的依赖版本一致，版本冲突的可能性较低(但有冲突的可能)，这种是我们常用的管理依赖的办法。</p><p>小林子：懂了</p><p>串一串：懂个屁了懂了，这只是说了单模块，多模块的依赖如何管理你也懂了吗？</p><p>小林子：…那多模块的依赖应该怎么搞呢？是不是在父pom.xml中使用dependencies进行引入就可以了？</p><p>串一串：如果在父模块中直接使用dependencies的话，就会把父模块中引入的依赖全部导入到所有的子模块中，这就会出现一个问题：父模块中依赖了starter-redis.jar，子A模块需要用到starter-redis.jar，而子B模块中用不到该jar包，所以就没有在B的配置文件中配置Redis的相关信息，那么这时启动B模块，就会报错。</p><p>串一串：你看看你的配置文件，除了dependencies和imports之外，还有什么？是不是还有<code>dependencyManagement</code>，这个东西就是出现在父pom.xml中的，当然也可以出现在单模块中，比如我们使用<code>spring-cloud</code>和<code>spring-cloud-alibaba</code>的时候。<code>dependencyManagement</code>不会导入依赖，只是声明一个依赖(声明的范围包括groupId、artifactId、version、type、scope、classifier等)，意思也就是如果在子模块中只需要指定依赖的groupId和artifactId即可，如果该依赖在父或本pom中的<code>dependencyManagement</code>中有声明，则该依赖的其他信息自动继承，无需再次声明version、type、scope等信息。</p><p>小林子：有点懵…</p><p>串一串：给你看一段代码，你解读一下，目录结构是这样的：</p><img src="/images/image-20210108223101327.png" alt="image-20210108223101327" style="zoom:50%;"><ul><li>父模块pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">&gt;</span>          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.kevinlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.61<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>子模块pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">&gt;</span>          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;         <span class="comment">&lt;!-- 引入parent依赖 --&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.kevinlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.kevinlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-one<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>我们在父pom.xml中的<code>dependencyManagement</code>声明了三个依赖jar包，分别是lombok、fastjson、mysql-connector-java，并指定了相关依赖的版本号，，而在子pom.xml中，只引入了<code>spring-boot-starter-web</code>一个依赖，现在我们看一下<code>module-one</code>的所有依赖项：</p><img src="/images/image-20210110004053248.png" alt="image-20210110004053248" style="zoom:50%;"><p>发现在子模块<code>module-one</code>中并没有导入其父模块中<code>dependencyManagement</code>声明的jar包。那么如果我们这个时候想要在<code>module-one</code>中引入fastjson，该怎么做呢？</p><p>小林子：那还不简单么，直接在dependencies中加一个dependency就好了啊，就这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.61<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>串一串：嗯，不算太笨嘛，但是你有没有想过，如果在这里不指定fastjson的version的话，该依赖的版本会是多少？</p><p>小林子：呃。。。会报错吧，好像是<code>Dependency not found</code>错误吧</p><p>串一串：你试一试吧</p><p>—A Few Moments Later—</p><p>串一串：怎么样，和你刚才说的结果一样吗？</p><p>小林子：为什么我删掉了<code>module-one</code>中的version还是能引入1.2.61版本的jar，是缓存的原因吗？</p><p>串一串：可能是缓存的原因吧，哈哈~但是即使你reimport之后，它的版本依然还是1.2.61，你看看父pom.xml的<code>dependencyManagement</code>中对fastjson的声明的版本是多少，然后你把里面的版本改为1.2.62，reimport后看看模块<code>module-one</code>的fastjson版本有没有变化</p><p>小林子：变了，哦~原来是这里的原因，那也就是说我只需要在模块中用dependency指定依赖的groupId和artifactId就可以了，其他的都不需要再重复写了，然后它就会自动的使用父模块或者本模块的<code>dependencyManagement</code>中声明的其他信息，对吧？</p><p>串一串：嗯，是的，这样做的目的就是统一管理整个工程的依赖，防止出现因为版本冲突出现的BUG，至于为什么使用这种方法可以实现对依赖的管理，那就要从<strong>依赖传递</strong>开始说起了，下次再聊这个，再聊一个问题：如果在父pom.xml和子pom.xml都通过<code>dependencyManagement</code>声明了一个依赖的不同版本，那么在子模块中使用该依赖时，对应的版本将会是哪个？</p><p>小林子：根据依赖传递的特性，应该是子模块中声明的吧</p><p>串一串：嗯，是的，说的很对，如果想要在子项目中使用特定版本的依赖，那么就指定一下version就可以了，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.69<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这时子模块中引入的fastjson的版本就会是1.2.69，传递依赖的就近原则</p><p>串一串：好了，就说这么多吧，下回再讲讲传递依赖。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天小林子突然发来一条消息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小林子：这个关键字是干嘛用的，为什么我的子模块导入不了依赖的jar？是子模块需要配置什么吗？&lt;/p&gt;
&lt;img src=&quot;/images/image-20210107214458024.png&quot; alt=
      
    
    </summary>
    
    
      <category term="Maven" scheme="http://chuanyichuan.github.io/categories/Maven/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot中CorsMappings和Interceptor发生冲突失效</title>
    <link href="http://chuanyichuan.github.io/2021/01/07/SpringBoot%E4%B8%ADCorsMappings%E5%92%8CInterceptor%E5%8F%91%E7%94%9F%E5%86%B2%E7%AA%81%E5%A4%B1%E6%95%88/"/>
    <id>http://chuanyichuan.github.io/2021/01/07/SpringBoot中CorsMappings和Interceptor发生冲突失效/</id>
    <published>2021-01-06T16:05:00.000Z</published>
    <updated>2021-01-07T01:18:44.117Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离的项目中，必定会遇到请求跨域的问题，我们解决跨域一般有两种情况，往下看：</p><p>第一种方法就是自定义一个跨域Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addMapping(<span class="string">"/**"</span>).allowCredentials(<span class="keyword">false</span>)</span><br><span class="line">                        .allowedMethods(<span class="string">"POST"</span>, <span class="string">"GET"</span>, <span class="string">"PUT"</span>, <span class="string">"OPTIONS"</span>, <span class="string">"DELETE"</span>).allowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中我们可以看到，其实就是定义了一个<code>WebMvcConfigurer</code>的实例，然后实现了<code>addCorsMappings()</code>方法，在方法中进行了跨域注册，这里的代码中设置的<code>addMapping(&quot;/**&quot;)</code>，意思是所有的资源(动态+静态)均允许跨域，如果仅仅设置某些资源允许跨域请求，这里只需要指定响应的路径即可，例如<code>addMapping(&quot;/doc.html&quot;)</code>，多个路径的话，设置多条即可。</p><hr><p>第二种方法则是定义一个<code>WebMvcConfigurer</code>的子类，在子类中实现<code>addCorsMappings</code>方法，方法内容和第一种相似，就不细讲了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConverterConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>).allowCredentials(<span class="keyword">false</span>).allowedMethods(<span class="string">"POST"</span>, <span class="string">"GET"</span>, <span class="string">"PUT"</span>, <span class="string">"OPTIONS"</span>, <span class="string">"DELETE"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>第三种方法，是自定义<code>CorsFilter</code>的实例，并将其注册到Spring容器中，<font color="red"><strong>在项目中使用了拦截器<code>HandlerInterceptor</code>的时候，只有使用该方法才能设置成功</strong>：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConverterConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(loginInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/login"</span>, <span class="string">"/doc**"</span>, <span class="string">"/swagger**"</span>, <span class="string">"/webjars/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// 设置允许的方法</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// 允许任何头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        config.addExposedHeader(<span class="string">"token"</span>);</span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">loginInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前后端分离的项目中，必定会遇到请求跨域的问题，我们解决跨域一般有两种情况，往下看：&lt;/p&gt;
&lt;p&gt;第一种方法就是自定义一个跨域Bean：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot官方Starter</title>
    <link href="http://chuanyichuan.github.io/2020/12/23/SpringBoot%E5%AE%98%E6%96%B9Starter/"/>
    <id>http://chuanyichuan.github.io/2020/12/23/SpringBoot官方Starter/</id>
    <published>2020-12-23T15:07:00.000Z</published>
    <updated>2020-12-23T15:08:13.626Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">Starter 名称</th><th style="text-align:left">Starter 描述</th></tr></thead><tbody><tr><td style="text-align:left">spring-boot-starter</td><td style="text-align:left">核心 Starter，包括自动配置、日志及 YAML 支持等</td></tr><tr><td style="text-align:left">spring-boot-starter-activemq</td><td style="text-align:left">集成 Apache ActiveMQ，基于 JMS 的消息队列</td></tr><tr><td style="text-align:left">spring-boot-starter-artemis</td><td style="text-align:left">集成 Apache Artemis，基于 JMS 的消息队列</td></tr><tr><td style="text-align:left">spring-boot-starter-amqp</td><td style="text-align:left">集成 Spring AMQP 和 Rabbit MQ 的消息队列</td></tr><tr><td style="text-align:left">spring-boot-starter-aop</td><td style="text-align:left">集成 Spring AOP 和 AspectJ 面向切面编程</td></tr><tr><td style="text-align:left">spring-boot-starter-batch</td><td style="text-align:left">集成 Spring Batch（批处理）</td></tr><tr><td style="text-align:left">spring-boot-starter-cache</td><td style="text-align:left">集成 Spring Cache（缓存）</td></tr><tr><td style="text-align:left">spring-boot-starter-data-cassandra</td><td style="text-align:left">集成 Cassandra（分布式数据库） 和 Spring Data Cassandra</td></tr><tr><td style="text-align:left">spring-boot-starter-data-cassandra-reactive</td><td style="text-align:left">集成 Cassandra（分布式数据库） 和 Spring Data Cassandra Reactive</td></tr><tr><td style="text-align:left">spring-boot-starter-data-couchbase</td><td style="text-align:left">集成 Couchbase（文档型数据库） 和 Spring Data Couchbase</td></tr><tr><td style="text-align:left">spring-boot-starter-data-couchbase-reactive</td><td style="text-align:left">集成 Couchbase（文档型数据库） 和 Spring Data Couchbase Reactive</td></tr><tr><td style="text-align:left">spring-boot-starter-data-elasticsearch</td><td style="text-align:left">集成 Elasticsearch（搜索引擎）和 Spring Data Elasticsearch</td></tr><tr><td style="text-align:left">spring-boot-starter-data-solr</td><td style="text-align:left">集成 Apache Solr（搜索引擎）结合 Spring Data Solr</td></tr><tr><td style="text-align:left">spring-boot-starter-data-jdbc</td><td style="text-align:left">集成 Spring Data JDBC</td></tr><tr><td style="text-align:left">spring-boot-starter-data-jpa</td><td style="text-align:left">集成 Spring Data JPA 结合 Hibernate</td></tr><tr><td style="text-align:left">spring-boot-starter-data-ldap</td><td style="text-align:left">集成 Spring Data LDAP</td></tr><tr><td style="text-align:left">spring-boot-starter-data-mongodb</td><td style="text-align:left">集成 MongoDB（文档型数据库）和 Spring Data MongoDB</td></tr><tr><td style="text-align:left">spring-boot-starter-data-mongodb-reactive</td><td style="text-align:left">集成 MongoDB（文档型数据库）和 Spring Data MongoDB Reactive</td></tr><tr><td style="text-align:left">spring-boot-starter-data-neo4j</td><td style="text-align:left">集成 Neo4j（图形数据库）和 Spring Data Neo4j</td></tr><tr><td style="text-align:left">spring-boot-starter-data-r2dbc</td><td style="text-align:left">集成 Spring Data R2DBC</td></tr><tr><td style="text-align:left">spring-boot-starter-data-redis</td><td style="text-align:left">集成 Redis（内存数据库）结合 Spring Data Redis 和  Lettuce 客户端</td></tr><tr><td style="text-align:left">spring-boot-starter-data-redis-reactive</td><td style="text-align:left">集成 Redis（内存数据库）结合 Spring Data Redis reactive 和 Lettuce 客户端</td></tr><tr><td style="text-align:left">spring-boot-starter-data-rest</td><td style="text-align:left">集成 Spring Data REST 暴露 Spring Data repositories 输出 REST 资源</td></tr><tr><td style="text-align:left">spring-boot-starter-thymeleaf</td><td style="text-align:left">集成 Thymeleaf 视图构建 MVC web 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-freemarker</td><td style="text-align:left">集成 FreeMarker 视图构建 MVC web 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-groovy-templates</td><td style="text-align:left">集成 Groovy 模板视图构建 MVC web 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-hateoas</td><td style="text-align:left">集成 Spring MVC 和 Spring HATEOAS 构建超媒体 RESTful Web 应用程序</td></tr><tr><td style="text-align:left">spring-boot-starter-integration</td><td style="text-align:left">集成 Spring Integration</td></tr><tr><td style="text-align:left">spring-boot-starter-jdbc</td><td style="text-align:left">集成 JDBC 结合 HikariCP 连接池</td></tr><tr><td style="text-align:left">spring-boot-starter-jersey</td><td style="text-align:left">集成 JAX-RS 和 Jersey 构建 RESTful web 应用，是 spring-boot-starter-web 的一个替代 Starter</td></tr><tr><td style="text-align:left">spring-boot-starter-jooq</td><td style="text-align:left">集成 jOOQ 访问 SQL 数据库，是 spring-boot-starter-data-jpa 或者 spring-boot-starter-jdbc 的替代 Starter</td></tr><tr><td style="text-align:left">spring-boot-starter-json</td><td style="text-align:left">用于读写 JSON</td></tr><tr><td style="text-align:left">spring-boot-starter-jta-atomikos</td><td style="text-align:left">集成 Atomikos 实现  JTA 事务</td></tr><tr><td style="text-align:left">spring-boot-starter-jta-bitronix</td><td style="text-align:left">集成  Bitronix 实现  JTA 事务（ 从 2.3.0 开始标识为 <strong>Deprecated</strong>）</td></tr><tr><td style="text-align:left">spring-boot-starter-mail</td><td style="text-align:left">集成 Java Mail 和 Spring 框架的邮件发送功能</td></tr><tr><td style="text-align:left">spring-boot-starter-mustache</td><td style="text-align:left">集成 Mustache 视图构建 web 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-security</td><td style="text-align:left">集成 Spring Security</td></tr><tr><td style="text-align:left">spring-boot-starter-oauth2-client</td><td style="text-align:left">集成 Spring Security’s OAuth2/OpenID 连接客户端功能</td></tr><tr><td style="text-align:left">spring-boot-starter-oauth2-resource-server</td><td style="text-align:left">集成 Spring Security’s OAuth2 资源服务器功能</td></tr><tr><td style="text-align:left">spring-boot-starter-quartz</td><td style="text-align:left">集成 Quartz 任务调度</td></tr><tr><td style="text-align:left">spring-boot-starter-rsocket</td><td style="text-align:left">构建 RSocket 客户端和服务端</td></tr><tr><td style="text-align:left">spring-boot-starter-test</td><td style="text-align:left">集成 JUnit Jupiter, Hamcrest 和 Mockito 测试 Spring Boot 应用和类库</td></tr><tr><td style="text-align:left">spring-boot-starter-validation</td><td style="text-align:left">集成 Java Bean Validation 结合 Hibernate Validator</td></tr><tr><td style="text-align:left">spring-boot-starter-web</td><td style="text-align:left">集成 Spring MVC 构建 RESTful web 应用，使用  Tomcat 作为默认内嵌容器</td></tr><tr><td style="text-align:left">spring-boot-starter-web-services</td><td style="text-align:left">集成 Spring Web Services</td></tr><tr><td style="text-align:left">spring-boot-starter-webflux</td><td style="text-align:left">集成 Spring Reactive Web 构建 WebFlux 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-websocket</td><td style="text-align:left">集成 Spring WebSocket 构建 WebSocket 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-actuator</td><td style="text-align:left">集成 Spring Boot Actuator，提供生产功能以帮助监控和管理应用程序</td></tr><tr><td style="text-align:left">spring-boot-starter-jetty</td><td style="text-align:left">集成 Jetty 作为内嵌的 servlet 容器，可用于替代 spring-boot-starter-tomcat</td></tr><tr><td style="text-align:left">spring-boot-starter-log4j2</td><td style="text-align:left">集成 Log4j2 日志框架，可用于替代 spring-boot-starter-logging</td></tr><tr><td style="text-align:left">spring-boot-starter-logging</td><td style="text-align:left">集成 Logback 日志框架，这个也是默认的日志 Starter</td></tr><tr><td style="text-align:left">spring-boot-starter-reactor-netty</td><td style="text-align:left">集成 Netty 作为内嵌的响应式 HTTP 服务器</td></tr><tr><td style="text-align:left">spring-boot-starter-tomcat</td><td style="text-align:left">集成 Tomcat 作为内嵌的 servlet 容器，这也是默认的 servlet 容器 starter 被集成 spring-boot-starter-web 里面</td></tr><tr><td style="text-align:left">spring-boot-starter-undertow</td><td style="text-align:left">集成 Undertow 作为内嵌的 servlet 容器，可用于替代 spring-boot-starter-tomcat</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Starter 名称&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Starter 描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker0-Iptables No Chain/target/match by That Name</title>
    <link href="http://chuanyichuan.github.io/2020/12/23/docker0-iptables-No-chaintargetmatch-by-that-name/"/>
    <id>http://chuanyichuan.github.io/2020/12/23/docker0-iptables-No-chaintargetmatch-by-that-name/</id>
    <published>2020-12-22T16:58:00.000Z</published>
    <updated>2021-01-18T17:15:32.313Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS 7下使用类似nginx之类的web server，启动docker时有时会报以下错误：</p><p>docker0: iptables: No chain/target/match by that name.</p><p>解决方法：</p><p>service docker restart</p><p>重启docker后:</p><p>iptables -L</p><p>可以看到iptables里面多出了Chain Docker的选项。</p><p>经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在CentOS 7下使用类似nginx之类的web server，启动docker时有时会报以下错误：&lt;/p&gt;
&lt;p&gt;docker0: iptables: No chain/target/match by that name.&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;ser
      
    
    </summary>
    
    
      <category term="BUG" scheme="http://chuanyichuan.github.io/categories/BUG/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux搭建NFS</title>
    <link href="http://chuanyichuan.github.io/2020/12/17/Linux%E6%90%AD%E5%BB%BANFS/"/>
    <id>http://chuanyichuan.github.io/2020/12/17/Linux搭建NFS/</id>
    <published>2020-12-17T13:57:00.000Z</published>
    <updated>2020-12-17T14:02:37.022Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在所有的节点执行语句</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure></li><li><p>在服务端执行以下语句</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/exports</span><br><span class="line">/data  10.160.22.0/24(rw,all_squash,anonuid=0,anongid=0)</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使配置生效</span></span><br><span class="line">exportfs -rv</span><br><span class="line">service rpcbind start</span><br><span class="line">service nfs start</span><br><span class="line">service rpcbind status</span><br><span class="line">service nfs status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 看一下是否成功</span></span><br><span class="line">showmount -e</span><br></pre></td></tr></table></figure></li><li><p>在客户端执行挂载</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">mount -t nfs -o nolock,nfsvers=3,vers=3 10.160.22.14:/data /data</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在所有的节点执行语句&lt;/p&gt;
 &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>解决Centos使用ssh连接自动断开</title>
    <link href="http://chuanyichuan.github.io/2020/12/15/%E8%A7%A3%E5%86%B3Centos%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80/"/>
    <id>http://chuanyichuan.github.io/2020/12/15/解决Centos使用ssh连接自动断开/</id>
    <published>2020-12-14T16:00:00.000Z</published>
    <updated>2020-12-15T01:45:49.945Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Centos7的时候，经常在一段时间没有操作之后就自动断掉了，然后重新连接之后就可能失去了当前操作场景，那么如何才能保证我们即使长时间不操作也会一直保持连接状态，往下看。</p><ol><li><p>第一种方法也是网上到处都能搜索到的，修改<code>/etc/ssh/sshd_config</code>文件</p><p>使用命令打开<code>/etc/ssh/sshd_config</code>文件：<code>vim /etc/ssh/sshd_config</code>，修改两个参数<code>ClientAliveInterval</code>和<code>ClientAliveCountMax</code>，这两个参数控制了客户端的存活检测间隔和失败检测的最大次数，如果超过了这个次数就断开客户端的连接，默认情况下这两个是未开启的，将其修改为60和5，值自己定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClientAliveInterval 100</span><br><span class="line">ClientAliveCountMax 15</span><br></pre></td></tr></table></figure><p>修改完配置之后重启sshd服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><p>使用该方法修改之后如果还是经常自动断开，那你就看第二种</p></li><li><p>第二种来自于<code>linvirtshell</code>，是我实际遇到的情况</p><p>在服务器自动断开的时候，控制台输出了一个关键语句：</p><img src="/images/image-20201215092855460.png" alt="image-20201215092855460"><p>哦吼~这句话很关键喔，尤其是<code>auto-logout</code>，在<code>linvirtshell</code>上有这么一句话：</p><blockquote><p>The ssh “timed out waiting for input: auto-logout” messages is generated by ssh upon reaching a auto-logout after an inactivity time specified by the TMOUT environment variable. If this variable is not set your session will not be auto-logged out due to inactivity. If the environment variable is set, your session will be automatically closed/logged out after the amount of seconds specified by the TMOUT variable.</p></blockquote><p>大致意思是Linux维护了一个<code>TMOUT</code>的环境变量，该环境变量的目的是在ssh客户端在指定时间未活动的话，就自动断开该客户端的连接，单位是<code>秒</code>，那我们输出一下该环境变量看看是不是这货在搞怪。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ci034 ~]# echo $TMOUT</span><br><span class="line">180</span><br></pre></td></tr></table></figure><p>果然，180秒未活动就自动断开连接，结合之前每次断开的时间间隔，就是这货在作怪了，那么我们直接修改这个参数试试，设置为30分钟不过期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TMOUT=1800</span><br></pre></td></tr></table></figure><p>经验证，确实有效，那么将其设置到<code>/etc/profile</code>文件中(如果文件中已经有配置了，修改时间即可)</p><p>如果想关闭自动断开，想永久不断开的话(不推荐)，就从环境变量里面移除掉该参数。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用Centos7的时候，经常在一段时间没有操作之后就自动断掉了，然后重新连接之后就可能失去了当前操作场景，那么如何才能保证我们即使长时间不操作也会一直保持连接状态，往下看。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一种方法也是网上到处都能搜索到的，修改&lt;code&gt;/etc/
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker设置镜像源</title>
    <link href="http://chuanyichuan.github.io/2020/12/15/Docker%E8%AE%BE%E7%BD%AE%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <id>http://chuanyichuan.github.io/2020/12/15/Docker设置镜像源/</id>
    <published>2020-12-14T16:00:00.000Z</published>
    <updated>2020-12-15T06:44:24.725Z</updated>
    
    <content type="html"><![CDATA[<p>打开<code>/etc/docker/daemon.json</code>文件，添加<code>registry-mirrors</code>，具体如下（添加网易的镜像源）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意不要覆盖原有配置</p></blockquote><p>国内的镜像源有以下几个比较常用的：</p><ol><li><p>Docker中国区官方镜像： <a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a></p></li><li><p>网易： <a href="http://hub-mirror.c.163.com" target="_blank" rel="noopener">http://hub-mirror.c.163.com</a></p></li><li><p>中国科技大学ustc： <a href="https://docker.mirrors.ustc.edu.cn" target="_blank" rel="noopener">https://docker.mirrors.ustc.edu.cn</a></p></li><li><p>阿里云</p><p>阿里云的镜像加速器每个账号的都不相同，可以登录阿里云<strong>容器镜像服务</strong>查看自己的（<a href="https://cr.console.aliyun.com/%EF%BC%89" target="_blank" rel="noopener">https://cr.console.aliyun.com/）</a></p><img src="/images/image-20201215144340360.png" alt="image-20201215144340360" style="zoom:50%;"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;文件，添加&lt;code&gt;registry-mirrors&lt;/code&gt;，具体如下（添加网易的镜像源）：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://chuanyichuan.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux安装kubernetes集群</title>
    <link href="http://chuanyichuan.github.io/2020/12/15/Linux%E5%AE%89%E8%A3%85kubernetes%E9%9B%86%E7%BE%A4/"/>
    <id>http://chuanyichuan.github.io/2020/12/15/Linux安装kubernetes集群/</id>
    <published>2020-12-14T16:00:00.000Z</published>
    <updated>2020-12-16T16:39:08.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="221-版本统一"><a class="markdownIt-Anchor" href="#221-版本统一"></a> 2.2.1 版本统一</h3><ul><li>Docker 18.09.0</li><li>kubeadm-1.16.0-0</li><li>kubelet-1.16.0-0</li><li>kubectl-1.16.0-0<ul><li><a href="http://k8s.gcr.io/kube-apiserver:v1.16.0" target="_blank" rel="noopener">k8s.gcr.io/kube-apiserver:v1.16.0</a></li><li><a href="http://k8s.gcr.io/kube-controller-manager:v1.16.0" target="_blank" rel="noopener">k8s.gcr.io/kube-controller-manager:v1.16.0</a></li><li><a href="http://k8s.gcr.io/kube-scheduler:v1.16.0" target="_blank" rel="noopener">k8s.gcr.io/kube-scheduler:v1.16.0</a></li><li><a href="http://k8s.gcr.io/kube-proxy:v1.16.0" target="_blank" rel="noopener">k8s.gcr.io/kube-proxy:v1.16.0</a></li><li><a href="http://k8s.gcr.io/pause:3.1" target="_blank" rel="noopener">k8s.gcr.io/pause:3.1</a></li><li><a href="http://k8s.gcr.io/etcd:3.3.15-0" target="_blank" rel="noopener">k8s.gcr.io/etcd:3.3.15-0</a></li><li><a href="http://k8s.gcr.io/coredns:1.6.2" target="_blank" rel="noopener">k8s.gcr.io/coredns:1.6.2</a></li></ul></li><li>calico:v3.9.5</li></ul><h2 id="223-更新并安装依赖"><a class="markdownIt-Anchor" href="#223-更新并安装依赖"></a> 2.2.3 更新并安装依赖</h2><blockquote><p>3台机器都需要执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp</span><br></pre></td></tr></table></figure><h2 id="224-安装docker"><a class="markdownIt-Anchor" href="#224-安装docker"></a> 2.2.4 安装Docker</h2><blockquote><p>3台机器都需要执行，安装版本为18.09.0</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">01 `进入虚拟机`</span><br><span class="line">    ssh root@xxx.xx.x.xxx</span><br><span class="line">02 `卸载之前安装的docker`</span><br><span class="line">    sudo yum remove docker docker latest docker-latest-logrotate \</span><br><span class="line">    docker-logrotate docker-engine docker-client docker-client-latest docker-common</span><br><span class="line">03 `安装必要依赖`</span><br><span class="line">    sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">04 `添加软件源信息`</span><br><span class="line">    sudo yum-config-manager \</span><br><span class="line">    --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    yum list | grep docker-ce</span><br><span class="line">05 `更新yum缓存`</span><br><span class="line">    sudo yum makecache fast</span><br><span class="line">06 `安装docker`</span><br><span class="line">    sudo yum install -y docker-ce-18.09.0 docker-ce-cli-18.09.0 containerd.io [指定安装docker版本]</span><br><span class="line">07 `启动docker并设置开机启动`</span><br><span class="line">    sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br><span class="line">08 `测试docker安装是否成功`</span><br><span class="line">    sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="225-修改hosts文件"><a class="markdownIt-Anchor" href="#225-修改hosts文件"></a> 2.2.5 修改hosts文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">01 `master`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置master的hostname，并且修改hosts文件</span></span><br><span class="line">sudo hostnamectl set-hostname node1</span><br><span class="line">02 `两个worker`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置worker01/02的hostname，并且修改hosts文件</span></span><br><span class="line">sudo hostnamectl set-hostname node2</span><br><span class="line">sudo hostnamectl set-hostname node3</span><br><span class="line">03 `三台机器`</span><br><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">10.160.22.163 node1</span><br><span class="line">10.160.22.164 node2</span><br><span class="line">10.160.22.165 node3</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">04 `使用ping测试一下`</span><br><span class="line">ping node1</span><br><span class="line">ping node2</span><br><span class="line">ping node3</span><br></pre></td></tr></table></figure><h2 id="226-系统基础前提配置"><a class="markdownIt-Anchor" href="#226-系统基础前提配置"></a> 2.2.6 系统基础前提配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">01 `关闭防火墙`</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line">02 `关闭selinux`</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</span><br><span class="line">03 `关闭swap`</span><br><span class="line">swapoff -a</span><br><span class="line">sed -i '/swap/s/^\(.*\)$/#\1/g' /etc/fstab</span><br><span class="line">04 `配置iptables的ACCEPT规则`</span><br><span class="line">iptables -F &amp;&amp; iptables -X &amp;&amp; iptables \</span><br><span class="line">    -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT</span><br><span class="line">05 `设置系统参数`</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br></pre></td></tr></table></figure><h2 id="227-installing-kubeadm-kubelet-and-kubectl"><a class="markdownIt-Anchor" href="#227-installing-kubeadm-kubelet-and-kubectl"></a> 2.2.7 Installing kubeadm, kubelet and kubectl</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">01 `配置yum源`</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">02 `安装kubeadm&amp;kubelet&amp;kubectl`</span><br><span class="line">yum install -y kubeadm-1.16.0-0 kubelet-1.16.0-0 kubectl-1.16.0-0 --setopt=obsoletes=0</span><br><span class="line">03 `docker和k8s设置同一个cgroup`</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker</span></span><br><span class="line">vi /etc/docker/daemon.json 【文件没内容的话，就新建；有的话，就加上这一句，注意文件的格式[逗号]】</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">&#123;</span><br><span class="line">"exec-opts": ["native.cgroupdriver=systemd"]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================  </span></span><br><span class="line">systemctl daemon-reload 【`修改了/etc/docker/daemon.json文件后必须执行`】</span><br><span class="line">systemctl restart docker 【`重启docker，一定要执行`】</span><br><span class="line"><span class="meta">#</span><span class="bash"> kubelet</span></span><br><span class="line">sed -i "s/cgroup-driver=systemd/cgroup-driver=cgroupfs/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 【`找不到内容没关系`】</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet 【`重启kubelet，一定要执行`】</span><br></pre></td></tr></table></figure><h2 id="228-proxypausescheduler等国内镜像"><a class="markdownIt-Anchor" href="#228-proxypausescheduler等国内镜像"></a> 2.2.8 proxy/pause/scheduler等国内镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">01 `查看kubeadm使用的镜像`</span><br><span class="line">kubeadm config images list</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.16.0</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.16.0</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.16.0</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.16.0</span><br><span class="line">k8s.gcr.io/pause:3.1</span><br><span class="line">k8s.gcr.io/etcd:3.3.15-0</span><br><span class="line">k8s.gcr.io/coredns:1.6.2</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">02 `解决国外镜像不能访问的问题`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建kubeadm.sh脚本，用于拉取镜像/打tag/删除原有镜像</span></span><br><span class="line">vim kubeadm.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">KUBE_VERSION=v1.16.0</span><br><span class="line">KUBE_PAUSE_VERSION=3.1</span><br><span class="line">ETCD_VERSION=3.3.15-0</span><br><span class="line">CORE_DNS_VERSION=1.6.2</span><br><span class="line">GCR_URL=k8s.gcr.io</span><br><span class="line">ALIYUN_URL=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">images=(kube-proxy:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-scheduler:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-controller-manager:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-apiserver:$&#123;KUBE_VERSION&#125;</span><br><span class="line">pause:$&#123;KUBE_PAUSE_VERSION&#125;</span><br><span class="line">etcd:$&#123;ETCD_VERSION&#125;</span><br><span class="line">coredns:$&#123;CORE_DNS_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker pull $ALIYUN_URL/$imageName</span><br><span class="line">docker tag  $ALIYUN_URL/$imageName $GCR_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">03 `运行脚本和查看镜像`</span><br><span class="line">sh kubeadm.sh 【运行脚本】</span><br><span class="line">docker images 【查看镜像】</span><br><span class="line">04 `将这些镜像推送到自己的阿里云仓库`【可选，根据自己实际的情况】</span><br><span class="line">sudo docker login --username=lucunyu21@sina.com registry.cn-beijing.aliyuncs.com 【登录自己的阿里云仓库，master节点执行即可】 </span><br><span class="line">密码：******</span><br><span class="line">vi kubeadm-push-aliyun.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">KUBE_VERSION=v1.16.0</span><br><span class="line">KUBE_PAUSE_VERSION=3.1</span><br><span class="line">ETCD_VERSION=3.3.15-0</span><br><span class="line">CORE_DNS_VERSION=1.6.2</span><br><span class="line">GCR_URL=k8s.gcr.io</span><br><span class="line">ALIYUN_URL=registry.cn-beijing.aliyuncs.com/chuanc</span><br><span class="line">images=(kube-proxy:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-scheduler:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-controller-manager:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-apiserver:$&#123;KUBE_VERSION&#125;</span><br><span class="line">pause:$&#123;KUBE_PAUSE_VERSION&#125;</span><br><span class="line">etcd:$&#123;ETCD_VERSION&#125;</span><br><span class="line">coredns:$&#123;CORE_DNS_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker tag $GCR_URL/$imageName $ALIYUN_URL/$imageName</span><br><span class="line">docker push $ALIYUN_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">06 `运行脚本`</span><br><span class="line">sh ./kubeadm-push-aliyun.sh</span><br></pre></td></tr></table></figure><h2 id="229-kube-init初始化master"><a class="markdownIt-Anchor" href="#229-kube-init初始化master"></a> 2.2.9 kube init初始化master</h2><blockquote><p><strong>官网：</strong> <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></p></blockquote><h3 id="2291-初始化master节点"><a class="markdownIt-Anchor" href="#2291-初始化master节点"></a> 2.2.9.1  初始化master节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">01 `初始化master节点`</span><br><span class="line">kubeadm reset 【初始化集群状态】</span><br><span class="line">kubeadm init --kubernetes-version=1.16.0 \</span><br><span class="line">    --apiserver-advertise-address=192.168.43.51 \</span><br><span class="line">    --pod-network-cidr=172.17.0.1/16 【初始化master节点】</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：记得保存好最后kubeadm join的信息。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.160.22.163:6443 --token fag134.3wot9edrvs82vh6d \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1df02a06552c02ba0e28e00c80a50e9ff40da81a4cdd53c136a16d3c0233f450</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">02 `根据日志提示执行`</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">03 `查看pod`</span><br><span class="line">etcd，controller，scheduler等组件都以pod的方式安装成功</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：coredns没有启动，需要安装网络插件</span></span><br><span class="line">kubectl get pods --all-namespaces 【查看所有pods】</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-5644d7b6d9-9tnkr                   1/1     Running   0          77m</span><br><span class="line">coredns-5644d7b6d9-rhtnn                   1/1     Running   0          77m</span><br><span class="line">etcd-node1                                 1/1     Running   0          76m</span><br><span class="line">kube-apiserver-node1                       1/1     Running   0          76m</span><br><span class="line">kube-controller-manager-node1              1/1     Running   0          76m</span><br><span class="line">kube-proxy-7h457                           1/1     Running   0          52m</span><br><span class="line">kube-proxy-7htxc                           1/1     Running   0          53m</span><br><span class="line">kube-proxy-hn5bc                           1/1     Running   0          77m</span><br><span class="line">kube-scheduler-node1                       1/1     Running   0          76m</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">04 `健康检查`</span><br><span class="line">curl -k https://localhost:6443/healthz</span><br></pre></td></tr></table></figure><h3 id="2292-kube-init流程"><a class="markdownIt-Anchor" href="#2292-kube-init流程"></a> 2.2.9.2 kube init流程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">01 `进行一系列检查，以确定这台机器可以部署kubernetes`</span><br><span class="line">02 `生成kubernetes对外提供服务所需要的各种证书可对应目录`</span><br><span class="line">/etc/kubernetes/pki/*</span><br><span class="line">03 `为其他组件生成访问kube-ApiServer所需的配置文件`</span><br><span class="line">ls /etc/kubernetes/</span><br><span class="line">    admin.conf  controller-manager.conf  kubelet.conf  scheduler.conf</span><br><span class="line">04 `为 Master组件生成Pod配置文件`</span><br><span class="line">    ls /etc/kubernetes/manifests/*.yaml</span><br><span class="line">    kube-apiserver.yaml </span><br><span class="line">    kube-controller-manager.yaml</span><br><span class="line">    kube-scheduler.yaml</span><br><span class="line">05 `生成etcd的Pod YAML文件`</span><br><span class="line">    ls /etc/kubernetes/manifests/*.yaml</span><br><span class="line">    kube-apiserver.yaml </span><br><span class="line">    kube-controller-manager.yaml</span><br><span class="line">    kube-scheduler.yaml</span><br><span class="line">etcd.yaml</span><br><span class="line">06 `一旦这些 YAML文件出现在被 kubelet监视的/etc/kubernetes/manifests/目录下，kubelet就会自动创建这些yaml文件定义的pod，即master组件的容器。master容器启动后，kubeadm会通过检查localhost:443/healthz这个master组件的健康状态检查URL，等待master组件完全运行起来`</span><br><span class="line">07 `为集群生成一个bootstrap token`</span><br><span class="line">08 `将ca.crt等Master节点的重要信息，通过ConfigMap的方式保存在etcd中，工后续部署node节点使用`</span><br><span class="line">09 `最后一步是安装默认插件，kubernetes默认kube-proxy和DNS两个插件是必须安装的`</span><br></pre></td></tr></table></figure><h2 id="2210-部署calico网络插件"><a class="markdownIt-Anchor" href="#2210-部署calico网络插件"></a> 2.2.10 部署calico网络插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择网络插件</span></span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"><span class="meta">#</span><span class="bash"> calico网络插件</span></span><br><span class="line">https://docs.projectcalico.org/v3.9/getting-started/kubernetes/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：calico，同样在master节点上操作</span></span><br><span class="line">01 `可以先手动pull一下` 【可能拉取较慢】</span><br><span class="line">curl https://docs.projectcalico.org/v3.9/manifests/calico.yaml | grep image 【版本会变化，需要根据实际情况拉取镜像】</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">      image: calico/cni:v3.9.3</span><br><span class="line">          image: calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">          image: calico/node:v3.9.3</span><br><span class="line">          image: calico/kube-controllers:v3.9.3</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">docker pull calico/cni:v3.9.3</span><br><span class="line">    docker pull calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">    docker pull calico/node:v3.9.3</span><br><span class="line">    docker pull calico/kube-controllers:v3.9.3</span><br><span class="line">    `官方镜像拉取太慢，用Jack老师的`</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/kube-controllers:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/cni:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/pod2daemon-flexvol:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/node:v3.9.3</span><br><span class="line">`打tag`</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/kube-controllers:v3.9.3 \</span><br><span class="line">    calico/kube-controllers:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/cni:v3.9.3 \</span><br><span class="line">    calico/cni:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/pod2daemon-flexvol:v3.9.3 \</span><br><span class="line">    calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/node:v3.9.3 \</span><br><span class="line">    calico/node:v3.9.3</span><br><span class="line">`删除registry.cn-hangzhou.aliyuncs.com/itcrazy2016/格式的镜像` </span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：打tag不会改变imageId，会删除calico的镜像  </span></span><br><span class="line">docker rmi -f $(docker images registry.cn-hangzhou.aliyuncs.com/itcrazy2016/* -aq)</span><br><span class="line">02 `在k8s中安装calico`</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https://docs.projectcalico.org/v3.9/manifests/calico.yaml</span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line">03 `确认一下calico是否安装成功`</span><br><span class="line">kubectl get pods --all-namespaces -w 【实时查看所有的Pods】</span><br></pre></td></tr></table></figure><h3 id="上传calico到阿里云"><a class="markdownIt-Anchor" href="#上传calico到阿里云"></a> 上传calico到阿里云</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">CALICO_VERSION=v3.9.5</span><br><span class="line">GCR_URL=calico</span><br><span class="line">ALIYUN_URL=registry.cn-beijing.aliyuncs.com/calico_chuanchuan</span><br><span class="line">images=(cni:$&#123;CALICO_VERSION&#125;</span><br><span class="line">pod2daemon-flexvol:$&#123;CALICO_VERSION&#125;</span><br><span class="line">node:$&#123;CALICO_VERSION&#125;</span><br><span class="line">kube-controllers:$&#123;CALICO_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker tag $GCR_URL/$imageName $ALIYUN_URL/$imageName</span><br><span class="line">docker push $ALIYUN_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="下载calico"><a class="markdownIt-Anchor" href="#下载calico"></a> 下载calico</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">CALICO_VERSION=v3.9.5</span><br><span class="line">GCR_URL=calico</span><br><span class="line">ALIYUN_URL=registry.cn-beijing.aliyuncs.com/calico_chuanchuan</span><br><span class="line">images=(cni:$&#123;CALICO_VERSION&#125;</span><br><span class="line">pod2daemon-flexvol:$&#123;CALICO_VERSION&#125;</span><br><span class="line">node:$&#123;CALICO_VERSION&#125;</span><br><span class="line">kube-controllers:$&#123;CALICO_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker pull $ALIYUN_URL/$imageName</span><br><span class="line">docker tag $ALIYUN_URL/$imageName $GCR_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="修改calicoyaml文件中的版本号"><a class="markdownIt-Anchor" href="#修改calicoyaml文件中的版本号"></a> 修改calico.yaml文件中的版本号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/v3.9.6/v3.9.5/g' calico.yaml</span><br></pre></td></tr></table></figure><h3 id="创建calico"><a class="markdownIt-Anchor" href="#创建calico"></a> 创建calico</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看pod</span></span><br><span class="line">kubectl get po --all-namespaces</span><br></pre></td></tr></table></figure><h2 id="2211-kube-join"><a class="markdownIt-Anchor" href="#2211-kube-join"></a> 2.2.11 kube join</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">01 记得保存初始化master节点的最后打印信息【注意这边大家要自己的，下面我的只是一个参考】</span><br><span class="line">kubeadm join 10.160.22.163:6443 --token fag134.3wot9edrvs82vh6d \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1df02a06552c02ba0e28e00c80a50e9ff40da81a4cdd53c136a16d3c0233f450【worker上面执行】</span><br><span class="line">02 在master节点上检查集群信息</span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">NAME                   STATUS   ROLES    AGE     VERSION</span><br><span class="line">master-kubeadm-k8s     Ready    master   19m     v1.14.0</span><br><span class="line">worker01-kubeadm-k8s   Ready    &lt;none&gt;   3m6s    v1.14.0</span><br><span class="line">worker02-kubeadm-k8s   Ready    &lt;none&gt;   2m41s   v1.14.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br></pre></td></tr></table></figure><h2 id="2212-再次体验pod"><a class="markdownIt-Anchor" href="#2212-再次体验pod"></a> 2.2.12 再次体验Pod</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">01 `定义pod.yml文件，比如pod_nginx_rs.yaml` 【不能使用tab，只能用空格】</span><br><span class="line">mkdir pod_nginx_rs</span><br><span class="line">cd pod_nginx_rs</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">cat &gt; pod_nginx_rs.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    tier: frontend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      tier: frontend</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx</span><br><span class="line">      labels:</span><br><span class="line">        tier: frontend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">02 `根据pod_nginx_rs.yml文件创建pod`</span><br><span class="line">kubectl apply -f pod_nginx_rs.yaml</span><br><span class="line">03 `查看pod`</span><br><span class="line">    kubectl get pods</span><br><span class="line">    kubectl get pods -o wide</span><br><span class="line">    kubectl describe pod nginx</span><br><span class="line">04 `感受通过rs将pod扩容`</span><br><span class="line">kubectl scale rs nginx --replicas=5</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">05 `删除pod`</span><br><span class="line">kubectl delete -f pod_nginx_rs.yaml</span><br></pre></td></tr></table></figure><blockquote><ol><li>kubectl命令自动补全</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> &lt;(kubectl completion bash)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ol start="2"><li>kubeadm命令自动补全</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yum install bash-completion -y</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> &lt;(kubeadm completion bash)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"source &lt;(kubeadm completion bash)"</span> &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ol start="3"><li>忘了join命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 主节点上执行该命令进行查看</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> kubeadm token create --<span class="built_in">print</span>-join-command</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ol start="4"><li>切换默认namespace</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> kubectl config <span class="built_in">set</span>-context $(kubectl config current-context) --namespace=ignite</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h3 id="calico故障"><a class="markdownIt-Anchor" href="#calico故障"></a> Calico故障</h3><ol><li><p>calico-node一直处于NotReady状态，报错信息（一般在机器有多个网卡的情况下会出现该故障）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: calico/node is not ready: BIRD is not ready: BGP not established with 10.0. 0.1. In most cases, this “unready” status error in Kubernetes means that a particular peer is unreachable in the cluster. Check that BGP connectivity between the two peers is allowed in the environment.</span><br></pre></td></tr></table></figure><p>解决办法：</p><blockquote><p>calico找不到网卡，所以需要手动的指定一下节点使用的网卡，修改calico.yaml中的calico-node配置，在env中新增如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> - name: IP_AUTODETECTION_METHOD</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   value: <span class="string">"interface=eth0"</span> <span class="comment"># 网卡根据服务器情况填写</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>然后重新创建calico的pod</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;221-版本统一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#221-版本统一&quot;&gt;&lt;/a&gt; 2.2.1 版本统一&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker 18.09.0&lt;/li&gt;
&lt;li&gt;kubeadm-1.16.0-0&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://chuanyichuan.github.io/categories/Kubernetes/"/>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/tags/Linux/"/>
    
      <category term="k8s" scheme="http://chuanyichuan.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器之间免密登录</title>
    <link href="http://chuanyichuan.github.io/2020/12/14/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <id>http://chuanyichuan.github.io/2020/12/14/Linux服务器之间免密登录/</id>
    <published>2020-12-13T16:27:40.355Z</published>
    <updated>2020-12-13T16:29:52.426Z</updated>
    
    <content type="html"><![CDATA[<p>Linux服务器之间在某些情况下可能需要互相之间免密登录，这就用到了ssh进行登录，主要步骤如下：</p><ol><li><p>生成ssh key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成ssh key</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><blockquote><p>如果生成失败，那么就安装一下ssh的生成命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yum  install -y openssh-server openssh-clients</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>创建<code>~/.ssh/authorized_keys</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>复制服务器的公钥<code>~/.ssh/id_rsa.pub</code>放到<code>~/.ssh/authorized_keys</code>中</p><p>此处复制其他服务器的公钥到文件<code>~/.ssh/authorized_keys</code>中，然后将该文件同步到所有的服务器中</p></li><li><p>欧了~</p><p>使用ssh进行登录吧<code>ssh 192.168.0.61</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux服务器之间在某些情况下可能需要互相之间免密登录，这就用到了ssh进行登录，主要步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成ssh key&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用HAProxy搭建MySQL集群</title>
    <link href="http://chuanyichuan.github.io/2020/12/10/%E6%90%AD%E5%BB%BAMySQL%E9%9B%86%E7%BE%A4-MGR/"/>
    <id>http://chuanyichuan.github.io/2020/12/10/搭建MySQL集群-MGR/</id>
    <published>2020-12-10T01:25:00.000Z</published>
    <updated>2021-02-02T14:13:04.605Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引言</p></blockquote><p>我们知道搭建MySQL集群有MHA、MGR、MMM，以及MySQL官方提供的MySQL-Cluster方式，以下主要以MGR方式为主做介绍，稍后再介绍这几种集群方式的差异。</p><p>我们先简单的介绍一下MGR架构，MGR的全称是MySQL Group Replication，是官方在5.7.17版本推出的基于paxos协议的集群方案。有人说MGR是基于状态机的集群设计，每一个节点都可以看做是一个状态机，任何一个节点出现</p><ol><li><p>服务器信息</p><p>我准备了四台机器，一台haproxy节点，三台MySQL节点，这三个MySQL节点均为Master，并且互为主备。</p><table><thead><tr><th>主机IP</th><th>OS</th><th>软件</th></tr></thead><tbody><tr><td>10.154.8.18</td><td>centos 7.0</td><td>haproxy</td></tr><tr><td>10.154.8.113</td><td>centos 7.0</td><td>master</td></tr><tr><td>10.154.8.130</td><td>centos 7.0</td><td>master</td></tr><tr><td>10.154.8.149</td><td>centos 7.0</td><td>master</td></tr></tbody></table></li><li><p>架构图</p><img src="/images/image-20201210093548972.png" alt="image-20201210093548972" style="zoom:50%;"></li></ol><h1 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装MySQL</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cd /data1/software/mysql/</span><br><span class="line">tar -zxvf mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">mkdir /usr/local/mysql</span><br><span class="line"></span><br><span class="line">cp -R /data1/software/mysql/mysql-5.7.31-linux-glibc2.12-x86_64/* /usr/local/mysql/</span><br><span class="line"></span><br><span class="line">mkdir /usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">cd /usr/local/mysql</span><br><span class="line"></span><br><span class="line">groupadd mysql</span><br><span class="line">useradd mysql -g mysql</span><br><span class="line">chown -R mysql .</span><br><span class="line">chgrp -R mysql .</span><br><span class="line"></span><br><span class="line">/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --explicit_defaults_for_timestamp</span><br><span class="line"></span><br><span class="line">rm -rf /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/mysql/mysql.sock /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机启动设置</span></span><br><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure><h1 id="配置mysql"><a class="markdownIt-Anchor" href="#配置mysql"></a> 配置MySQL</h1><p>vim /etc/my.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">port=3306</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line"></span><br><span class="line">wait_timeout=360000</span><br><span class="line"></span><br><span class="line">log-bin=/usr/local/mysql/data/binlog</span><br><span class="line">log-bin-index=/usr/local/mysql/data/binlog.index</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个节点必须不同</span></span><br><span class="line">server-id = 208</span><br><span class="line"></span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=on</span><br><span class="line">master-info-repository=TABLE</span><br><span class="line">relay-log-info-repository=TABLE</span><br><span class="line">binlog-checksum=none</span><br><span class="line">log-slave-updates=on</span><br><span class="line">binlog-format=ROW</span><br><span class="line"></span><br><span class="line">transaction-write-set-extraction=XXHASH64</span><br><span class="line">loose-group_replication_group_name='7e6fe64a-3bc0-4117-9cac-2439f9c3f19e'</span><br><span class="line">loose-group_replication_start_on_boot=off</span><br><span class="line">loose-group_replication_local_address='10.154.8.113:33061'</span><br><span class="line">loose-group_replication_group_seeds='10.154.8.113:33061,10.154.8.130:33062,10.154.8.149:33063'</span><br><span class="line">loose-group_replication_bootstrap_group=off</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.err</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><h1 id="配置无需密码登录"><a class="markdownIt-Anchor" href="#配置无需密码登录"></a> 配置无需密码登录</h1><p>略…</p><h1 id="启动mysql"><a class="markdownIt-Anchor" href="#启动mysql"></a> 启动MySQL</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br><span class="line"></span><br><span class="line">/usr/local/mysql/bin/mysql -uroot -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'ojbKwcrpqiOhsg8/i'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'ojbKwcrpqiOhsg8/i'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span>,<span class="keyword">replication</span> <span class="keyword">client</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'slave'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'k3G_w9Z&amp;eeip'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><hr><blockquote><p>haproxy</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'haproxy'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'haproxy'</span>@<span class="string">'10.154.8.18'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">PASSWORD</span>(<span class="string">''</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'haproxy'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h3 id="mgr说明"><a class="markdownIt-Anchor" href="#mgr说明"></a> MGR说明</h3><p>server-id=1　　// Mysql服务ID，集群内必须唯一<br>gtid-mode=on　　// 全局事务<br>enforce-gtid-consistency=on　　// 强制GTID的一致性<br>master-info-repository=TABLE　　// 将master.info元数据保存在系统表中<br>relay-log-info-repository=TABLE　　// 将relay.info元数据保存在系统表中<br>binlog-checksum=none　　// 禁用二进制日志事件校验<br>log-slave-updates=on　　// 级联复制<br>log-bin=binlog　　// 开启二进制日志记录<br>binlog-format=ROW　　// 以行的格式记录</p><p>transaction-write-set-extraction=XXHASH64　　// 使用哈希算法将其编码为散列<br>loose-group_replication_group_name=‘7e6fe64a-3bc0-4117-9cac-2439f9c3f19e’　　// 加入的组名，可以修改，只要格式对<br>loose-group_replication_start_on_boot=off　　// 不自动启用组复制集群<br>loose-group_replication_local_address=‘node1:33061’　　// 以本机端口33061接受来自组中成员的传入连接<br>loose-group_replication_group_seeds=‘node1:33061,node2:33062,node3:33063’　　// 组中成员访问表<br>loose-group_replication_bootstrap_group=off　　// 不启用引导组</p><h1 id="设置hostname映射"><a class="markdownIt-Anchor" href="#设置hostname映射"></a> 设置hostname映射</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用hostname指令查看主机名</span></span><br><span class="line">10.154.8.18 devtools1e.novalocal node1</span><br><span class="line">10.154.8.113 devtools1b.novalocal node2</span><br><span class="line">10.154.8.130 devtools1c.novalocal node3</span><br><span class="line">10.154.8.149 devtools1d.novalocal node4</span><br></pre></td></tr></table></figure><h1 id="开启组复制"><a class="markdownIt-Anchor" href="#开启组复制"></a> 开启组复制</h1><ol><li>主</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_user=<span class="string">'slave'</span>,master_password=<span class="string">'k3G_w9Z&amp;eeip'</span> <span class="keyword">for</span> channel <span class="string">'group_replication_recovery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span> <span class="keyword">PLUGIN</span> group_replication <span class="keyword">SONAME</span> <span class="string">'group_replication.so'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> group_replication_ip_whitelist=<span class="string">"10.154.8.113,10.154.8.130,10.154.8.149"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让该节点成为主节点</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> group_replication_bootstrap_group=<span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> group_replication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> group_replication_bootstrap_group=<span class="keyword">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> performance_schema.replication_group_members;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_user=<span class="string">'slave'</span>,master_password=<span class="string">'k3G_t9Z&amp;eeip'</span> <span class="keyword">for</span> channel <span class="string">'group_replication_recovery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span> <span class="keyword">PLUGIN</span> group_replication <span class="keyword">SONAME</span> <span class="string">'group_replication.so'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> group_replication_ip_whitelist=<span class="string">"10.154.8.113,10.154.8.130,10.154.8.149,10.154.8.208"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> group_replication_allow_local_disjoint_gtids_join=<span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> group_replication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> performance_schema.replication_group_members;</span><br></pre></td></tr></table></figure></li></ol><h1 id="搭建haproxy"><a class="markdownIt-Anchor" href="#搭建haproxy"></a> 搭建haproxy</h1><ol><li><p>下载haproxy-1.8.25.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -C https://www.haproxy.org/download/1.8/src/haproxy-1.8.25.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mkdir /usr/local/haproxy</span><br><span class="line"></span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line"></span><br><span class="line">touch /etc/haproxy/haproxy.conf</span><br><span class="line"></span><br><span class="line">yum install -y gcc</span><br><span class="line"></span><br><span class="line">tar -zxvf haproxy-1.8.25.tar.gz</span><br><span class="line"></span><br><span class="line">cd haproxy-1.8.25</span><br><span class="line"></span><br><span class="line">make TARGET=generic  prefix=/usr/local/haproxy</span><br><span class="line"></span><br><span class="line">make install PREFIX=/usr/local/haproxy</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/haproxy/sbin/haproxy /usr/local/bin/</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/haproxy/sbin/haproxy /usr/local/etc/haproxy</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/haproxy/haproxy.conf &lt;&lt; EOF</span><br><span class="line">global</span><br><span class="line">    # chroot /usr/local/etc/haproxy</span><br><span class="line">    log 127.0.0.1 local5 info</span><br><span class="line">    daemon</span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    mode http</span><br><span class="line">    option httplog</span><br><span class="line">    option dontlognull</span><br><span class="line">    timeout connect 5000</span><br><span class="line">    timeout client 50000</span><br><span class="line">    timeout server 50000</span><br><span class="line">listen admin_stats</span><br><span class="line">    bind 0.0.0.0:8888</span><br><span class="line">    mode http</span><br><span class="line">    stats uri /dbs_monitor</span><br><span class="line">    stats realm Global\ statistics</span><br><span class="line">    stats auth admin:admin</span><br><span class="line">    listen proxy-mysql</span><br><span class="line">    bind 0.0.0.0:3306</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option tcplog</span><br><span class="line">    option mysql-check user haproxy</span><br><span class="line">    server MySQL_1 10.154.8.113:3306 check weight 1 maxconn 2000</span><br><span class="line">    server MySQL_2 10.154.8.130:3306 check weight 1 maxconn 2000</span><br><span class="line">    server MySQL_3 10.154.8.149:3306 check weight 1 maxconn 2000</span><br><span class="line">    option tcpka</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haproxy -f /etc/haproxy/haproxy.conf</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;引言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们知道搭建MySQL集群有MHA、MGR、MMM，以及MySQL官方提供的MySQL-Cluster方式，以下主要以MGR方式为主做介绍，稍后再介绍这几种集群方式的差异。&lt;/p&gt;
&lt;p&gt;我们先简单的
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>使用HAProxy搭建MySQL集群</title>
    <link href="http://chuanyichuan.github.io/2020/12/10/%E4%BD%BF%E7%94%A8HAProxy%E6%90%AD%E5%BB%BAMySQL%E9%9B%86%E7%BE%A4/"/>
    <id>http://chuanyichuan.github.io/2020/12/10/使用HAProxy搭建MySQL集群/</id>
    <published>2020-12-10T01:25:00.000Z</published>
    <updated>2020-12-10T01:58:19.898Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引言</p></blockquote><p>我们知道搭建MySQL集群有MHA、MGR、MMM，以及MySQL官方提供的MySQL-Cluster方式，以下主要以MGR方式为主做介绍，稍后再介绍这几种集群方式的差异。</p><p>我们先简单的介绍一下MGR架构，MGR的全称是MySQL Group Replication，是官方在5.7.17版本推出的基于paxos协议的集群方案。有人说MGR是基于状态机的集群设计，每一个节点都可以看做是一个状态机，任何一个节点出现</p><ol><li><p>服务器信息</p><p>我准备了四台机器，一台haproxy节点，三台MySQL节点，这三个MySQL节点均为Master，并且互为主备。</p><table><thead><tr><th>主机IP</th><th>OS</th><th>软件</th></tr></thead><tbody><tr><td>10.160.22.164</td><td>centos 7.0</td><td>haproxy</td></tr><tr><td>10.160.22.165</td><td>centos 7.0</td><td>master(slave from 167)</td></tr><tr><td>10.160.22.166</td><td>centos 7.0</td><td>master(slave from 166)</td></tr><tr><td>10.160.22.167</td><td>centos 7.0</td><td>master(slave from 165)</td></tr></tbody></table></li><li><p>架构图</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20201210093548972.png" alt="image-20201210093548972" style="zoom:50%;"></li></ol><p>mkdir /usr/local/mysql</p><p>cp -R /data2/software/mysql/mysql-5.7.31-linux-glibc2.12-x86_64/* /usr/local/mysql/</p><p>mkdir /usr/local/mysql/data</p><p>/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --explicit_defaults_for_timestamp</p><p>ln -s /usr/local/mysql/mysql.sock /tmp/mysql.sock</p><p>service mysql start</p><p>/usr/local/mysql/bin/mysql -uroot -p</p><p>alter user ‘root’@‘localhost’ identified by ‘ojbKpqiOhsg8/i’;</p><p>grant replication slave,replication client on <em>.</em> to ‘slave’@‘10.160.22.%’ identified by ‘k3G_t9Z&amp;eeip’;</p><p>grant ALL on <em>.</em> to ‘mhadmin’@‘10.160.22.%’ identified by ‘k3G8_t9Z&amp;eeip’;</p><p>flush privileges;</p><p>change master to master_host=‘10.160.22.165’,master_user=‘slave’,master_password=‘k3G_t9Z&amp;eeip’,master_port=3306,master_log_file=‘binlog.000004’,master_log_pos=1653;</p><p>change master to master_host=‘10.160.22.166’,master_user=‘slave’,master_password=‘k3G_t9Z&amp;eeip’,master_port=3306,master_log_file=‘binlog.000004’,master_log_pos=573;</p><p>change master to master_host=‘10.160.22.167’,master_user=‘slave’,master_password=‘k3G_t9Z&amp;eeip’,master_port=3306,master_log_file=‘binlog.000004’,master_log_pos=573;</p><p>ln -s /usr/local/mysql/bin/mysqlbinlog /usr/bin/mysqlbinlog</p><p>ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql</p><p>start slave;</p><p>show slave status\G</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘ojbKpqiOhsg8/i’ WITH GRANT OPTION;</p><p>flush privileges;</p><hr><blockquote><p>haproxy</p></blockquote><p>GRANT ALL ON <em>.</em> TO ‘haproxy’@’%’ IDENTIFIED BY ‘123’;</p><p>GRANT ALL ON <em>.</em> TO ‘haproxy’@‘10.160.22.164’ IDENTIFIED BY ‘123’;</p><p>update mysql.user set authentication_string=PASSWORD(’’) where user=‘haproxy’;</p><p>flush privileges;</p><h3 id="bug"><a class="markdownIt-Anchor" href="#bug"></a> bug</h3><ol><li>Can’t open and lock privilege tables: Table ‘mysql.user’ doesn’t exist<br>新数据库，未初始化表空间，执行以下语句进行初始化：</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld --initialize <span class="attribute">--user</span>=mysql <span class="attribute">--basedir</span>=/usr/local/mysql/ <span class="attribute">--datadir</span>=/usr/local/mysql/data/ --explicit_defaults_for_timestamp</span><br><span class="line">​```shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[server default]</span><br><span class="line"><span class="attribute">user</span>=mhadmin</span><br><span class="line"><span class="attribute">password</span>=k3G8_t9Z&amp;eeip</span><br><span class="line"><span class="attribute">manager_workdir</span>=/etc/mha_master/app1</span><br><span class="line"><span class="attribute">manager_log</span>=/etc/mha_master/manager.log</span><br><span class="line"><span class="attribute">remote_workdir</span>=/data/mha_master/app1</span><br><span class="line"><span class="attribute">ssh_user</span>=root</span><br><span class="line"><span class="attribute">repl_user</span>=slave</span><br><span class="line"><span class="attribute">repl_password</span>=k3G_t9Z&amp;eeip</span><br><span class="line"><span class="attribute">ping_interval</span>=1</span><br><span class="line">[server1]</span><br><span class="line"><span class="attribute">hostname</span>=10.160.22.165</span><br><span class="line"><span class="attribute">ssh_port</span>=22</span><br><span class="line"><span class="attribute">candidate_master</span>=1</span><br><span class="line">[server2]</span><br><span class="line"><span class="attribute">hostname</span>=10.160.22.166</span><br><span class="line"><span class="attribute">ssh_port</span>=22</span><br><span class="line"><span class="attribute">candidate_master</span>=0</span><br><span class="line">[server3]</span><br><span class="line"><span class="attribute">hostname</span>=10.160.22.167</span><br><span class="line"><span class="attribute">ssh_port</span>=22</span><br><span class="line"><span class="attribute">candidate_master</span>=0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;引言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们知道搭建MySQL集群有MHA、MGR、MMM，以及MySQL官方提供的MySQL-Cluster方式，以下主要以MGR方式为主做介绍，稍后再介绍这几种集群方式的差异。&lt;/p&gt;
&lt;p&gt;我们先简单的
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis集群搭建</title>
    <link href="http://chuanyichuan.github.io/2020/12/06/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://chuanyichuan.github.io/2020/12/06/Redis集群搭建/</id>
    <published>2020-12-06T15:56:00.000Z</published>
    <updated>2020-12-06T16:00:05.518Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载redis包<br><a href="http://download.redis.io/releases/redis-5.0.5.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-5.0.5.tar.gz</a></p></li><li><p>安装gcc包</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++</span><br></pre></td></tr></table></figure><ol start="3"><li>各自安装redis</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-5.0.5.tar.gz &amp;&amp; cd redis-5.0.5 &amp;&amp; make &amp;&amp; make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure><ol start="4"><li>配置redis</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .. &amp;&amp; mkdir /usr/local/redis/etc &amp;&amp; cp redis.conf /usr/local/redis/etc &amp;&amp; mkdir -p /data/db/redis/ &amp;&amp; cd /usr/local/redis/etc &amp;&amp; vim redis.conf</span><br></pre></td></tr></table></figure>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">port  6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode  no</span><br><span class="line">daemonize    yes</span><br><span class="line">pidfile  /var/run/redis_7000.pid</span><br><span class="line">cluster-enabled  yes</span><br><span class="line">cluster-config-file  nodes_7000.conf</span><br><span class="line">cluster-node-timeout  15000</span><br><span class="line">appendonly  yes</span><br><span class="line">logfile /data/logs/redis.log</span><br><span class="line">dir /data/db/redis/</span><br></pre></td></tr></table></figure><ol start="5"><li>复制redis-trib.rb文件</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /data/software/redis/redis-5.0.5/src/redis-trib.rb /usr/local/redis/bin/</span><br></pre></td></tr></table></figure><ol start="6"><li>启动各个Redis节点</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure><ol start="7"><li>查看启动日志</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /data/logs/redis.log</span><br></pre></td></tr></table></figure><ol start="8"><li>创建集群</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster create 10.154.8.208:6379 10.154.8.149:6379 10.154.8.18:6379 10.154.8.130:6379 10.154.8.112:6379 10.154.8.113:6379 --cluster-replicas 1</span><br></pre></td></tr></table></figure><hr><blockquote><p>其他命令</p></blockquote><ol><li>添加新主节点</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node new_host:new_port existing_host:existing_port --cluster-master-id node_id</span><br></pre></td></tr></table></figure><ol start="2"><li>hash槽重新分配<br>添加完新节点后，需要对新添加的主节点进行hash槽重新分配，这样该主节点才能存储数据，redis共有16384个槽。</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard host:port --cluster-from node_id --cluster-to node_id --cluster-slots &lt;args&gt; --cluster-yes</span><br></pre></td></tr></table></figure><ol start="3"><li>添加新从节点</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node new_host:new_port existing_host:existing_port --cluster-slave --cluster-master-id node_id</span><br></pre></td></tr></table></figure><ol start="4"><li>删除节点</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster  del-node host:port node_id</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载redis包&lt;br&gt;
&lt;a href=&quot;http://download.redis.io/releases/redis-5.0.5.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://download.redi
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://chuanyichuan.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL Cluster安装</title>
    <link href="http://chuanyichuan.github.io/2020/12/04/MySQL%20Cluster%E5%AE%89%E8%A3%85/"/>
    <id>http://chuanyichuan.github.io/2020/12/04/MySQL Cluster安装/</id>
    <published>2020-12-03T16:00:00.000Z</published>
    <updated>2020-12-03T16:12:13.008Z</updated>
    
    <content type="html"><![CDATA[<p>目前有3台机器，我们设置一台ndb_mgm，两台ndbd，两台mysqld</p><table><thead><tr><th>角色</th><th>机器</th></tr></thead><tbody><tr><td>ndb_mgm</td><td>10.160.22.157</td></tr><tr><td>ndbd</td><td>10.160.22.158</td></tr><tr><td></td><td>10.160.22.159</td></tr><tr><td>mysqld</td><td>10.160.22.157</td></tr><tr><td></td><td>10.160.22.158</td></tr></tbody></table><hr><ol><li><p>下载MySQL cluster安装包<br><a href="https://downloads.mysql.com/archives/cluster/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/cluster/</a></p></li><li><p>解压安装包<br>tar -zxvf mysql-cluster-8.0.21-el7-x86_64.tar.gz</p></li><li><p>复制文件<br>mkdir /usr/local/mysql<br>cp -R mysql-cluster-8.0.21-el7-x86_64/* /usr/local/mysql/</p></li><li><p>创建配置管理节点<br>4.1 将bin目录中的ndb_mgm<em>文件全部复制到/usr/local/bin/目录中<br>cp /usr/local/mysql/bin/ndb_mgm</em> /usr/local/bin/</p></li></ol><blockquote><p>ndb_mgm，ndb客户端命令</p><p>ndb_mgmd，ndb管理节点启动命令</p><p>ndb_mgm是ndb_mgmd（MySQL Cluster Server）的客户端管理工具，通过它可以方便的检查Cluster的状态、启动备份、关闭Cluster等功能。</p></blockquote><p>​4.2 修改管理节点配置文件<br>​4.2.1 创建数据库集群配置文件的目录<br>​mkdir /var/lib/mysql-cluster<br>​4.2.2 编辑配置文件<br>​vim /var/lib/mysql-cluster/config.ini<br>​文件内如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[ndbd default]</span><br><span class="line">NoOfReplicas=2</span><br><span class="line">DataMemory=1024M</span><br><span class="line">IndexMemory=512M</span><br><span class="line"></span><br><span class="line">[ndb_mgmd]</span><br><span class="line">HostName=10.160.22.157</span><br><span class="line">DataDir=/var/lib/mysql-cluster/</span><br><span class="line"></span><br><span class="line">[ndbd]</span><br><span class="line">HostName=10.160.22.158</span><br><span class="line">DataDir=/usr/local/mysql/data/</span><br><span class="line"></span><br><span class="line">[ndbd]</span><br><span class="line">HostName=10.160.22.159</span><br><span class="line">DataDir=/usr/local/mysql/data/</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">HostName=10.160.22.157</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">HostName=10.160.22.158</span><br></pre></td></tr></table></figure><p>[NDBD DEFAULT]：表示每个数据节点的默认配置，在每个节点的[NDBD]中不用再写这些选项，只能有一个。<br>NoOfReplicas：副本数量，数据节点数必须是副本数的整数倍。<br>[NDB_MGMD]：表示管理节点的配置，只有一个，默认的对其他节点的端口是1186，故服务器需要开放1186端口。<br>[NDBD]：表示每个数据节点的配置，可以有多个，分别写上不同数据节点的IP地址。<br>[MYSQLD]：表示SQL节点的配置，可以有多个，分别写上不同SQL节点的IP地址</p><p>4.3 启动管理节点</p><ul><li><p>有新增节点或首次启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgmd -f /var/lib/mysql-cluster/config.ini --initial</span><br></pre></td></tr></table></figure></li><li><p>无新增节点启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgmd -f /var/lib/mysql-cluster/config.ini</span><br></pre></td></tr></table></figure></li></ul><p>4.4 查看管理节点运行状态</p><ul><li><p>进入控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgm</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* ndb_mgm&gt; show</span><br><span class="line">  Connected to Management Server at: localhost:1186</span><br><span class="line">  Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2 (not connected, accepting connect from 10.160.22.158)</span><br><span class="line">id=3 (not connected, accepting connect from 10.160.22.159)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5 (not connected, accepting connect from 10.160.22.158)</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>创建数据节点<br>5.1 配置10.160.22.159<br><em>因为该节点为单纯的data节点，所以先配置该节点</em><br>5.1.1 配置/etc/my.cnf</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.160.22.157:1186</span><br></pre></td></tr></table></figure><p>5.1.2 新增用户并修改权限<br>groupadd mysql<br>useradd mysql -g mysql</p><h1 id="修改目录"><a class="markdownIt-Anchor" href="#修改目录"></a> 修改目录</h1><p>cd /usr/local/mysql<br>mkdir data<br>chown -R root .<br>chown -R mysql data<br>chgrp -R mysql .</p><p>5.1.3 安装数据库<br>/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/</p><blockquote><p>用户为mysql的名称需要跟配置文件my.cnf中的user=mysql相同</p><p>–basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ 需要加上</p><p>启动成功后最后一行会输出数据库密码：root@localhost: &gt;Ba4&lt;oa!u7fD*</p></blockquote><p>5.1.2 设置开启自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure><p>5.1.3 启动data节点<br>service mysqld start</p><blockquote><p>启动的过程中可能会遇到一些错误，比如找不到/tmp/mysql.sock<br>这里建立一个软连接即可： ln -s /usr/local/mysql/data/mysql.sock /tmp/mysql.sock<br>建立好之后再启动</p></blockquote><p>5.1.4 修改数据库密码</p><ul><li><p>启动之后需要修改数据库密码，否则会无法使用，初始密码就是5.1.3步骤中的密码<br>/usr/local/mysql/bin/mysql -uroot -p</p></li><li><p>修改密码：<br>alter user ‘root’@‘localhost’ identified by ‘ojbKpqiOhsg8/i’;</p></li><li><p>退出重新用新密码登录<br>/usr/local/mysql/bin/mysql -uroot -p</p></li></ul><p>5.1.5 启动data节点<br>/usr/local/mysql/bin/ndbd --initial</p><p><em>首次启动加上<code>--initial</code>，非首次启动不需要加，不然会丢失之前的数据</em></p><p>5.1.6 启动之后到管理节点查看cluster状态<br>ndb_mgm&gt; show</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2 (not connected, accepting connect from 10.160.22.158)</span><br><span class="line">id=3@10.160.22.159  (mysql-8.0.21 ndb-8.0.21, starting, Nodegroup: 0)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5 (not connected, accepting connect from 10.160.22.158)</span><br></pre></td></tr></table></figure><p><em>10.160.22.159状态已经连接上了</em></p><p>5.2 配置10.160.22.158<br><em>因为该节点为data和sql节点，所以该节点的配置需要在158的基础上增加sql的配置，主要修改/etc/my.cnf</em></p><p>5.2.1 修改/etc/my.cnf文件</p><p>[mysqld]</p><h1 id="设置ndbcluster"><a class="markdownIt-Anchor" href="#设置ndbcluster"></a> 设置ndbcluster</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ndbcluster</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置默认的存储引擎</span></span><br><span class="line"></span><br><span class="line">default-storage-engine=ndbcluster</span><br><span class="line">port=3306</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.160.22.157:1186</span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><blockquote><p>其他方式与10.160.22.159的配置相同<br><em><font color="red">最终需要将root密码修改为与159相同，所有节点的密码都应相同</font></em></p></blockquote><p>5.2.3 启动之后到管理节点查看cluster状态<br>ndb_mgm&gt; show</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2@10.160.22.158  (mysql-8.0.21 ndb-8.0.21, Nodegroup: 0, *)</span><br><span class="line">id=3@10.160.22.159  (mysql-8.0.21 ndb-8.0.21, Nodegroup: 0)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5@10.160.22.158  (mysql-8.0.21 ndb-8.0.21)</span><br></pre></td></tr></table></figure><blockquote><p>可以看到data和sql节点都已经连接OK了</p></blockquote><ol start="6"><li>创建sql节点<br>6.1 10.160.22.159在上面已经完成了，不在配置</li></ol><p>6.2 配置10.160.22.157<br>6.2.1 修改/etc/my.cnf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">ndbcluster</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">default-storage-engine=ndbcluster</span><br><span class="line">port=3306</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><p>6.2.2 启动sql节点<br>service mysqld start</p><hr><p>安装过程中出现的问题：</p><ol><li>报错找不到libcrypto.so.1.1<br>ln -s /usr/local/mysql/lib/private/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1<br>ln -s /usr/local/mysql/lib/private/libssl.so.1.1 /usr/lib64/libssl.so.1.1</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前有3台机器，我们设置一台ndb_mgm，两台ndbd，两台mysqld&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;th&gt;机器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ndb_mgm&lt;/td&gt;
&lt;td&gt;1
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
</feed>
