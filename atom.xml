<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>串一串</title>
  
  <subtitle>断舍离</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chuanyichuan.github.io/"/>
  <updated>2021-01-18T17:16:58.583Z</updated>
  <id>http://chuanyichuan.github.io/</id>
  
  <author>
    <name>cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis自定义TypeHandler解决字段映射问题</title>
    <link href="http://chuanyichuan.github.io/2021/01/18/MyBatis%E8%87%AA%E5%AE%9A%E4%B9%89TypeHandler%E8%A7%A3%E5%86%B3%E5%AD%97%E6%AE%B5%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98/"/>
    <id>http://chuanyichuan.github.io/2021/01/18/MyBatis自定义TypeHandler解决字段映射问题/</id>
    <published>2021-01-18T15:22:00.000Z</published>
    <updated>2021-01-18T17:16:58.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小林子：串哥</p><p>串一串：干哈啊，又来</p><p>小林子：如果MySQL一张表中一个字段存储的数据格式是&quot;1,2,3,4,5&quot;，也就是逗号分隔的，我如何能让别的使用者在无感知的情况下，只用List&lt;Integer&gt;来传输和接收？持久层用的MyBatis。你滴明白我的意思吗？</p><p>串一串：不明白</p><p>小林子：…</p><p>串一串：你知道MyBatis中有一个类叫<code>BaseTypeHandler</code>吗？这个类可以满足你的需求。</p><p>小林子：具体要怎么做？我有点懵，没接触过这个类，它是干嘛的？</p><p>串一串：我们来看个例子</p></blockquote><p>创建一张表待用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table qfant_message.demo (</span><br><span class="line">id int auto_increment primary key,</span><br><span class="line">name varchar(10) null,</span><br><span class="line">hobbies varchar(100) null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后新建一个SpringBoot工程，在工程中引入<code>mybatis-generator</code>，我们使用它来生成Mapper文件，如果不会的话，自行谷歌，这里不做详细讲解，下一篇再说。</p><p>在生成Mapper文件之前，我们先定义一个处理字段<code>hobbies</code>的<code>TypeHandler</code>，命名为<code>ListTypeHandler</code>，这里问个问题：为什么不叫<code>HobbiesTypeHandler</code>呢？这样应该和字段更加贴合啊。原因是这个Handler不仅仅是能处理<code>hobbies</code>，它可以处理所有相同情况的任何表的任何字段。这个类继承自<code>org.apache.ibatis.type.BaseTypeHandler</code>，来看下简化后的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">TypeReference</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">TypeHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parameter == <span class="keyword">null</span>) &#123;</span><br><span class="line">      ps.setNull(i, jdbcType.TYPE_CODE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      setNonNullParameter(ps, i, parameter, jdbcType);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getNullableResult(rs, columnName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getNullableResult(rs, columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getNullableResult(cs, columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，不论是通过哪一个<code>getResult</code>方法获取数据，都是去调用下面的几个抽象方法，MyBatis帮我们实现了很多常用的类型的Handler，都在<code>org.apache.ibatis.type</code>包里面，截图看下吧，免得以为在忽悠你</p><img src="/images/image-20210118235512640.png" alt="image-20210118235512640" style="zoom:50%;"><blockquote><p>小林子：那这里面有没有能满足我这个需求的Handler？如果有的话我就直接用了</p><p>串一串：你去看看，这里我说一下怎么重复造轮子</p></blockquote><p>根据上述内容，我们就可以来写<code>ListTypeHandler</code>了，在写之前先整理一下思路：</p><p>因为我们实体类中<code>hobbies</code>属性是<code>java.util.List</code>类型的，而数据库表中<code>hobbies</code>字段是<code>varchar</code>类型的，所以我们需要在更新(插入)之前和查询之后对数据进行一次转换</p><ol><li>插入之前：将List中的数据转换为以逗号分隔的字符串</li><li>查询之后：将逗号分隔的字符串转换为List结构</li></ol><p>思路理顺了，我们来看看具体的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc.kevinlu.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qfant.sms.data.model.DemoDO;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MappedJdbcTypes</span>(value = &#123; JdbcType.VARCHAR &#125;)</span><br><span class="line"><span class="comment">//① @MappedTypes(value = DemoDO.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">List</span>&lt;<span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, List&lt;Integer&gt; parameter, JdbcType jdbcType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String d = parameter.stream().map(v -&gt; String.valueOf(v)).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">        ps.setString(i, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String values = rs.getString(columnName);</span><br><span class="line">        <span class="keyword">return</span> getResults(values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String values = rs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">return</span> getResults(values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String values = cs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">return</span> getResults(values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getResults</span><span class="params">(String values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(values)) &#123;</span><br><span class="line">            String[] data = values.split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">return</span> Arrays.stream(data).mapToInt(v -&gt; Integer.parseInt(v)).boxed().collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后生成对应的Mapper和DO实体类，刚才说了我们使用的是<code>mybatis-generator</code>，这里直接贴上<code>&lt;table&gt;</code>的相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"demo"</span> <span class="attr">domainObjectName</span>=<span class="string">"DemoDO"</span> <span class="attr">mapperName</span>=<span class="string">"DemoMapper"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableCountByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableDeleteByExample</span>=<span class="string">"true"</span> <span class="attr">enableInsert</span>=<span class="string">"true"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableUpdateByExample</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">selectByExampleQueryId</span>=<span class="string">"true"</span> <span class="attr">enableSelectByPrimaryKey</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"MySql"</span> <span class="attr">identity</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"hobbies"</span> <span class="attr">property</span>=<span class="string">"hobbies"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">javaType</span>=<span class="string">"java.util.List"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">typeHandler</span>=<span class="string">"cc.kevinlu.handler.ListTypeHandler"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里我们使用标签<code>&lt;columnOverride&gt;</code>重写了column的定义，这里一定要指明<code>javaType</code>和<code>typeHandler</code>，<code>javaType</code>的目的是让生成的<code>DemoDO</code>的属性<code>hobbies</code>声明为<code>java.util.List</code>，如果不加该字段的话，默认会根据<code>jdbcType=&quot;VARCHAR&quot;</code>生成<code>java.lang.String</code>类型，然后<code>typeHandler</code>指向我们刚创建的<code>ListTypeHandler</code>，这样在生成DemoMapper.xml的时候，会在对应的字段上加上<code>typeHandler</code>，否则需要我们挨个儿位置的去修改，xml中的内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"cc.kevinlu.data.model.DemoDO"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    SELECT LAST_INSERT_ID()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into demo (name, hobbies)</span><br><span class="line">  values (</span><br><span class="line">  #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">  #&#123;hobbies,jdbcType=VARCHAR,typeHandler=com.qfant.sms.handler.ListTypeHandler&#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>小林子：是不是这样就可以直接使用了？</p><p>串一串：你有没有注意到<code>ListTypeHandler</code>上有一个被注释掉的注解，把那个注释打开，然后value指向DO实体类即可，这个注释的意思是<code>指定该Handler映射的java类</code>，value是一个数组，可以指定一组映射类，当然也可以不指定。即使指定了，也可以用于其他类型，然后<code>@MappedJdbcTypes</code>映射的是jdbc的类型</p><p>小林子：那现在是不是可以测试啦？走一波~</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DemoMapper demoMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;DemoDO&gt; data = demoMapper.selectByExample(<span class="keyword">new</span> DemoDOExample());</span><br><span class="line">  data.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出：</p><p>Demo1DO [Hash = 3112387, id=1, name=123, hobbies=[1, 2, 3], serialVersionUID=1]<br>Demo1DO [Hash = 3294608, id=2, name=456, hobbies=[4, 5, 6], serialVersionUID=1]</p></blockquote><hr><p>我们来总结一下：</p><ol><li>MyBatis之所以能解决MySQL字段和Java属性之间的匹配，全都依赖于<code>org.apache.ibatis.type.BaseTypeHandler&lt;T&gt;</code>抽象类，在该类中定义了3个获取结果的方法、1个更新的方法和4个抽象方法，我们可以自定义该抽象类来实现这个4个抽象方法进行Java类的属性和表字段的映射，可以做一些相关的处理。</li><li>MyBatis在<code>org.apache.ibatis.type</code>包中定义了常用的字段映射<code>Handler</code>，并且在服务启动的时候会在<code>TypeHandlerRegistry</code>构造方法中将其注册到一个Map中，而<code>TypeHandlerRegistry</code>是在MyBatis的核心类<code>Configuration</code>中进行的实例化</li><li>自定义的<code>Handler</code>可以全局通用，不受限于某一个字段或某一个Java类</li><li>在生成Mapper时使用<code>&lt;columnOverride&gt;</code>重写<code>column</code>声明，然后需要指定<code>jdbcType</code>和<code>typeHandler</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;小林子：串哥&lt;/p&gt;
&lt;p&gt;串一串：干哈啊，又来&lt;/p&gt;
&lt;p&gt;小林子：如果MySQL一张表中一个字段存储的数据格式是&amp;quot;1,2,3,4,5&amp;quot;，也就是逗号分隔的，我如何能让别的使用者在无感知的情况下，只用List&amp;lt;Integ
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://chuanyichuan.github.io/categories/MyBatis/"/>
    
    
  </entry>
  
  <entry>
    <title>idea打包Java工程为jar</title>
    <link href="http://chuanyichuan.github.io/2021/01/16/idea%E6%89%93%E5%8C%85Java%E5%B7%A5%E7%A8%8B%E4%B8%BAjar/"/>
    <id>http://chuanyichuan.github.io/2021/01/16/idea打包Java工程为jar/</id>
    <published>2021-01-16T13:56:00.000Z</published>
    <updated>2021-01-17T16:49:55.883Z</updated>
    
    <content type="html"><![CDATA[<p>目前创建Java工程大多是使用Maven或者Gradle了，但是在某种情况下，还是需要单独创建一个Java工程来做些事情，正巧最近机缘巧合需要搞这么个事情，因为idea将Java工程打成jar包还是有点麻烦的，所以就此记录一下我的使用方法，废话了半天，往下看吧。</p><ol><li><p>创建一个Java工程</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116220410433.png" alt="image-20210116220410433" style="zoom:50%;"><p>很简单，一直下一步就可以了</p></li><li><p>加入依赖jar包</p><p>新创建好的工程只有一个src目录，只能使用响应的jdk包中的类，我们创建一个名叫lib的Directory，然后把需要的jar包全部都copy到到该目录下，然后选中所有的jar后右击鼠标，选择<code>Add as Library</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116222800748.png" alt="image-20210116222800748" style="zoom:50%;"><p>然后给Library起一个名字，不要和现存的Library重名</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116222945461.png" alt="image-20210116222945461" style="zoom:50%;"><p>这里有三个参数，我们需要关注一下<code>Level</code>这个参数，它指定了该<code>Library</code>的适用范围，分别有Global、Project、Module三种，分别对应全局、项目、模块，这个就不用解释了，如果真有人不懂的话，额。。那就不懂了吧！创建完成之后，根据<code>Add to module</code>选择的module自动加到模块的环境中</p></li><li><p>创建打包策略</p><p>idea右上角有一个<code>project structure</code>，点击一下进入项目配置控制台，或者快捷键<code>command+;</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116224612820.png" alt="image-20210116224612820" style="zoom:50%;"><p>可以到Libraries中查看刚才创建的Library，然后进入到<code>Artifacts</code>创建打包策略，选择<code>From modules with dependencies</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116225003451.png" alt="image-20210116225003451" style="zoom:50%;"><p>接着选择打包要执行的<code>Main</code>方法，点击<code>OK</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116225353055.png" alt="image-20210116225353055" style="zoom:50%;"><p>确定之后，在src目录下会自动生成一个<code>META-INF/MANIFEST.MF</code>文件，文件内容就是指定一下<code>Main-Class</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Manifest-Version</span>: 1<span class="selector-class">.0</span></span><br><span class="line"><span class="selector-tag">Main-Class</span>: <span class="selector-tag">com</span><span class="selector-class">.qfant</span><span class="selector-class">.sms</span><span class="selector-class">.Main</span></span><br></pre></td></tr></table></figure></li><li><p>执行打包</p><p>以上就是打包前的准备，现在已经准备好了，那就开始打包吧，我没找到快捷键，所以就笨一点吧</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116231258739.png" alt="image-20210116231258739" style="zoom:50%;"><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116234106955.png" alt="image-20210116234106955" style="zoom:50%;"><p>打包完成之后，默认在out目录下就会出现一个jar包，大概是这个样子的</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116234606179.png" alt="image-20210116234606179" style="zoom:50%;"></li><li><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sms-demo.jar</span><br></pre></td></tr></table></figure><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20210116235732927.png" alt="image-20210116235732927" style="zoom:50%;"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前创建Java工程大多是使用Maven或者Gradle了，但是在某种情况下，还是需要单独创建一个Java工程来做些事情，正巧最近机缘巧合需要搞这么个事情，因为idea将Java工程打成jar包还是有点麻烦的，所以就此记录一下我的使用方法，废话了半天，往下看吧。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://chuanyichuan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据迁移到Elasticsearch方案</title>
    <link href="http://chuanyichuan.github.io/2021/01/14/MySQL%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0Elasticsearch%E6%96%B9%E6%A1%88/"/>
    <id>http://chuanyichuan.github.io/2021/01/14/MySQL数据迁移到Elasticsearch方案/</id>
    <published>2021-01-14T02:38:00.000Z</published>
    <updated>2021-01-14T02:54:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL单表建议存储数据为5kw，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL单表建议存储数据为5kw，&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL全量备份和增量备份</title>
    <link href="http://chuanyichuan.github.io/2021/01/13/MySQL%E5%85%A8%E9%87%8F%E5%A4%87%E4%BB%BD%E5%92%8C%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD/"/>
    <id>http://chuanyichuan.github.io/2021/01/13/MySQL全量备份和增量备份/</id>
    <published>2021-01-13T15:50:00.000Z</published>
    <updated>2021-01-14T02:30:04.326Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL目前是市面上比较流程的关系型数据库，很多人使用MySQL里的数据真的安全吗？如果发生以下问题的话：</p><ul><li>MySQL数据目录所在磁盘损坏</li><li>MySQL服务器发生故障</li><li>人为操作失误导致删除了一些数据</li><li>黑客入侵导致数据被攻陷等问题</li></ul><p>这个时候如果没有备份数据库中的数据，造成的影响将是非常严重的，但是我们备份数据不能每天手动的去全量导出，如果放假忘记了或者啥啥啥的，咋整？所以还是要让备份交给服务器去做调度。</p><p>这里推荐的备份工具是<code>innobackupex</code>，首先要安装它，步骤如下(centos)：</p><p>官网：<a href="https://www.percona.com/downloads/Percona-XtraBackup-2.4/" target="_blank" rel="noopener">https://www.percona.com/downloads/Percona-XtraBackup-2.4/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install percona-xtrabackup</span><br></pre></td></tr></table></figure><blockquote><p>如果安装失败，那么就更改一下yum源，然后再执行安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 备份源</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 更新阿里云源</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>在安装的过程中，如果出现依赖报错，那么就安装一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL</span><br></pre></td></tr></table></figure><p>完整的命令过程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份源</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新阿里云源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装备份工具</span></span><br><span class="line">yum -y install percona-xtrabackup</span><br></pre></td></tr></table></figure><p>测试是否安装成功，执行一下命令<code>innobackupex --help</code>，出现以下内容即为安装成功</p><img src="/images/image-20210114004925713.png" alt="image-20210114004925713" style="zoom:50%;"><hr><p>备份工具已经准备好了，那么我们就开始编写备份脚本（因为我们备份是一个逻辑流程，不是一条命令能解决的，这里就不特地讲解备份命令了，在下方的脚本中进行相关的解释）</p><ol><li>全量备份</li></ol><p>首先看一下全量备份，也就是将整个数据库的所有数据(包括库、表、视图、表数据等)，脚本的主要逻辑是这样的：</p><ul><li>声明数据库账号信息和数据留存时间等基础信息</li><li>动态创建备份文件临时存储目录</li><li>执行备份命令开始数据备份</li><li>校验备份结果是否超过，如果成功则将最新备份的文件目录写入到指定文件中(用于动态增量备份)</li><li>如果失败，则给备份管理人员发送告警提醒邮件</li><li>筛选数据备份存储目录中指定日期之前的备份记录，然后删除已经过期的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> -e</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 声明数据库账号信息和数据留存时间等基础信息</span></span><br><span class="line">user=root # 数据库用户名</span><br><span class="line">password=rXH?py2 # 数据库密码</span><br><span class="line">LEAVE_DAY_AGO=$(date -d "-30 day" +'%s')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 动态创建备份文件临时存储目录</span></span><br><span class="line">[ -d /app/backupdb ]|| mkdir -p /app/backupdb &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">[ -d /data/backup/db ]|| mkdir -p /data/backup/db &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">echo "start copying ..." &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 执行备份命令开始数据备份</span></span><br><span class="line">/usr/bin/innobackupex --user="$user" --password="$password" /data/backup/db/ &gt; /app/backupdb/backupdb_log.log 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 校验备份结果是否超过</span></span><br><span class="line">if [ "$?" != "0" ]; then</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.1 备份失败，则给备份管理人员发送告警提醒邮件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;from_email&gt;：发送邮件</span></span><br><span class="line">    # &lt;receiver_email&gt;：多个邮箱以,分隔</span><br><span class="line">    # &lt;smtp_server&gt;：邮箱服务器</span><br><span class="line">    # &lt;send_account&gt;：邮件发送账户名</span><br><span class="line">    # &lt;send_password&gt;：邮件发送账户密码</span><br><span class="line">    /usr/local/bin/sendEmail -f &lt;from_email&gt; -t &lt;receiver_email&gt; -s &lt;smtp_server&gt; -u "数据库备份失败" -o message-charset=utf-8 -xu &lt;send_account&gt; -xp &lt;send_password&gt; -m "数据库备份失败，详情请查看日志文件 /app/backupdb/backupdb_log.log" -o tls=no &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">    exit 1;</span><br><span class="line">else</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.2 备份成功，则将最新备份的文件目录写入到指定文件中(用于动态增量备份)</span></span><br><span class="line">    echo "end copied! ..." &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">    echo `ls -lt /data/backup/db/ | grep - | head -n 1 |awk '&#123;print $9&#125;'` &gt; /data/backup/last_backup_dir_name</span><br><span class="line">fi;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 删除<span class="variable">$&#123;LEAVE_DAY_AGO&#125;</span>天前的备份目录及子目录、文件</span></span><br><span class="line">path="/data/backup/db"</span><br><span class="line">files=$(ls $path)</span><br><span class="line">for filename in $files</span><br><span class="line">do</span><br><span class="line">    file=($&#123;filename:0:10&#125;)</span><br><span class="line">    if echo $file | grep -Eq "[0-9]&#123;4&#125;-[0-9]&#123;1,2&#125;-[0-9]&#123;1,2&#125;" &amp;&amp; date -d $file +%Y%m%d &gt; /dev/null 2&gt;&amp;1;then</span><br><span class="line">        echo $filename 'format is right date' &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">        file_time=$(date -d $file +'%s')</span><br><span class="line">        </span><br><span class="line">        # 校验备份记录是否已过期</span><br><span class="line">        if [ $file_time -lt $LEAVE_DAY_AGO ];then</span><br><span class="line">            rm -rf $path/$filename*</span><br><span class="line">            echo "删除$filename 备份目录" &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">        else</span><br><span class="line">            echo "$filename 为有效期内数据库备份" &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">        fi;</span><br><span class="line">    else</span><br><span class="line">        echo "日期格式不正确:" $filename &amp;&gt;&gt;/app/backupdb/backupdb_log.log</span><br><span class="line">    fi;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ol start="2"><li>增量备份</li></ol><p>上面讲了全量备份，增量备份是依据于上一次全量备份的记录去做的增量，这里最重要的就是要获取到上一次备份生成的目录，也就是全量备份中4.2中保存的，具体步骤为：</p><ul><li>声明数据库账号信息和数据留存时间等基础信息</li><li>动态创建备份文件临时存储目录</li><li>搜索并获取上一次全量备份的目录地址</li><li>执行备份命令开始数据备份</li><li>校验备份结果是否超过，如果成功则将最新备份的文件目录写入到指定文件中(用于动态增量备份)</li><li>如果失败，则给备份管理人员发送告警提醒邮件</li><li>筛选数据备份存储目录中指定日期之前的备份记录，然后删除已经过期的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> -e</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 声明数据库账号信息和数据留存时间等基础信息</span></span><br><span class="line">user=root # 数据库用户名</span><br><span class="line">password=rXH?py2 # 数据库密码</span><br><span class="line">LEAVE_DAY_AGO=$(date -d "-30 day" +'%s')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 动态创建备份文件临时存储目录</span></span><br><span class="line">[ -d /app/backupdb ]|| mkdir -p /app/backupdb &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">[ -d /data/backup/db/increment ]|| mkdir -p /data/backup/db/increment &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">echo "increment start copying ..." &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 搜索并获取上一次全量备份的目录地址，这里也就是上一次全量备份输出的文件中的内容</span></span><br><span class="line">last_backup_dir_name=`echo /data/backup/last_backup_dir_name`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 执行备份命令开始数据备份</span></span><br><span class="line">/usr/bin/innobackupex --user="$user" --password="$password" --incremental /data/backup/db/increment/ --incremental-basedir /data/backup/db/"$last_backup_dir_name" &gt; /app/backupdb/backupdb_increment_log.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 校验备份结果是否超过</span></span><br><span class="line">if [ "$?" != "0" ]; then</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.1 备份失败，则给备份管理人员发送告警提醒邮件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;from_email&gt;：发送邮件</span></span><br><span class="line">    # &lt;receiver_email&gt;：多个邮箱以,分隔</span><br><span class="line">    # &lt;smtp_server&gt;：邮箱服务器</span><br><span class="line">    # &lt;send_account&gt;：邮件发送账户名</span><br><span class="line">    # &lt;send_password&gt;：邮件发送账户密码</span><br><span class="line">    /usr/local/bin/sendEmail -f &lt;from_email&gt; -t &lt;receiver_email&gt; -s &lt;smtp_server&gt; -u "数据库增量备份失败" -o message-charset=utf-8 -xu &lt;send_account&gt; -xp &lt;send_password&gt; -m "数据库增量备份失败，详情请查看日志文件 /app/backupdb/backupdb_increment_log.log" -o tls=no &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">    exit 1;</span><br><span class="line">else</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.2 备份成功，则将最新备份的文件目录写入到指定文件中(用于动态增量备份)</span></span><br><span class="line">    echo "increment end copied! ..." &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">fi;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. 删除30天前的备份目录及子目录、文件</span></span><br><span class="line">path="/data/backup/db/increment"</span><br><span class="line">files=$(ls $path)</span><br><span class="line">for filename in $files</span><br><span class="line">do</span><br><span class="line">    file=($&#123;filename:0:10&#125;)</span><br><span class="line">    if echo $file | grep -Eq "[0-9]&#123;4&#125;-[0-9]&#123;1,2&#125;-[0-9]&#123;1,2&#125;" &amp;&amp; date -d $file +%Y%m%d &gt; /dev/null 2&gt;&amp;1;then</span><br><span class="line">        echo $filename 'format is right date' &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">        file_time=$(date -d $file +'%s')</span><br><span class="line">        # 校验备份记录是否已过期</span><br><span class="line">        if [ $file_time -lt $LEAVE_DAY_AGO ];then</span><br><span class="line">            rm -rf $path/$filename*</span><br><span class="line">            echo "删除$filename 备份目录" &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">        else</span><br><span class="line">            echo "$filename 为有效期内数据库备份" &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">        fi;</span><br><span class="line">    else</span><br><span class="line">        echo "日期格式不正确:" $filename &amp;&gt;&gt;/app/backupdb/backupdb_increment_log.log</span><br><span class="line">    fi;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><p>到目前，MySQL全量和增量备份脚本都已经编写完成了，接下来就是将脚本的执行设置为系统调度<code>corntab</code>中，由crontab进行调度，设置crontab的命令为：<code>crontab -e</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">每周一凌晨4点执行全量备份</span></span><br><span class="line">0 4 * * 1 sh /app/backupdb/db_backup.sh &gt;&gt; /app/backupdb/backupdb_log.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">每天凌晨2点执行增量备份</span></span><br><span class="line">0 2 * * * sh /app/backupdb/db_backup_increment.sh &gt;&gt; /app/backupdb/backupdb_increment_log.log</span><br></pre></td></tr></table></figure><hr><p>既然讲了备份，那么就需要讲一下恢复，如何使用备份的数据进行全量恢复呢？下次再说</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL目前是市面上比较流程的关系型数据库，很多人使用MySQL里的数据真的安全吗？如果发生以下问题的话：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL数据目录所在磁盘损坏&lt;/li&gt;
&lt;li&gt;MySQL服务器发生故障&lt;/li&gt;
&lt;li&gt;人为操作失误导致删除了一些数据&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Maven配置之dependencyManagement</title>
    <link href="http://chuanyichuan.github.io/2021/01/07/Maven%E9%85%8D%E7%BD%AE%E4%B9%8BdependencyManagement/"/>
    <id>http://chuanyichuan.github.io/2021/01/07/Maven配置之dependencyManagement/</id>
    <published>2021-01-07T12:40:00.000Z</published>
    <updated>2021-01-09T18:11:19.197Z</updated>
    
    <content type="html"><![CDATA[<p>今天小林子突然发来一条消息：</p><blockquote><p>小林子：这个关键字是干嘛用的，为什么我的子模块导入不了依赖的jar？是子模块需要配置什么吗？</p><img src="/images/image-20210107214458024.png" alt="image-20210107214458024" style="zoom:50%;"><p>串一串：这是gradle吧，dependencyManagement的作用是什么你知道么？</p><p>小林子：…</p><p>串一串：看来你是不知道哈，在单模块中，我们使用dependencies就可以实现对依赖的引入和管理，并且模块中使用的依赖版本会和我们手动引入的依赖版本一致，版本冲突的可能性较低(但有冲突的可能)，这种是我们常用的管理依赖的办法。</p><p>小林子：懂了</p><p>串一串：懂个屁了懂了，这只是说了单模块，多模块的依赖如何管理你也懂了吗？</p><p>小林子：…那多模块的依赖应该怎么搞呢？是不是在父pom.xml中使用dependencies进行引入就可以了？</p><p>串一串：如果在父模块中直接使用dependencies的话，就会把父模块中引入的依赖全部导入到所有的子模块中，这就会出现一个问题：父模块中依赖了starter-redis.jar，子A模块需要用到starter-redis.jar，而子B模块中用不到该jar包，所以就没有在B的配置文件中配置Redis的相关信息，那么这时启动B模块，就会报错。</p><p>串一串：你看看你的配置文件，除了dependencies和imports之外，还有什么？是不是还有<code>dependencyManagement</code>，这个东西就是出现在父pom.xml中的，当然也可以出现在单模块中，比如我们使用<code>spring-cloud</code>和<code>spring-cloud-alibaba</code>的时候。<code>dependencyManagement</code>不会导入依赖，只是声明一个依赖(声明的范围包括groupId、artifactId、version、type、scope、classifier等)，意思也就是如果在子模块中只需要指定依赖的groupId和artifactId即可，如果该依赖在父或本pom中的<code>dependencyManagement</code>中有声明，则该依赖的其他信息自动继承，无需再次声明version、type、scope等信息。</p><p>小林子：有点懵…</p><p>串一串：给你看一段代码，你解读一下，目录结构是这样的：</p><img src="/images/image-20210108223101327.png" alt="image-20210108223101327" style="zoom:50%;"><ul><li>父模块pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">&gt;</span>          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.kevinlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.61<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;                 <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>子模块pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">&gt;</span>          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;         <span class="comment">&lt;!-- 引入parent依赖 --&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.kevinlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.kevinlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-one<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>我们在父pom.xml中的<code>dependencyManagement</code>声明了三个依赖jar包，分别是lombok、fastjson、mysql-connector-java，并指定了相关依赖的版本号，，而在子pom.xml中，只引入了<code>spring-boot-starter-web</code>一个依赖，现在我们看一下<code>module-one</code>的所有依赖项：</p><img src="/images/image-20210110004053248.png" alt="image-20210110004053248" style="zoom:50%;"><p>发现在子模块<code>module-one</code>中并没有导入其父模块中<code>dependencyManagement</code>声明的jar包。那么如果我们这个时候想要在<code>module-one</code>中引入fastjson，该怎么做呢？</p><p>小林子：那还不简单么，直接在dependencies中加一个dependency就好了啊，就这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.61<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>串一串：嗯，不算太笨嘛，但是你有没有想过，如果在这里不指定fastjson的version的话，该依赖的版本会是多少？</p><p>小林子：呃。。。会报错吧，好像是<code>Dependency not found</code>错误吧</p><p>串一串：你试一试吧</p><p>—A Few Moments Later—</p><p>串一串：怎么样，和你刚才说的结果一样吗？</p><p>小林子：为什么我删掉了<code>module-one</code>中的version还是能引入1.2.61版本的jar，是缓存的原因吗？</p><p>串一串：可能是缓存的原因吧，哈哈~但是即使你reimport之后，它的版本依然还是1.2.61，你看看父pom.xml的<code>dependencyManagement</code>中对fastjson的声明的版本是多少，然后你把里面的版本改为1.2.62，reimport后看看模块<code>module-one</code>的fastjson版本有没有变化</p><p>小林子：变了，哦~原来是这里的原因，那也就是说我只需要在模块中用dependency指定依赖的groupId和artifactId就可以了，其他的都不需要再重复写了，然后它就会自动的使用父模块或者本模块的<code>dependencyManagement</code>中声明的其他信息，对吧？</p><p>串一串：嗯，是的，这样做的目的就是统一管理整个工程的依赖，防止出现因为版本冲突出现的BUG，至于为什么使用这种方法可以实现对依赖的管理，那就要从<strong>依赖传递</strong>开始说起了，下次再聊这个，再聊一个问题：如果在父pom.xml和子pom.xml都通过<code>dependencyManagement</code>声明了一个依赖的不同版本，那么在子模块中使用该依赖时，对应的版本将会是哪个？</p><p>小林子：根据依赖传递的特性，应该是子模块中声明的吧</p><p>串一串：嗯，是的，说的很对，如果想要在子项目中使用特定版本的依赖，那么就指定一下version就可以了，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.69<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这时子模块中引入的fastjson的版本就会是1.2.69，传递依赖的就近原则</p><p>串一串：好了，就说这么多吧，下回再讲讲传递依赖。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天小林子突然发来一条消息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小林子：这个关键字是干嘛用的，为什么我的子模块导入不了依赖的jar？是子模块需要配置什么吗？&lt;/p&gt;
&lt;img src=&quot;/images/image-20210107214458024.png&quot; alt=
      
    
    </summary>
    
    
      <category term="Maven" scheme="http://chuanyichuan.github.io/categories/Maven/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot中CorsMappings和Interceptor发生冲突失效</title>
    <link href="http://chuanyichuan.github.io/2021/01/07/SpringBoot%E4%B8%ADCorsMappings%E5%92%8CInterceptor%E5%8F%91%E7%94%9F%E5%86%B2%E7%AA%81%E5%A4%B1%E6%95%88/"/>
    <id>http://chuanyichuan.github.io/2021/01/07/SpringBoot中CorsMappings和Interceptor发生冲突失效/</id>
    <published>2021-01-06T16:05:00.000Z</published>
    <updated>2021-01-07T01:18:44.117Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离的项目中，必定会遇到请求跨域的问题，我们解决跨域一般有两种情况，往下看：</p><p>第一种方法就是自定义一个跨域Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addMapping(<span class="string">"/**"</span>).allowCredentials(<span class="keyword">false</span>)</span><br><span class="line">                        .allowedMethods(<span class="string">"POST"</span>, <span class="string">"GET"</span>, <span class="string">"PUT"</span>, <span class="string">"OPTIONS"</span>, <span class="string">"DELETE"</span>).allowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中我们可以看到，其实就是定义了一个<code>WebMvcConfigurer</code>的实例，然后实现了<code>addCorsMappings()</code>方法，在方法中进行了跨域注册，这里的代码中设置的<code>addMapping(&quot;/**&quot;)</code>，意思是所有的资源(动态+静态)均允许跨域，如果仅仅设置某些资源允许跨域请求，这里只需要指定响应的路径即可，例如<code>addMapping(&quot;/doc.html&quot;)</code>，多个路径的话，设置多条即可。</p><hr><p>第二种方法则是定义一个<code>WebMvcConfigurer</code>的子类，在子类中实现<code>addCorsMappings</code>方法，方法内容和第一种相似，就不细讲了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConverterConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>).allowCredentials(<span class="keyword">false</span>).allowedMethods(<span class="string">"POST"</span>, <span class="string">"GET"</span>, <span class="string">"PUT"</span>, <span class="string">"OPTIONS"</span>, <span class="string">"DELETE"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>第三种方法，是自定义<code>CorsFilter</code>的实例，并将其注册到Spring容器中，<font color="red"><strong>在项目中使用了拦截器<code>HandlerInterceptor</code>的时候，只有使用该方法才能设置成功</strong>：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConverterConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(loginInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/login"</span>, <span class="string">"/doc**"</span>, <span class="string">"/swagger**"</span>, <span class="string">"/webjars/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// 设置允许的方法</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// 允许任何头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        config.addExposedHeader(<span class="string">"token"</span>);</span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">loginInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在前后端分离的项目中，必定会遇到请求跨域的问题，我们解决跨域一般有两种情况，往下看：&lt;/p&gt;
&lt;p&gt;第一种方法就是自定义一个跨域Bean：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot官方Starter</title>
    <link href="http://chuanyichuan.github.io/2020/12/23/SpringBoot%E5%AE%98%E6%96%B9Starter/"/>
    <id>http://chuanyichuan.github.io/2020/12/23/SpringBoot官方Starter/</id>
    <published>2020-12-23T15:07:00.000Z</published>
    <updated>2020-12-23T15:08:13.626Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">Starter 名称</th><th style="text-align:left">Starter 描述</th></tr></thead><tbody><tr><td style="text-align:left">spring-boot-starter</td><td style="text-align:left">核心 Starter，包括自动配置、日志及 YAML 支持等</td></tr><tr><td style="text-align:left">spring-boot-starter-activemq</td><td style="text-align:left">集成 Apache ActiveMQ，基于 JMS 的消息队列</td></tr><tr><td style="text-align:left">spring-boot-starter-artemis</td><td style="text-align:left">集成 Apache Artemis，基于 JMS 的消息队列</td></tr><tr><td style="text-align:left">spring-boot-starter-amqp</td><td style="text-align:left">集成 Spring AMQP 和 Rabbit MQ 的消息队列</td></tr><tr><td style="text-align:left">spring-boot-starter-aop</td><td style="text-align:left">集成 Spring AOP 和 AspectJ 面向切面编程</td></tr><tr><td style="text-align:left">spring-boot-starter-batch</td><td style="text-align:left">集成 Spring Batch（批处理）</td></tr><tr><td style="text-align:left">spring-boot-starter-cache</td><td style="text-align:left">集成 Spring Cache（缓存）</td></tr><tr><td style="text-align:left">spring-boot-starter-data-cassandra</td><td style="text-align:left">集成 Cassandra（分布式数据库） 和 Spring Data Cassandra</td></tr><tr><td style="text-align:left">spring-boot-starter-data-cassandra-reactive</td><td style="text-align:left">集成 Cassandra（分布式数据库） 和 Spring Data Cassandra Reactive</td></tr><tr><td style="text-align:left">spring-boot-starter-data-couchbase</td><td style="text-align:left">集成 Couchbase（文档型数据库） 和 Spring Data Couchbase</td></tr><tr><td style="text-align:left">spring-boot-starter-data-couchbase-reactive</td><td style="text-align:left">集成 Couchbase（文档型数据库） 和 Spring Data Couchbase Reactive</td></tr><tr><td style="text-align:left">spring-boot-starter-data-elasticsearch</td><td style="text-align:left">集成 Elasticsearch（搜索引擎）和 Spring Data Elasticsearch</td></tr><tr><td style="text-align:left">spring-boot-starter-data-solr</td><td style="text-align:left">集成 Apache Solr（搜索引擎）结合 Spring Data Solr</td></tr><tr><td style="text-align:left">spring-boot-starter-data-jdbc</td><td style="text-align:left">集成 Spring Data JDBC</td></tr><tr><td style="text-align:left">spring-boot-starter-data-jpa</td><td style="text-align:left">集成 Spring Data JPA 结合 Hibernate</td></tr><tr><td style="text-align:left">spring-boot-starter-data-ldap</td><td style="text-align:left">集成 Spring Data LDAP</td></tr><tr><td style="text-align:left">spring-boot-starter-data-mongodb</td><td style="text-align:left">集成 MongoDB（文档型数据库）和 Spring Data MongoDB</td></tr><tr><td style="text-align:left">spring-boot-starter-data-mongodb-reactive</td><td style="text-align:left">集成 MongoDB（文档型数据库）和 Spring Data MongoDB Reactive</td></tr><tr><td style="text-align:left">spring-boot-starter-data-neo4j</td><td style="text-align:left">集成 Neo4j（图形数据库）和 Spring Data Neo4j</td></tr><tr><td style="text-align:left">spring-boot-starter-data-r2dbc</td><td style="text-align:left">集成 Spring Data R2DBC</td></tr><tr><td style="text-align:left">spring-boot-starter-data-redis</td><td style="text-align:left">集成 Redis（内存数据库）结合 Spring Data Redis 和  Lettuce 客户端</td></tr><tr><td style="text-align:left">spring-boot-starter-data-redis-reactive</td><td style="text-align:left">集成 Redis（内存数据库）结合 Spring Data Redis reactive 和 Lettuce 客户端</td></tr><tr><td style="text-align:left">spring-boot-starter-data-rest</td><td style="text-align:left">集成 Spring Data REST 暴露 Spring Data repositories 输出 REST 资源</td></tr><tr><td style="text-align:left">spring-boot-starter-thymeleaf</td><td style="text-align:left">集成 Thymeleaf 视图构建 MVC web 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-freemarker</td><td style="text-align:left">集成 FreeMarker 视图构建 MVC web 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-groovy-templates</td><td style="text-align:left">集成 Groovy 模板视图构建 MVC web 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-hateoas</td><td style="text-align:left">集成 Spring MVC 和 Spring HATEOAS 构建超媒体 RESTful Web 应用程序</td></tr><tr><td style="text-align:left">spring-boot-starter-integration</td><td style="text-align:left">集成 Spring Integration</td></tr><tr><td style="text-align:left">spring-boot-starter-jdbc</td><td style="text-align:left">集成 JDBC 结合 HikariCP 连接池</td></tr><tr><td style="text-align:left">spring-boot-starter-jersey</td><td style="text-align:left">集成 JAX-RS 和 Jersey 构建 RESTful web 应用，是 spring-boot-starter-web 的一个替代 Starter</td></tr><tr><td style="text-align:left">spring-boot-starter-jooq</td><td style="text-align:left">集成 jOOQ 访问 SQL 数据库，是 spring-boot-starter-data-jpa 或者 spring-boot-starter-jdbc 的替代 Starter</td></tr><tr><td style="text-align:left">spring-boot-starter-json</td><td style="text-align:left">用于读写 JSON</td></tr><tr><td style="text-align:left">spring-boot-starter-jta-atomikos</td><td style="text-align:left">集成 Atomikos 实现  JTA 事务</td></tr><tr><td style="text-align:left">spring-boot-starter-jta-bitronix</td><td style="text-align:left">集成  Bitronix 实现  JTA 事务（ 从 2.3.0 开始标识为 <strong>Deprecated</strong>）</td></tr><tr><td style="text-align:left">spring-boot-starter-mail</td><td style="text-align:left">集成 Java Mail 和 Spring 框架的邮件发送功能</td></tr><tr><td style="text-align:left">spring-boot-starter-mustache</td><td style="text-align:left">集成 Mustache 视图构建 web 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-security</td><td style="text-align:left">集成 Spring Security</td></tr><tr><td style="text-align:left">spring-boot-starter-oauth2-client</td><td style="text-align:left">集成 Spring Security’s OAuth2/OpenID 连接客户端功能</td></tr><tr><td style="text-align:left">spring-boot-starter-oauth2-resource-server</td><td style="text-align:left">集成 Spring Security’s OAuth2 资源服务器功能</td></tr><tr><td style="text-align:left">spring-boot-starter-quartz</td><td style="text-align:left">集成 Quartz 任务调度</td></tr><tr><td style="text-align:left">spring-boot-starter-rsocket</td><td style="text-align:left">构建 RSocket 客户端和服务端</td></tr><tr><td style="text-align:left">spring-boot-starter-test</td><td style="text-align:left">集成 JUnit Jupiter, Hamcrest 和 Mockito 测试 Spring Boot 应用和类库</td></tr><tr><td style="text-align:left">spring-boot-starter-validation</td><td style="text-align:left">集成 Java Bean Validation 结合 Hibernate Validator</td></tr><tr><td style="text-align:left">spring-boot-starter-web</td><td style="text-align:left">集成 Spring MVC 构建 RESTful web 应用，使用  Tomcat 作为默认内嵌容器</td></tr><tr><td style="text-align:left">spring-boot-starter-web-services</td><td style="text-align:left">集成 Spring Web Services</td></tr><tr><td style="text-align:left">spring-boot-starter-webflux</td><td style="text-align:left">集成 Spring Reactive Web 构建 WebFlux 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-websocket</td><td style="text-align:left">集成 Spring WebSocket 构建 WebSocket 应用</td></tr><tr><td style="text-align:left">spring-boot-starter-actuator</td><td style="text-align:left">集成 Spring Boot Actuator，提供生产功能以帮助监控和管理应用程序</td></tr><tr><td style="text-align:left">spring-boot-starter-jetty</td><td style="text-align:left">集成 Jetty 作为内嵌的 servlet 容器，可用于替代 spring-boot-starter-tomcat</td></tr><tr><td style="text-align:left">spring-boot-starter-log4j2</td><td style="text-align:left">集成 Log4j2 日志框架，可用于替代 spring-boot-starter-logging</td></tr><tr><td style="text-align:left">spring-boot-starter-logging</td><td style="text-align:left">集成 Logback 日志框架，这个也是默认的日志 Starter</td></tr><tr><td style="text-align:left">spring-boot-starter-reactor-netty</td><td style="text-align:left">集成 Netty 作为内嵌的响应式 HTTP 服务器</td></tr><tr><td style="text-align:left">spring-boot-starter-tomcat</td><td style="text-align:left">集成 Tomcat 作为内嵌的 servlet 容器，这也是默认的 servlet 容器 starter 被集成 spring-boot-starter-web 里面</td></tr><tr><td style="text-align:left">spring-boot-starter-undertow</td><td style="text-align:left">集成 Undertow 作为内嵌的 servlet 容器，可用于替代 spring-boot-starter-tomcat</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Starter 名称&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Starter 描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker0-Iptables No Chain/target/match by That Name</title>
    <link href="http://chuanyichuan.github.io/2020/12/23/docker0-iptables-No-chaintargetmatch-by-that-name/"/>
    <id>http://chuanyichuan.github.io/2020/12/23/docker0-iptables-No-chaintargetmatch-by-that-name/</id>
    <published>2020-12-22T16:58:00.000Z</published>
    <updated>2021-01-18T17:15:32.313Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS 7下使用类似nginx之类的web server，启动docker时有时会报以下错误：</p><p>docker0: iptables: No chain/target/match by that name.</p><p>解决方法：</p><p>service docker restart</p><p>重启docker后:</p><p>iptables -L</p><p>可以看到iptables里面多出了Chain Docker的选项。</p><p>经验为：在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在CentOS 7下使用类似nginx之类的web server，启动docker时有时会报以下错误：&lt;/p&gt;
&lt;p&gt;docker0: iptables: No chain/target/match by that name.&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;ser
      
    
    </summary>
    
    
      <category term="BUG" scheme="http://chuanyichuan.github.io/categories/BUG/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux搭建NFS</title>
    <link href="http://chuanyichuan.github.io/2020/12/17/Linux%E6%90%AD%E5%BB%BANFS/"/>
    <id>http://chuanyichuan.github.io/2020/12/17/Linux搭建NFS/</id>
    <published>2020-12-17T13:57:00.000Z</published>
    <updated>2020-12-17T14:02:37.022Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在所有的节点执行语句</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nfs-utils rpcbind</span><br></pre></td></tr></table></figure></li><li><p>在服务端执行以下语句</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/exports</span><br><span class="line">/data  10.160.22.0/24(rw,all_squash,anonuid=0,anongid=0)</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使配置生效</span></span><br><span class="line">exportfs -rv</span><br><span class="line">service rpcbind start</span><br><span class="line">service nfs start</span><br><span class="line">service rpcbind status</span><br><span class="line">service nfs status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 看一下是否成功</span></span><br><span class="line">showmount -e</span><br></pre></td></tr></table></figure></li><li><p>在客户端执行挂载</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">mount -t nfs -o nolock,nfsvers=3,vers=3 10.160.22.14:/data /data</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在所有的节点执行语句&lt;/p&gt;
 &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>解决Centos使用ssh连接自动断开</title>
    <link href="http://chuanyichuan.github.io/2020/12/15/%E8%A7%A3%E5%86%B3Centos%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80/"/>
    <id>http://chuanyichuan.github.io/2020/12/15/解决Centos使用ssh连接自动断开/</id>
    <published>2020-12-14T16:00:00.000Z</published>
    <updated>2020-12-15T01:45:49.945Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Centos7的时候，经常在一段时间没有操作之后就自动断掉了，然后重新连接之后就可能失去了当前操作场景，那么如何才能保证我们即使长时间不操作也会一直保持连接状态，往下看。</p><ol><li><p>第一种方法也是网上到处都能搜索到的，修改<code>/etc/ssh/sshd_config</code>文件</p><p>使用命令打开<code>/etc/ssh/sshd_config</code>文件：<code>vim /etc/ssh/sshd_config</code>，修改两个参数<code>ClientAliveInterval</code>和<code>ClientAliveCountMax</code>，这两个参数控制了客户端的存活检测间隔和失败检测的最大次数，如果超过了这个次数就断开客户端的连接，默认情况下这两个是未开启的，将其修改为60和5，值自己定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClientAliveInterval 100</span><br><span class="line">ClientAliveCountMax 15</span><br></pre></td></tr></table></figure><p>修改完配置之后重启sshd服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><p>使用该方法修改之后如果还是经常自动断开，那你就看第二种</p></li><li><p>第二种来自于<code>linvirtshell</code>，是我实际遇到的情况</p><p>在服务器自动断开的时候，控制台输出了一个关键语句：</p><img src="/images/image-20201215092855460.png" alt="image-20201215092855460"><p>哦吼~这句话很关键喔，尤其是<code>auto-logout</code>，在<code>linvirtshell</code>上有这么一句话：</p><blockquote><p>The ssh “timed out waiting for input: auto-logout” messages is generated by ssh upon reaching a auto-logout after an inactivity time specified by the TMOUT environment variable. If this variable is not set your session will not be auto-logged out due to inactivity. If the environment variable is set, your session will be automatically closed/logged out after the amount of seconds specified by the TMOUT variable.</p></blockquote><p>大致意思是Linux维护了一个<code>TMOUT</code>的环境变量，该环境变量的目的是在ssh客户端在指定时间未活动的话，就自动断开该客户端的连接，单位是<code>秒</code>，那我们输出一下该环境变量看看是不是这货在搞怪。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ci034 ~]# echo $TMOUT</span><br><span class="line">180</span><br></pre></td></tr></table></figure><p>果然，180秒未活动就自动断开连接，结合之前每次断开的时间间隔，就是这货在作怪了，那么我们直接修改这个参数试试，设置为30分钟不过期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TMOUT=1800</span><br></pre></td></tr></table></figure><p>经验证，确实有效，那么将其设置到<code>/etc/profile</code>文件中(如果文件中已经有配置了，修改时间即可)</p><p>如果想关闭自动断开，想永久不断开的话(不推荐)，就从环境变量里面移除掉该参数。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用Centos7的时候，经常在一段时间没有操作之后就自动断掉了，然后重新连接之后就可能失去了当前操作场景，那么如何才能保证我们即使长时间不操作也会一直保持连接状态，往下看。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一种方法也是网上到处都能搜索到的，修改&lt;code&gt;/etc/
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux安装kubernetes集群</title>
    <link href="http://chuanyichuan.github.io/2020/12/15/Linux%E5%AE%89%E8%A3%85kubernetes%E9%9B%86%E7%BE%A4/"/>
    <id>http://chuanyichuan.github.io/2020/12/15/Linux安装kubernetes集群/</id>
    <published>2020-12-14T16:00:00.000Z</published>
    <updated>2020-12-16T16:39:08.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="221-版本统一"><a class="markdownIt-Anchor" href="#221-版本统一"></a> 2.2.1 版本统一</h3><ul><li>Docker 18.09.0</li><li>kubeadm-1.16.0-0</li><li>kubelet-1.16.0-0</li><li>kubectl-1.16.0-0<ul><li><a href="http://k8s.gcr.io/kube-apiserver:v1.16.0" target="_blank" rel="noopener">k8s.gcr.io/kube-apiserver:v1.16.0</a></li><li><a href="http://k8s.gcr.io/kube-controller-manager:v1.16.0" target="_blank" rel="noopener">k8s.gcr.io/kube-controller-manager:v1.16.0</a></li><li><a href="http://k8s.gcr.io/kube-scheduler:v1.16.0" target="_blank" rel="noopener">k8s.gcr.io/kube-scheduler:v1.16.0</a></li><li><a href="http://k8s.gcr.io/kube-proxy:v1.16.0" target="_blank" rel="noopener">k8s.gcr.io/kube-proxy:v1.16.0</a></li><li><a href="http://k8s.gcr.io/pause:3.1" target="_blank" rel="noopener">k8s.gcr.io/pause:3.1</a></li><li><a href="http://k8s.gcr.io/etcd:3.3.15-0" target="_blank" rel="noopener">k8s.gcr.io/etcd:3.3.15-0</a></li><li><a href="http://k8s.gcr.io/coredns:1.6.2" target="_blank" rel="noopener">k8s.gcr.io/coredns:1.6.2</a></li></ul></li><li>calico:v3.9.5</li></ul><h2 id="223-更新并安装依赖"><a class="markdownIt-Anchor" href="#223-更新并安装依赖"></a> 2.2.3 更新并安装依赖</h2><blockquote><p>3台机器都需要执行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp</span><br></pre></td></tr></table></figure><h2 id="224-安装docker"><a class="markdownIt-Anchor" href="#224-安装docker"></a> 2.2.4 安装Docker</h2><blockquote><p>3台机器都需要执行，安装版本为18.09.0</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">01 `进入虚拟机`</span><br><span class="line">    ssh root@xxx.xx.x.xxx</span><br><span class="line">02 `卸载之前安装的docker`</span><br><span class="line">    sudo yum remove docker docker latest docker-latest-logrotate \</span><br><span class="line">    docker-logrotate docker-engine docker-client docker-client-latest docker-common</span><br><span class="line">03 `安装必要依赖`</span><br><span class="line">    sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">04 `添加软件源信息`</span><br><span class="line">    sudo yum-config-manager \</span><br><span class="line">    --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    yum list | grep docker-ce</span><br><span class="line">05 `更新yum缓存`</span><br><span class="line">    sudo yum makecache fast</span><br><span class="line">06 `安装docker`</span><br><span class="line">    sudo yum install -y docker-ce-18.09.0 docker-ce-cli-18.09.0 containerd.io [指定安装docker版本]</span><br><span class="line">07 `启动docker并设置开机启动`</span><br><span class="line">    sudo systemctl start docker &amp;&amp; sudo systemctl enable docker</span><br><span class="line">08 `测试docker安装是否成功`</span><br><span class="line">    sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="225-修改hosts文件"><a class="markdownIt-Anchor" href="#225-修改hosts文件"></a> 2.2.5 修改hosts文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">01 `master`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置master的hostname，并且修改hosts文件</span></span><br><span class="line">sudo hostnamectl set-hostname node1</span><br><span class="line">02 `两个worker`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置worker01/02的hostname，并且修改hosts文件</span></span><br><span class="line">sudo hostnamectl set-hostname node2</span><br><span class="line">sudo hostnamectl set-hostname node3</span><br><span class="line">03 `三台机器`</span><br><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">10.160.22.163 node1</span><br><span class="line">10.160.22.164 node2</span><br><span class="line">10.160.22.165 node3</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">04 `使用ping测试一下`</span><br><span class="line">ping node1</span><br><span class="line">ping node2</span><br><span class="line">ping node3</span><br></pre></td></tr></table></figure><h2 id="226-系统基础前提配置"><a class="markdownIt-Anchor" href="#226-系统基础前提配置"></a> 2.2.6 系统基础前提配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">01 `关闭防火墙`</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line">02 `关闭selinux`</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</span><br><span class="line">03 `关闭swap`</span><br><span class="line">swapoff -a</span><br><span class="line">sed -i '/swap/s/^\(.*\)$/#\1/g' /etc/fstab</span><br><span class="line">04 `配置iptables的ACCEPT规则`</span><br><span class="line">iptables -F &amp;&amp; iptables -X &amp;&amp; iptables \</span><br><span class="line">    -F -t nat &amp;&amp; iptables -X -t nat &amp;&amp; iptables -P FORWARD ACCEPT</span><br><span class="line">05 `设置系统参数`</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br></pre></td></tr></table></figure><h2 id="227-installing-kubeadm-kubelet-and-kubectl"><a class="markdownIt-Anchor" href="#227-installing-kubeadm-kubelet-and-kubectl"></a> 2.2.7 Installing kubeadm, kubelet and kubectl</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">01 `配置yum源`</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">02 `安装kubeadm&amp;kubelet&amp;kubectl`</span><br><span class="line">yum install -y kubeadm-1.16.0-0 kubelet-1.16.0-0 kubectl-1.16.0-0 --setopt=obsoletes=0</span><br><span class="line">03 `docker和k8s设置同一个cgroup`</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker</span></span><br><span class="line">vi /etc/docker/daemon.json 【文件没内容的话，就新建；有的话，就加上这一句，注意文件的格式[逗号]】</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">&#123;</span><br><span class="line">"exec-opts": ["native.cgroupdriver=systemd"]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================  </span></span><br><span class="line">systemctl daemon-reload 【`修改了/etc/docker/daemon.json文件后必须执行`】</span><br><span class="line">systemctl restart docker 【`重启docker，一定要执行`】</span><br><span class="line"><span class="meta">#</span><span class="bash"> kubelet</span></span><br><span class="line">sed -i "s/cgroup-driver=systemd/cgroup-driver=cgroupfs/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 【`找不到内容没关系`】</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet 【`重启kubelet，一定要执行`】</span><br></pre></td></tr></table></figure><h2 id="228-proxypausescheduler等国内镜像"><a class="markdownIt-Anchor" href="#228-proxypausescheduler等国内镜像"></a> 2.2.8 proxy/pause/scheduler等国内镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">01 `查看kubeadm使用的镜像`</span><br><span class="line">kubeadm config images list</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.16.0</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.16.0</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.16.0</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.16.0</span><br><span class="line">k8s.gcr.io/pause:3.1</span><br><span class="line">k8s.gcr.io/etcd:3.3.15-0</span><br><span class="line">k8s.gcr.io/coredns:1.6.2</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">02 `解决国外镜像不能访问的问题`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建kubeadm.sh脚本，用于拉取镜像/打tag/删除原有镜像</span></span><br><span class="line">vim kubeadm.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">KUBE_VERSION=v1.16.0</span><br><span class="line">KUBE_PAUSE_VERSION=3.1</span><br><span class="line">ETCD_VERSION=3.3.15-0</span><br><span class="line">CORE_DNS_VERSION=1.6.2</span><br><span class="line">GCR_URL=k8s.gcr.io</span><br><span class="line">ALIYUN_URL=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">images=(kube-proxy:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-scheduler:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-controller-manager:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-apiserver:$&#123;KUBE_VERSION&#125;</span><br><span class="line">pause:$&#123;KUBE_PAUSE_VERSION&#125;</span><br><span class="line">etcd:$&#123;ETCD_VERSION&#125;</span><br><span class="line">coredns:$&#123;CORE_DNS_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker pull $ALIYUN_URL/$imageName</span><br><span class="line">docker tag  $ALIYUN_URL/$imageName $GCR_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">03 `运行脚本和查看镜像`</span><br><span class="line">sh kubeadm.sh 【运行脚本】</span><br><span class="line">docker images 【查看镜像】</span><br><span class="line">04 `将这些镜像推送到自己的阿里云仓库`【可选，根据自己实际的情况】</span><br><span class="line">sudo docker login --username=lucunyu21@sina.com registry.cn-beijing.aliyuncs.com 【登录自己的阿里云仓库，master节点执行即可】 </span><br><span class="line">密码：******</span><br><span class="line">vi kubeadm-push-aliyun.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">KUBE_VERSION=v1.16.0</span><br><span class="line">KUBE_PAUSE_VERSION=3.1</span><br><span class="line">ETCD_VERSION=3.3.15-0</span><br><span class="line">CORE_DNS_VERSION=1.6.2</span><br><span class="line">GCR_URL=k8s.gcr.io</span><br><span class="line">ALIYUN_URL=registry.cn-beijing.aliyuncs.com/chuanc</span><br><span class="line">images=(kube-proxy:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-scheduler:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-controller-manager:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-apiserver:$&#123;KUBE_VERSION&#125;</span><br><span class="line">pause:$&#123;KUBE_PAUSE_VERSION&#125;</span><br><span class="line">etcd:$&#123;ETCD_VERSION&#125;</span><br><span class="line">coredns:$&#123;CORE_DNS_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker tag $GCR_URL/$imageName $ALIYUN_URL/$imageName</span><br><span class="line">docker push $ALIYUN_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> ====================================================================================</span></span><br><span class="line">06 `运行脚本`</span><br><span class="line">sh ./kubeadm-push-aliyun.sh</span><br></pre></td></tr></table></figure><h2 id="229-kube-init初始化master"><a class="markdownIt-Anchor" href="#229-kube-init初始化master"></a> 2.2.9 kube init初始化master</h2><blockquote><p><strong>官网：</strong> <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></p></blockquote><h3 id="2291-初始化master节点"><a class="markdownIt-Anchor" href="#2291-初始化master节点"></a> 2.2.9.1  初始化master节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">01 `初始化master节点`</span><br><span class="line">kubeadm reset 【初始化集群状态】</span><br><span class="line">kubeadm init --kubernetes-version=1.16.0 \</span><br><span class="line">    --apiserver-advertise-address=192.168.43.51 \</span><br><span class="line">    --pod-network-cidr=172.17.0.1/16 【初始化master节点】</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：记得保存好最后kubeadm join的信息。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.160.22.163:6443 --token fag134.3wot9edrvs82vh6d \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1df02a06552c02ba0e28e00c80a50e9ff40da81a4cdd53c136a16d3c0233f450</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">02 `根据日志提示执行`</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">03 `查看pod`</span><br><span class="line">etcd，controller，scheduler等组件都以pod的方式安装成功</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：coredns没有启动，需要安装网络插件</span></span><br><span class="line">kubectl get pods --all-namespaces 【查看所有pods】</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-5644d7b6d9-9tnkr                   1/1     Running   0          77m</span><br><span class="line">coredns-5644d7b6d9-rhtnn                   1/1     Running   0          77m</span><br><span class="line">etcd-node1                                 1/1     Running   0          76m</span><br><span class="line">kube-apiserver-node1                       1/1     Running   0          76m</span><br><span class="line">kube-controller-manager-node1              1/1     Running   0          76m</span><br><span class="line">kube-proxy-7h457                           1/1     Running   0          52m</span><br><span class="line">kube-proxy-7htxc                           1/1     Running   0          53m</span><br><span class="line">kube-proxy-hn5bc                           1/1     Running   0          77m</span><br><span class="line">kube-scheduler-node1                       1/1     Running   0          76m</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">04 `健康检查`</span><br><span class="line">curl -k https://localhost:6443/healthz</span><br></pre></td></tr></table></figure><h3 id="2292-kube-init流程"><a class="markdownIt-Anchor" href="#2292-kube-init流程"></a> 2.2.9.2 kube init流程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">01 `进行一系列检查，以确定这台机器可以部署kubernetes`</span><br><span class="line">02 `生成kubernetes对外提供服务所需要的各种证书可对应目录`</span><br><span class="line">/etc/kubernetes/pki/*</span><br><span class="line">03 `为其他组件生成访问kube-ApiServer所需的配置文件`</span><br><span class="line">ls /etc/kubernetes/</span><br><span class="line">    admin.conf  controller-manager.conf  kubelet.conf  scheduler.conf</span><br><span class="line">04 `为 Master组件生成Pod配置文件`</span><br><span class="line">    ls /etc/kubernetes/manifests/*.yaml</span><br><span class="line">    kube-apiserver.yaml </span><br><span class="line">    kube-controller-manager.yaml</span><br><span class="line">    kube-scheduler.yaml</span><br><span class="line">05 `生成etcd的Pod YAML文件`</span><br><span class="line">    ls /etc/kubernetes/manifests/*.yaml</span><br><span class="line">    kube-apiserver.yaml </span><br><span class="line">    kube-controller-manager.yaml</span><br><span class="line">    kube-scheduler.yaml</span><br><span class="line">etcd.yaml</span><br><span class="line">06 `一旦这些 YAML文件出现在被 kubelet监视的/etc/kubernetes/manifests/目录下，kubelet就会自动创建这些yaml文件定义的pod，即master组件的容器。master容器启动后，kubeadm会通过检查localhost:443/healthz这个master组件的健康状态检查URL，等待master组件完全运行起来`</span><br><span class="line">07 `为集群生成一个bootstrap token`</span><br><span class="line">08 `将ca.crt等Master节点的重要信息，通过ConfigMap的方式保存在etcd中，工后续部署node节点使用`</span><br><span class="line">09 `最后一步是安装默认插件，kubernetes默认kube-proxy和DNS两个插件是必须安装的`</span><br></pre></td></tr></table></figure><h2 id="2210-部署calico网络插件"><a class="markdownIt-Anchor" href="#2210-部署calico网络插件"></a> 2.2.10 部署calico网络插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择网络插件</span></span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"><span class="meta">#</span><span class="bash"> calico网络插件</span></span><br><span class="line">https://docs.projectcalico.org/v3.9/getting-started/kubernetes/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：calico，同样在master节点上操作</span></span><br><span class="line">01 `可以先手动pull一下` 【可能拉取较慢】</span><br><span class="line">curl https://docs.projectcalico.org/v3.9/manifests/calico.yaml | grep image 【版本会变化，需要根据实际情况拉取镜像】</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">      image: calico/cni:v3.9.3</span><br><span class="line">          image: calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">          image: calico/node:v3.9.3</span><br><span class="line">          image: calico/kube-controllers:v3.9.3</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">docker pull calico/cni:v3.9.3</span><br><span class="line">    docker pull calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">    docker pull calico/node:v3.9.3</span><br><span class="line">    docker pull calico/kube-controllers:v3.9.3</span><br><span class="line">    `官方镜像拉取太慢，用Jack老师的`</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/kube-controllers:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/cni:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/pod2daemon-flexvol:v3.9.3</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/node:v3.9.3</span><br><span class="line">`打tag`</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/kube-controllers:v3.9.3 \</span><br><span class="line">    calico/kube-controllers:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/cni:v3.9.3 \</span><br><span class="line">    calico/cni:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/pod2daemon-flexvol:v3.9.3 \</span><br><span class="line">    calico/pod2daemon-flexvol:v3.9.3</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/node:v3.9.3 \</span><br><span class="line">    calico/node:v3.9.3</span><br><span class="line">`删除registry.cn-hangzhou.aliyuncs.com/itcrazy2016/格式的镜像` </span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：打tag不会改变imageId，会删除calico的镜像  </span></span><br><span class="line">docker rmi -f $(docker images registry.cn-hangzhou.aliyuncs.com/itcrazy2016/* -aq)</span><br><span class="line">02 `在k8s中安装calico`</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https://docs.projectcalico.org/v3.9/manifests/calico.yaml</span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line">03 `确认一下calico是否安装成功`</span><br><span class="line">kubectl get pods --all-namespaces -w 【实时查看所有的Pods】</span><br></pre></td></tr></table></figure><h3 id="上传calico到阿里云"><a class="markdownIt-Anchor" href="#上传calico到阿里云"></a> 上传calico到阿里云</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">CALICO_VERSION=v3.9.5</span><br><span class="line">GCR_URL=calico</span><br><span class="line">ALIYUN_URL=registry.cn-beijing.aliyuncs.com/calico_chuanchuan</span><br><span class="line">images=(cni:$&#123;CALICO_VERSION&#125;</span><br><span class="line">pod2daemon-flexvol:$&#123;CALICO_VERSION&#125;</span><br><span class="line">node:$&#123;CALICO_VERSION&#125;</span><br><span class="line">kube-controllers:$&#123;CALICO_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker tag $GCR_URL/$imageName $ALIYUN_URL/$imageName</span><br><span class="line">docker push $ALIYUN_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="下载calico"><a class="markdownIt-Anchor" href="#下载calico"></a> 下载calico</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e</span><br><span class="line">CALICO_VERSION=v3.9.5</span><br><span class="line">GCR_URL=calico</span><br><span class="line">ALIYUN_URL=registry.cn-beijing.aliyuncs.com/calico_chuanchuan</span><br><span class="line">images=(cni:$&#123;CALICO_VERSION&#125;</span><br><span class="line">pod2daemon-flexvol:$&#123;CALICO_VERSION&#125;</span><br><span class="line">node:$&#123;CALICO_VERSION&#125;</span><br><span class="line">kube-controllers:$&#123;CALICO_VERSION&#125;)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker pull $ALIYUN_URL/$imageName</span><br><span class="line">docker tag $ALIYUN_URL/$imageName $GCR_URL/$imageName</span><br><span class="line">docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="修改calicoyaml文件中的版本号"><a class="markdownIt-Anchor" href="#修改calicoyaml文件中的版本号"></a> 修改calico.yaml文件中的版本号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/v3.9.6/v3.9.5/g' calico.yaml</span><br></pre></td></tr></table></figure><h3 id="创建calico"><a class="markdownIt-Anchor" href="#创建calico"></a> 创建calico</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看pod</span></span><br><span class="line">kubectl get po --all-namespaces</span><br></pre></td></tr></table></figure><h2 id="2211-kube-join"><a class="markdownIt-Anchor" href="#2211-kube-join"></a> 2.2.11 kube join</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">01 记得保存初始化master节点的最后打印信息【注意这边大家要自己的，下面我的只是一个参考】</span><br><span class="line">kubeadm join 10.160.22.163:6443 --token fag134.3wot9edrvs82vh6d \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1df02a06552c02ba0e28e00c80a50e9ff40da81a4cdd53c136a16d3c0233f450【worker上面执行】</span><br><span class="line">02 在master节点上检查集群信息</span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">NAME                   STATUS   ROLES    AGE     VERSION</span><br><span class="line">master-kubeadm-k8s     Ready    master   19m     v1.14.0</span><br><span class="line">worker01-kubeadm-k8s   Ready    &lt;none&gt;   3m6s    v1.14.0</span><br><span class="line">worker02-kubeadm-k8s   Ready    &lt;none&gt;   2m41s   v1.14.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br></pre></td></tr></table></figure><h2 id="2212-再次体验pod"><a class="markdownIt-Anchor" href="#2212-再次体验pod"></a> 2.2.12 再次体验Pod</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">01 `定义pod.yml文件，比如pod_nginx_rs.yaml` 【不能使用tab，只能用空格】</span><br><span class="line">mkdir pod_nginx_rs</span><br><span class="line">cd pod_nginx_rs</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">cat &gt; pod_nginx_rs.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    tier: frontend</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      tier: frontend</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx</span><br><span class="line">      labels:</span><br><span class="line">        tier: frontend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================================================================================</span></span><br><span class="line">02 `根据pod_nginx_rs.yml文件创建pod`</span><br><span class="line">kubectl apply -f pod_nginx_rs.yaml</span><br><span class="line">03 `查看pod`</span><br><span class="line">    kubectl get pods</span><br><span class="line">    kubectl get pods -o wide</span><br><span class="line">    kubectl describe pod nginx</span><br><span class="line">04 `感受通过rs将pod扩容`</span><br><span class="line">kubectl scale rs nginx --replicas=5</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">05 `删除pod`</span><br><span class="line">kubectl delete -f pod_nginx_rs.yaml</span><br></pre></td></tr></table></figure><blockquote><ol><li>kubectl命令自动补全</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> &lt;(kubectl completion bash)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ol start="2"><li>kubeadm命令自动补全</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yum install bash-completion -y</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> &lt;(kubeadm completion bash)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"source &lt;(kubeadm completion bash)"</span> &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ol start="3"><li>忘了join命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 主节点上执行该命令进行查看</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> kubeadm token create --<span class="built_in">print</span>-join-command</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><ol start="4"><li>切换默认namespace</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> kubectl config <span class="built_in">set</span>-context $(kubectl config current-context) --namespace=ignite</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h3 id="calico故障"><a class="markdownIt-Anchor" href="#calico故障"></a> Calico故障</h3><ol><li><p>calico-node一直处于NotReady状态，报错信息（一般在机器有多个网卡的情况下会出现该故障）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: calico/node is not ready: BIRD is not ready: BGP not established with 10.0. 0.1. In most cases, this “unready” status error in Kubernetes means that a particular peer is unreachable in the cluster. Check that BGP connectivity between the two peers is allowed in the environment.</span><br></pre></td></tr></table></figure><p>解决办法：</p><blockquote><p>calico找不到网卡，所以需要手动的指定一下节点使用的网卡，修改calico.yaml中的calico-node配置，在env中新增如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> - name: IP_AUTODETECTION_METHOD</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   value: <span class="string">"interface=eth0"</span> <span class="comment"># 网卡根据服务器情况填写</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>然后重新创建calico的pod</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;221-版本统一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#221-版本统一&quot;&gt;&lt;/a&gt; 2.2.1 版本统一&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker 18.09.0&lt;/li&gt;
&lt;li&gt;kubeadm-1.16.0-0&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://chuanyichuan.github.io/categories/Kubernetes/"/>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/tags/Linux/"/>
    
      <category term="k8s" scheme="http://chuanyichuan.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Docker设置镜像源</title>
    <link href="http://chuanyichuan.github.io/2020/12/15/Docker%E8%AE%BE%E7%BD%AE%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <id>http://chuanyichuan.github.io/2020/12/15/Docker设置镜像源/</id>
    <published>2020-12-14T16:00:00.000Z</published>
    <updated>2020-12-15T06:44:24.725Z</updated>
    
    <content type="html"><![CDATA[<p>打开<code>/etc/docker/daemon.json</code>文件，添加<code>registry-mirrors</code>，具体如下（添加网易的镜像源）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意不要覆盖原有配置</p></blockquote><p>国内的镜像源有以下几个比较常用的：</p><ol><li><p>Docker中国区官方镜像： <a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a></p></li><li><p>网易： <a href="http://hub-mirror.c.163.com" target="_blank" rel="noopener">http://hub-mirror.c.163.com</a></p></li><li><p>中国科技大学ustc： <a href="https://docker.mirrors.ustc.edu.cn" target="_blank" rel="noopener">https://docker.mirrors.ustc.edu.cn</a></p></li><li><p>阿里云</p><p>阿里云的镜像加速器每个账号的都不相同，可以登录阿里云<strong>容器镜像服务</strong>查看自己的（<a href="https://cr.console.aliyun.com/%EF%BC%89" target="_blank" rel="noopener">https://cr.console.aliyun.com/）</a></p><img src="/images/image-20201215144340360.png" alt="image-20201215144340360" style="zoom:50%;"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;文件，添加&lt;code&gt;registry-mirrors&lt;/code&gt;，具体如下（添加网易的镜像源）：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://chuanyichuan.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux服务器之间免密登录</title>
    <link href="http://chuanyichuan.github.io/2020/12/14/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <id>http://chuanyichuan.github.io/2020/12/14/Linux服务器之间免密登录/</id>
    <published>2020-12-13T16:27:40.355Z</published>
    <updated>2020-12-13T16:29:52.426Z</updated>
    
    <content type="html"><![CDATA[<p>Linux服务器之间在某些情况下可能需要互相之间免密登录，这就用到了ssh进行登录，主要步骤如下：</p><ol><li><p>生成ssh key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成ssh key</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><blockquote><p>如果生成失败，那么就安装一下ssh的生成命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yum  install -y openssh-server openssh-clients</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>创建<code>~/.ssh/authorized_keys</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>复制服务器的公钥<code>~/.ssh/id_rsa.pub</code>放到<code>~/.ssh/authorized_keys</code>中</p><p>此处复制其他服务器的公钥到文件<code>~/.ssh/authorized_keys</code>中，然后将该文件同步到所有的服务器中</p></li><li><p>欧了~</p><p>使用ssh进行登录吧<code>ssh 192.168.0.61</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux服务器之间在某些情况下可能需要互相之间免密登录，这就用到了ssh进行登录，主要步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成ssh key&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用HAProxy搭建MySQL集群</title>
    <link href="http://chuanyichuan.github.io/2020/12/10/%E6%90%AD%E5%BB%BAMySQL%E9%9B%86%E7%BE%A4-MGR/"/>
    <id>http://chuanyichuan.github.io/2020/12/10/搭建MySQL集群-MGR/</id>
    <published>2020-12-10T01:25:00.000Z</published>
    <updated>2021-01-22T03:54:18.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引言</p></blockquote><p>我们知道搭建MySQL集群有MHA、MGR、MMM，以及MySQL官方提供的MySQL-Cluster方式，以下主要以MGR方式为主做介绍，稍后再介绍这几种集群方式的差异。</p><p>我们先简单的介绍一下MGR架构，MGR的全称是MySQL Group Replication，是官方在5.7.17版本推出的基于paxos协议的集群方案。有人说MGR是基于状态机的集群设计，每一个节点都可以看做是一个状态机，任何一个节点出现</p><ol><li><p>服务器信息</p><p>我准备了四台机器，一台haproxy节点，三台MySQL节点，这三个MySQL节点均为Master，并且互为主备。</p><table><thead><tr><th>主机IP</th><th>OS</th><th>软件</th></tr></thead><tbody><tr><td>10.154.8.18</td><td>centos 7.0</td><td>haproxy</td></tr><tr><td>10.154.8.113</td><td>centos 7.0</td><td>master</td></tr><tr><td>10.154.8.130</td><td>centos 7.0</td><td>master</td></tr><tr><td>10.154.8.149</td><td>centos 7.0</td><td>master</td></tr></tbody></table></li><li><p>架构图</p><img src="/images/image-20201210093548972.png" alt="image-20201210093548972" style="zoom:50%;"></li></ol><h1 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装MySQL</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cd /data1/software/mysql/</span><br><span class="line">tar -zxvf mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">mkdir /usr/local/mysql</span><br><span class="line"></span><br><span class="line">cp -R /data1/software/mysql/mysql-5.7.31-linux-glibc2.12-x86_64/* /usr/local/mysql/</span><br><span class="line"></span><br><span class="line">mkdir /usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">cd /usr/local/mysql</span><br><span class="line"></span><br><span class="line">groupadd mysql</span><br><span class="line">useradd mysql -g mysql</span><br><span class="line">chown -R mysql .</span><br><span class="line">chgrp -R mysql .</span><br><span class="line"></span><br><span class="line">/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --explicit_defaults_for_timestamp</span><br><span class="line"></span><br><span class="line">rm -rf /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/mysql/mysql.sock /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机启动设置</span></span><br><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure><h1 id="配置mysql"><a class="markdownIt-Anchor" href="#配置mysql"></a> 配置MySQL</h1><p>vim /etc/my.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">port=3306</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line"></span><br><span class="line">wait_timeout=360000</span><br><span class="line"></span><br><span class="line">log-bin=/usr/local/mysql/data/binlog</span><br><span class="line">log-bin-index=/usr/local/mysql/data/binlog.index</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个节点必须不同</span></span><br><span class="line">server-id = 208</span><br><span class="line"></span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=on</span><br><span class="line">master-info-repository=TABLE</span><br><span class="line">relay-log-info-repository=TABLE</span><br><span class="line">binlog-checksum=none</span><br><span class="line">log-slave-updates=on</span><br><span class="line">binlog-format=ROW</span><br><span class="line"></span><br><span class="line">transaction-write-set-extraction=XXHASH64</span><br><span class="line">loose-group_replication_group_name='7e6fe64a-3bc0-4117-9cac-2439f9c3f19e'</span><br><span class="line">loose-group_replication_start_on_boot=off</span><br><span class="line">loose-group_replication_local_address='10.154.8.113:33061'</span><br><span class="line">loose-group_replication_group_seeds='10.154.8.113:33061,10.154.8.130:33062,10.154.8.149:33063'</span><br><span class="line">loose-group_replication_bootstrap_group=off</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.err</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><h1 id="配置无需密码登录"><a class="markdownIt-Anchor" href="#配置无需密码登录"></a> 配置无需密码登录</h1><p>略…</p><h1 id="启动mysql"><a class="markdownIt-Anchor" href="#启动mysql"></a> 启动MySQL</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br><span class="line"></span><br><span class="line">/usr/local/mysql/bin/mysql -uroot -p</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'ojbKwcrpqiOhsg8/i'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'ojbKwcrpqiOhsg8/i'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span>,<span class="keyword">replication</span> <span class="keyword">client</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'slave'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'k3G_w9Z&amp;eeip'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><hr><blockquote><p>haproxy</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'haproxy'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'haproxy'</span>@<span class="string">'10.154.8.18'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">PASSWORD</span>(<span class="string">''</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'haproxy'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h3 id="mgr说明"><a class="markdownIt-Anchor" href="#mgr说明"></a> MGR说明</h3><p>server-id=1　　// Mysql服务ID，集群内必须唯一<br>gtid-mode=on　　// 全局事务<br>enforce-gtid-consistency=on　　// 强制GTID的一致性<br>master-info-repository=TABLE　　// 将master.info元数据保存在系统表中<br>relay-log-info-repository=TABLE　　// 将relay.info元数据保存在系统表中<br>binlog-checksum=none　　// 禁用二进制日志事件校验<br>log-slave-updates=on　　// 级联复制<br>log-bin=binlog　　// 开启二进制日志记录<br>binlog-format=ROW　　// 以行的格式记录</p><p>transaction-write-set-extraction=XXHASH64　　// 使用哈希算法将其编码为散列<br>loose-group_replication_group_name=‘7e6fe64a-3bc0-4117-9cac-2439f9c3f19e’　　// 加入的组名，可以修改，只要格式对<br>loose-group_replication_start_on_boot=off　　// 不自动启用组复制集群<br>loose-group_replication_local_address=‘node1:33061’　　// 以本机端口33061接受来自组中成员的传入连接<br>loose-group_replication_group_seeds=‘node1:33061,node2:33062,node3:33063’　　// 组中成员访问表<br>loose-group_replication_bootstrap_group=off　　// 不启用引导组</p><h1 id="设置hostname映射"><a class="markdownIt-Anchor" href="#设置hostname映射"></a> 设置hostname映射</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用hostname指令查看主机名</span></span><br><span class="line">10.154.8.18 devtools1e.novalocal node1</span><br><span class="line">10.154.8.113 devtools1b.novalocal node2</span><br><span class="line">10.154.8.130 devtools1c.novalocal node3</span><br><span class="line">10.154.8.149 devtools1d.novalocal node4</span><br></pre></td></tr></table></figure><h1 id="开启组复制"><a class="markdownIt-Anchor" href="#开启组复制"></a> 开启组复制</h1><ol><li>主</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_user=<span class="string">'slave'</span>,master_password=<span class="string">'k3G_w9Z&amp;eeip'</span> <span class="keyword">for</span> channel <span class="string">'group_replication_recovery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span> <span class="keyword">PLUGIN</span> group_replication <span class="keyword">SONAME</span> <span class="string">'group_replication.so'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> group_replication_ip_whitelist=<span class="string">"10.154.8.113,10.154.8.130,10.154.8.149"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让该节点成为主节点</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> group_replication_bootstrap_group=<span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> group_replication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> group_replication_bootstrap_group=<span class="keyword">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> performance_schema.replication_group_members;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_user=<span class="string">'slave'</span>,master_password=<span class="string">'k3G_t9Z&amp;eeip'</span> <span class="keyword">for</span> channel <span class="string">'group_replication_recovery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span> <span class="keyword">PLUGIN</span> group_replication <span class="keyword">SONAME</span> <span class="string">'group_replication.so'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> group_replication_ip_whitelist=<span class="string">"10.154.8.113,10.154.8.130,10.154.8.149,10.154.8.208"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> group_replication_allow_local_disjoint_gtids_join=<span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> group_replication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> performance_schema.replication_group_members;</span><br></pre></td></tr></table></figure></li></ol><h1 id="搭建haproxy"><a class="markdownIt-Anchor" href="#搭建haproxy"></a> 搭建haproxy</h1><ol><li><p>下载haproxy-1.8.25.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -C https://www.haproxy.org/download/1.8/src/haproxy-1.8.25.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mkdir /usr/local/haproxy</span><br><span class="line"></span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line"></span><br><span class="line">touch /etc/haproxy/haproxy.conf</span><br><span class="line"></span><br><span class="line">yum install -y gcc</span><br><span class="line"></span><br><span class="line">tar -zxvf haproxy-1.8.25.tar.gz</span><br><span class="line"></span><br><span class="line">cd haproxy-1.8.25</span><br><span class="line"></span><br><span class="line">make TARGET=generic  prefix=/usr/local/haproxy</span><br><span class="line"></span><br><span class="line">make install PREFIX=/usr/local/haproxy</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/haproxy/sbin/haproxy /usr/local/bin/</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/haproxy/sbin/haproxy /usr/local/etc/haproxy</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/haproxy/haproxy.conf &lt;&lt; EOF</span><br><span class="line">global</span><br><span class="line">    # chroot /usr/local/etc/haproxy</span><br><span class="line">    log 127.0.0.1 local5 info</span><br><span class="line">    daemon</span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    mode http</span><br><span class="line">    option httplog</span><br><span class="line">    option dontlognull</span><br><span class="line">    timeout connect 5000</span><br><span class="line">    timeout client 50000</span><br><span class="line">    timeout server 50000</span><br><span class="line">listen admin_stats</span><br><span class="line">    bind 0.0.0.0:8888</span><br><span class="line">    mode http</span><br><span class="line">    stats uri /dbs_monitor</span><br><span class="line">    stats realm Global\ statistics</span><br><span class="line">    stats auth admin:admin</span><br><span class="line">    listen proxy-mysql</span><br><span class="line">    bind 0.0.0.0:3306</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option tcplog</span><br><span class="line">    option mysql-check user haproxy</span><br><span class="line">    server MySQL_1 10.154.8.113:3306 check weight 1 maxconn 2000</span><br><span class="line">    server MySQL_2 10.154.8.130:3306 check weight 1 maxconn 2000</span><br><span class="line">    server MySQL_3 10.154.8.149:3306 check weight 1 maxconn 2000</span><br><span class="line">    option tcpka</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haproxy -f /etc/haproxy/haproxy.conf</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;引言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们知道搭建MySQL集群有MHA、MGR、MMM，以及MySQL官方提供的MySQL-Cluster方式，以下主要以MGR方式为主做介绍，稍后再介绍这几种集群方式的差异。&lt;/p&gt;
&lt;p&gt;我们先简单的
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>使用HAProxy搭建MySQL集群</title>
    <link href="http://chuanyichuan.github.io/2020/12/10/%E4%BD%BF%E7%94%A8HAProxy%E6%90%AD%E5%BB%BAMySQL%E9%9B%86%E7%BE%A4/"/>
    <id>http://chuanyichuan.github.io/2020/12/10/使用HAProxy搭建MySQL集群/</id>
    <published>2020-12-10T01:25:00.000Z</published>
    <updated>2020-12-10T01:58:19.898Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引言</p></blockquote><p>我们知道搭建MySQL集群有MHA、MGR、MMM，以及MySQL官方提供的MySQL-Cluster方式，以下主要以MGR方式为主做介绍，稍后再介绍这几种集群方式的差异。</p><p>我们先简单的介绍一下MGR架构，MGR的全称是MySQL Group Replication，是官方在5.7.17版本推出的基于paxos协议的集群方案。有人说MGR是基于状态机的集群设计，每一个节点都可以看做是一个状态机，任何一个节点出现</p><ol><li><p>服务器信息</p><p>我准备了四台机器，一台haproxy节点，三台MySQL节点，这三个MySQL节点均为Master，并且互为主备。</p><table><thead><tr><th>主机IP</th><th>OS</th><th>软件</th></tr></thead><tbody><tr><td>10.160.22.164</td><td>centos 7.0</td><td>haproxy</td></tr><tr><td>10.160.22.165</td><td>centos 7.0</td><td>master(slave from 167)</td></tr><tr><td>10.160.22.166</td><td>centos 7.0</td><td>master(slave from 166)</td></tr><tr><td>10.160.22.167</td><td>centos 7.0</td><td>master(slave from 165)</td></tr></tbody></table></li><li><p>架构图</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20201210093548972.png" alt="image-20201210093548972" style="zoom:50%;"></li></ol><p>mkdir /usr/local/mysql</p><p>cp -R /data2/software/mysql/mysql-5.7.31-linux-glibc2.12-x86_64/* /usr/local/mysql/</p><p>mkdir /usr/local/mysql/data</p><p>/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --explicit_defaults_for_timestamp</p><p>ln -s /usr/local/mysql/mysql.sock /tmp/mysql.sock</p><p>service mysql start</p><p>/usr/local/mysql/bin/mysql -uroot -p</p><p>alter user ‘root’@‘localhost’ identified by ‘ojbKpqiOhsg8/i’;</p><p>grant replication slave,replication client on <em>.</em> to ‘slave’@‘10.160.22.%’ identified by ‘k3G_t9Z&amp;eeip’;</p><p>grant ALL on <em>.</em> to ‘mhadmin’@‘10.160.22.%’ identified by ‘k3G8_t9Z&amp;eeip’;</p><p>flush privileges;</p><p>change master to master_host=‘10.160.22.165’,master_user=‘slave’,master_password=‘k3G_t9Z&amp;eeip’,master_port=3306,master_log_file=‘binlog.000004’,master_log_pos=1653;</p><p>change master to master_host=‘10.160.22.166’,master_user=‘slave’,master_password=‘k3G_t9Z&amp;eeip’,master_port=3306,master_log_file=‘binlog.000004’,master_log_pos=573;</p><p>change master to master_host=‘10.160.22.167’,master_user=‘slave’,master_password=‘k3G_t9Z&amp;eeip’,master_port=3306,master_log_file=‘binlog.000004’,master_log_pos=573;</p><p>ln -s /usr/local/mysql/bin/mysqlbinlog /usr/bin/mysqlbinlog</p><p>ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql</p><p>start slave;</p><p>show slave status\G</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘ojbKpqiOhsg8/i’ WITH GRANT OPTION;</p><p>flush privileges;</p><hr><blockquote><p>haproxy</p></blockquote><p>GRANT ALL ON <em>.</em> TO ‘haproxy’@’%’ IDENTIFIED BY ‘123’;</p><p>GRANT ALL ON <em>.</em> TO ‘haproxy’@‘10.160.22.164’ IDENTIFIED BY ‘123’;</p><p>update mysql.user set authentication_string=PASSWORD(’’) where user=‘haproxy’;</p><p>flush privileges;</p><h3 id="bug"><a class="markdownIt-Anchor" href="#bug"></a> bug</h3><ol><li>Can’t open and lock privilege tables: Table ‘mysql.user’ doesn’t exist<br>新数据库，未初始化表空间，执行以下语句进行初始化：</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqld --initialize <span class="attribute">--user</span>=mysql <span class="attribute">--basedir</span>=/usr/local/mysql/ <span class="attribute">--datadir</span>=/usr/local/mysql/data/ --explicit_defaults_for_timestamp</span><br><span class="line">​```shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[server default]</span><br><span class="line"><span class="attribute">user</span>=mhadmin</span><br><span class="line"><span class="attribute">password</span>=k3G8_t9Z&amp;eeip</span><br><span class="line"><span class="attribute">manager_workdir</span>=/etc/mha_master/app1</span><br><span class="line"><span class="attribute">manager_log</span>=/etc/mha_master/manager.log</span><br><span class="line"><span class="attribute">remote_workdir</span>=/data/mha_master/app1</span><br><span class="line"><span class="attribute">ssh_user</span>=root</span><br><span class="line"><span class="attribute">repl_user</span>=slave</span><br><span class="line"><span class="attribute">repl_password</span>=k3G_t9Z&amp;eeip</span><br><span class="line"><span class="attribute">ping_interval</span>=1</span><br><span class="line">[server1]</span><br><span class="line"><span class="attribute">hostname</span>=10.160.22.165</span><br><span class="line"><span class="attribute">ssh_port</span>=22</span><br><span class="line"><span class="attribute">candidate_master</span>=1</span><br><span class="line">[server2]</span><br><span class="line"><span class="attribute">hostname</span>=10.160.22.166</span><br><span class="line"><span class="attribute">ssh_port</span>=22</span><br><span class="line"><span class="attribute">candidate_master</span>=0</span><br><span class="line">[server3]</span><br><span class="line"><span class="attribute">hostname</span>=10.160.22.167</span><br><span class="line"><span class="attribute">ssh_port</span>=22</span><br><span class="line"><span class="attribute">candidate_master</span>=0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;引言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们知道搭建MySQL集群有MHA、MGR、MMM，以及MySQL官方提供的MySQL-Cluster方式，以下主要以MGR方式为主做介绍，稍后再介绍这几种集群方式的差异。&lt;/p&gt;
&lt;p&gt;我们先简单的
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis集群搭建</title>
    <link href="http://chuanyichuan.github.io/2020/12/06/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://chuanyichuan.github.io/2020/12/06/Redis集群搭建/</id>
    <published>2020-12-06T15:56:00.000Z</published>
    <updated>2020-12-06T16:00:05.518Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载redis包<br><a href="http://download.redis.io/releases/redis-5.0.5.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-5.0.5.tar.gz</a></p></li><li><p>安装gcc包</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc-c++</span><br></pre></td></tr></table></figure><ol start="3"><li>各自安装redis</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-5.0.5.tar.gz &amp;&amp; cd redis-5.0.5 &amp;&amp; make &amp;&amp; make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure><ol start="4"><li>配置redis</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .. &amp;&amp; mkdir /usr/local/redis/etc &amp;&amp; cp redis.conf /usr/local/redis/etc &amp;&amp; mkdir -p /data/db/redis/ &amp;&amp; cd /usr/local/redis/etc &amp;&amp; vim redis.conf</span><br></pre></td></tr></table></figure>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">port  6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode  no</span><br><span class="line">daemonize    yes</span><br><span class="line">pidfile  /var/run/redis_7000.pid</span><br><span class="line">cluster-enabled  yes</span><br><span class="line">cluster-config-file  nodes_7000.conf</span><br><span class="line">cluster-node-timeout  15000</span><br><span class="line">appendonly  yes</span><br><span class="line">logfile /data/logs/redis.log</span><br><span class="line">dir /data/db/redis/</span><br></pre></td></tr></table></figure><ol start="5"><li>复制redis-trib.rb文件</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /data/software/redis/redis-5.0.5/src/redis-trib.rb /usr/local/redis/bin/</span><br></pre></td></tr></table></figure><ol start="6"><li>启动各个Redis节点</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure><ol start="7"><li>查看启动日志</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /data/logs/redis.log</span><br></pre></td></tr></table></figure><ol start="8"><li>创建集群</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster create 10.154.8.208:6379 10.154.8.149:6379 10.154.8.18:6379 10.154.8.130:6379 10.154.8.112:6379 10.154.8.113:6379 --cluster-replicas 1</span><br></pre></td></tr></table></figure><hr><blockquote><p>其他命令</p></blockquote><ol><li>添加新主节点</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node new_host:new_port existing_host:existing_port --cluster-master-id node_id</span><br></pre></td></tr></table></figure><ol start="2"><li>hash槽重新分配<br>添加完新节点后，需要对新添加的主节点进行hash槽重新分配，这样该主节点才能存储数据，redis共有16384个槽。</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard host:port --cluster-from node_id --cluster-to node_id --cluster-slots &lt;args&gt; --cluster-yes</span><br></pre></td></tr></table></figure><ol start="3"><li>添加新从节点</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node new_host:new_port existing_host:existing_port --cluster-slave --cluster-master-id node_id</span><br></pre></td></tr></table></figure><ol start="4"><li>删除节点</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster  del-node host:port node_id</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载redis包&lt;br&gt;
&lt;a href=&quot;http://download.redis.io/releases/redis-5.0.5.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://download.redi
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://chuanyichuan.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL Cluster安装</title>
    <link href="http://chuanyichuan.github.io/2020/12/04/MySQL%20Cluster%E5%AE%89%E8%A3%85/"/>
    <id>http://chuanyichuan.github.io/2020/12/04/MySQL Cluster安装/</id>
    <published>2020-12-03T16:00:00.000Z</published>
    <updated>2020-12-03T16:12:13.008Z</updated>
    
    <content type="html"><![CDATA[<p>目前有3台机器，我们设置一台ndb_mgm，两台ndbd，两台mysqld</p><table><thead><tr><th>角色</th><th>机器</th></tr></thead><tbody><tr><td>ndb_mgm</td><td>10.160.22.157</td></tr><tr><td>ndbd</td><td>10.160.22.158</td></tr><tr><td></td><td>10.160.22.159</td></tr><tr><td>mysqld</td><td>10.160.22.157</td></tr><tr><td></td><td>10.160.22.158</td></tr></tbody></table><hr><ol><li><p>下载MySQL cluster安装包<br><a href="https://downloads.mysql.com/archives/cluster/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/cluster/</a></p></li><li><p>解压安装包<br>tar -zxvf mysql-cluster-8.0.21-el7-x86_64.tar.gz</p></li><li><p>复制文件<br>mkdir /usr/local/mysql<br>cp -R mysql-cluster-8.0.21-el7-x86_64/* /usr/local/mysql/</p></li><li><p>创建配置管理节点<br>4.1 将bin目录中的ndb_mgm<em>文件全部复制到/usr/local/bin/目录中<br>cp /usr/local/mysql/bin/ndb_mgm</em> /usr/local/bin/</p></li></ol><blockquote><p>ndb_mgm，ndb客户端命令</p><p>ndb_mgmd，ndb管理节点启动命令</p><p>ndb_mgm是ndb_mgmd（MySQL Cluster Server）的客户端管理工具，通过它可以方便的检查Cluster的状态、启动备份、关闭Cluster等功能。</p></blockquote><p>​4.2 修改管理节点配置文件<br>​4.2.1 创建数据库集群配置文件的目录<br>​mkdir /var/lib/mysql-cluster<br>​4.2.2 编辑配置文件<br>​vim /var/lib/mysql-cluster/config.ini<br>​文件内如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[ndbd default]</span><br><span class="line">NoOfReplicas=2</span><br><span class="line">DataMemory=1024M</span><br><span class="line">IndexMemory=512M</span><br><span class="line"></span><br><span class="line">[ndb_mgmd]</span><br><span class="line">HostName=10.160.22.157</span><br><span class="line">DataDir=/var/lib/mysql-cluster/</span><br><span class="line"></span><br><span class="line">[ndbd]</span><br><span class="line">HostName=10.160.22.158</span><br><span class="line">DataDir=/usr/local/mysql/data/</span><br><span class="line"></span><br><span class="line">[ndbd]</span><br><span class="line">HostName=10.160.22.159</span><br><span class="line">DataDir=/usr/local/mysql/data/</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">HostName=10.160.22.157</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">HostName=10.160.22.158</span><br></pre></td></tr></table></figure><p>[NDBD DEFAULT]：表示每个数据节点的默认配置，在每个节点的[NDBD]中不用再写这些选项，只能有一个。<br>NoOfReplicas：副本数量，数据节点数必须是副本数的整数倍。<br>[NDB_MGMD]：表示管理节点的配置，只有一个，默认的对其他节点的端口是1186，故服务器需要开放1186端口。<br>[NDBD]：表示每个数据节点的配置，可以有多个，分别写上不同数据节点的IP地址。<br>[MYSQLD]：表示SQL节点的配置，可以有多个，分别写上不同SQL节点的IP地址</p><p>4.3 启动管理节点</p><ul><li><p>有新增节点或首次启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgmd -f /var/lib/mysql-cluster/config.ini --initial</span><br></pre></td></tr></table></figure></li><li><p>无新增节点启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgmd -f /var/lib/mysql-cluster/config.ini</span><br></pre></td></tr></table></figure></li></ul><p>4.4 查看管理节点运行状态</p><ul><li><p>进入控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgm</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* ndb_mgm&gt; show</span><br><span class="line">  Connected to Management Server at: localhost:1186</span><br><span class="line">  Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2 (not connected, accepting connect from 10.160.22.158)</span><br><span class="line">id=3 (not connected, accepting connect from 10.160.22.159)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5 (not connected, accepting connect from 10.160.22.158)</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>创建数据节点<br>5.1 配置10.160.22.159<br><em>因为该节点为单纯的data节点，所以先配置该节点</em><br>5.1.1 配置/etc/my.cnf</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.160.22.157:1186</span><br></pre></td></tr></table></figure><p>5.1.2 新增用户并修改权限<br>groupadd mysql<br>useradd mysql -g mysql</p><h1 id="修改目录"><a class="markdownIt-Anchor" href="#修改目录"></a> 修改目录</h1><p>cd /usr/local/mysql<br>mkdir data<br>chown -R root .<br>chown -R mysql data<br>chgrp -R mysql .</p><p>5.1.3 安装数据库<br>/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/</p><blockquote><p>用户为mysql的名称需要跟配置文件my.cnf中的user=mysql相同</p><p>–basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ 需要加上</p><p>启动成功后最后一行会输出数据库密码：root@localhost: &gt;Ba4&lt;oa!u7fD*</p></blockquote><p>5.1.2 设置开启自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure><p>5.1.3 启动data节点<br>service mysqld start</p><blockquote><p>启动的过程中可能会遇到一些错误，比如找不到/tmp/mysql.sock<br>这里建立一个软连接即可： ln -s /usr/local/mysql/data/mysql.sock /tmp/mysql.sock<br>建立好之后再启动</p></blockquote><p>5.1.4 修改数据库密码</p><ul><li><p>启动之后需要修改数据库密码，否则会无法使用，初始密码就是5.1.3步骤中的密码<br>/usr/local/mysql/bin/mysql -uroot -p</p></li><li><p>修改密码：<br>alter user ‘root’@‘localhost’ identified by ‘ojbKpqiOhsg8/i’;</p></li><li><p>退出重新用新密码登录<br>/usr/local/mysql/bin/mysql -uroot -p</p></li></ul><p>5.1.5 启动data节点<br>/usr/local/mysql/bin/ndbd --initial</p><p><em>首次启动加上<code>--initial</code>，非首次启动不需要加，不然会丢失之前的数据</em></p><p>5.1.6 启动之后到管理节点查看cluster状态<br>ndb_mgm&gt; show</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2 (not connected, accepting connect from 10.160.22.158)</span><br><span class="line">id=3@10.160.22.159  (mysql-8.0.21 ndb-8.0.21, starting, Nodegroup: 0)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5 (not connected, accepting connect from 10.160.22.158)</span><br></pre></td></tr></table></figure><p><em>10.160.22.159状态已经连接上了</em></p><p>5.2 配置10.160.22.158<br><em>因为该节点为data和sql节点，所以该节点的配置需要在158的基础上增加sql的配置，主要修改/etc/my.cnf</em></p><p>5.2.1 修改/etc/my.cnf文件</p><p>[mysqld]</p><h1 id="设置ndbcluster"><a class="markdownIt-Anchor" href="#设置ndbcluster"></a> 设置ndbcluster</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ndbcluster</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置默认的存储引擎</span></span><br><span class="line"></span><br><span class="line">default-storage-engine=ndbcluster</span><br><span class="line">port=3306</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.160.22.157:1186</span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><blockquote><p>其他方式与10.160.22.159的配置相同<br><em><font color="red">最终需要将root密码修改为与159相同，所有节点的密码都应相同</font></em></p></blockquote><p>5.2.3 启动之后到管理节点查看cluster状态<br>ndb_mgm&gt; show</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2@10.160.22.158  (mysql-8.0.21 ndb-8.0.21, Nodegroup: 0, *)</span><br><span class="line">id=3@10.160.22.159  (mysql-8.0.21 ndb-8.0.21, Nodegroup: 0)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5@10.160.22.158  (mysql-8.0.21 ndb-8.0.21)</span><br></pre></td></tr></table></figure><blockquote><p>可以看到data和sql节点都已经连接OK了</p></blockquote><ol start="6"><li>创建sql节点<br>6.1 10.160.22.159在上面已经完成了，不在配置</li></ol><p>6.2 配置10.160.22.157<br>6.2.1 修改/etc/my.cnf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">ndbcluster</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">default-storage-engine=ndbcluster</span><br><span class="line">port=3306</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><p>6.2.2 启动sql节点<br>service mysqld start</p><hr><p>安装过程中出现的问题：</p><ol><li>报错找不到libcrypto.so.1.1<br>ln -s /usr/local/mysql/lib/private/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1<br>ln -s /usr/local/mysql/lib/private/libssl.so.1.1 /usr/lib64/libssl.so.1.1</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前有3台机器，我们设置一台ndb_mgm，两台ndbd，两台mysqld&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;th&gt;机器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ndb_mgm&lt;/td&gt;
&lt;td&gt;1
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Java接收Python发送的RabbitMQ消息全是byte数组</title>
    <link href="http://chuanyichuan.github.io/2020/12/02/Java%E6%8E%A5%E6%94%B6Python%E5%8F%91%E9%80%81%E7%9A%84RabbitMQ%E6%B6%88%E6%81%AF%E5%85%A8%E6%98%AFbyte%E6%95%B0%E7%BB%84/"/>
    <id>http://chuanyichuan.github.io/2020/12/02/Java接收Python发送的RabbitMQ消息全是byte数组/</id>
    <published>2020-12-02T14:45:00.000Z</published>
    <updated>2020-12-02T15:01:40.325Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个好玩的bug，主要源自于对pika的不了解，业务场景是这样的：在构建应用时，需要使用sonarqube进行静态扫描，并且需要将扫描结果反馈到构建服务中，因为SonarQube扫描任务使用的Sonar-Scanner脚本进行操作的，CI服务分散在二十多台机器上，主要的架构图是这样的：</p><blockquote><p>pika代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身份验证</span></span><br><span class="line">auth = pika.PlainCredentials(mq_username, mq_password)</span><br><span class="line"><span class="comment"># 身份验证之后连接mq</span></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(mq_host, mq_port, mq_virtual_host, auth, heartbeat=<span class="number">9999</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.basic_publish(</span><br><span class="line">        exchange=mq_ack_exchange,</span><br><span class="line">        routing_key=mq_ack_routing_key,</span><br><span class="line">        body=json.dumps(json_body),</span><br><span class="line">        properties=pika.BasicProperties(</span><br><span class="line">            <span class="comment"># make message persistent</span></span><br><span class="line">            delivery_mode=<span class="number">2</span>,</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><blockquote><p>java代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"#&#123;'$&#123;external.mq.queue.deploy&#125;'&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@Payload String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里输出的内容变成了ASCII码<code>12 34 56 87</code>，然后报错了，思前想后，也到mq控制台检查了，消息报文正常，然后心想用new String()转一下呢？辗转反侧，最后的解决方案是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"#&#123;'$&#123;external.mq.queue.deploy&#125;'&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@Payload Message message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意Message类不要import错了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到一个好玩的bug，主要源自于对pika的不了解，业务场景是这样的：在构建应用时，需要使用sonarqube进行静态扫描，并且需要将扫描结果反馈到构建服务中，因为SonarQube扫描任务使用的Sonar-Scanner脚本进行操作的，CI服务分散在二十多台机器上，主
      
    
    </summary>
    
    
      <category term="Java" scheme="http://chuanyichuan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>解决IntelliJ IDEA创建SpringBoot项目失败</title>
    <link href="http://chuanyichuan.github.io/2020/11/25/%E8%A7%A3%E5%86%B3IntelliJ-IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE%E5%A4%B1%E8%B4%A5/"/>
    <id>http://chuanyichuan.github.io/2020/11/25/解决IntelliJ-IDEA创建SpringBoot项目失败/</id>
    <published>2020-11-25T12:25:00.000Z</published>
    <updated>2020-11-26T01:35:06.668Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用idea在创建SpringBoot工程的时候，默认需要连接<code>https://start.spring.io</code>来获取相关的配置和组件，但是因为网络问题，我们经常性的会出现连接不上的情况，如下图：</p><img src="/images/image-20201125205941367.png" alt="image-20201125205941367" style="zoom: 30%; "><p>一直在这个页面转啊转的，然后果断时间就弹出连接失败的提示框：</p><img src="/images/image-20201125210205586.png" alt="image-20201125210205586" style="zoom:50%;"><p>遇到这种情况呢，大家也不想的，要不歇一歇，下碗面给你吃啊？</p><img src="/images/xiamianchigeini.png" alt="xiamianchigeini" style="zoom:50%;"><p>这不胡扯呢么，抓紧想办法解决啊。此处提供几种解决办法：</p><blockquote><p>第一种</p></blockquote><p>使用阿里云的工具地址来代替spring的地址，速度相当之快，阿里云的地址为：<code>https://start.aliyun.com</code>，设置方式如下：<br><img src="/images/image-20201125212323488.png" alt="image-20201125212323488" style="zoom: 33%;"></p><blockquote><p>第二种</p></blockquote><p>使用<code>https://start.springboot.io</code>地址来代替原地址，设置方式与上面一样，速度一般</p><blockquote><p>第三种</p></blockquote><p>搭建自己的服务器，搭建方式如下：</p><ol><li>下载代码：<code>git clone https://github.com/spring-io/start.spring.io</code></li><li>打包编译：进入到工程下，执行maven命令<code>mvn clean package -Dmaven.test.skip=true</code></li><li>打包完成之后，进入到<code>start-site</code>目录中执行命令<code>../mvnw spring-boot:run</code></li><li>运行成功后，访问<code>http://localhost:8080</code></li></ol><hr><p>从上述三种方法来看，使用阿里云的地址是最简单靠谱的，不需要自己进行维护，springboot的地址也可能会偶尔连不上，结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们使用idea在创建SpringBoot工程的时候，默认需要连接&lt;code&gt;https://start.spring.io&lt;/code&gt;来获取相关的配置和组件，但是因为网络问题，我们经常性的会出现连接不上的情况，如下图：&lt;/p&gt;
&lt;img src=&quot;/images/ima
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot Admin使用Nacos作为服务注册中心</title>
    <link href="http://chuanyichuan.github.io/2020/11/23/SpringBoot%20Admin%E4%BD%BF%E7%94%A8Nacos%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://chuanyichuan.github.io/2020/11/23/SpringBoot Admin使用Nacos作为服务注册中心/</id>
    <published>2020-11-23T01:05:00.000Z</published>
    <updated>2020-11-30T02:55:42.273Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们都讲了普通的服务使用SBD，如果我们使用的是类似Nacos、Eureka、Consul等注册中心实现服务注册的，那我们应该怎么配置相应的安全策略？</p><p>在Client端，我们依然需要引入sbd-client相关依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>即使是使用注册中心，该依赖的包也不能少，不然client就走丢了</p></blockquote><p>包引入之后，同样的是在项目配置文件中将actuator的相关端口暴露出来，这个之前讲过，包括Spring Security的配置，就不在赘述了，贴一下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">ALWAYS</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">boot:</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">client:</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">&lt;sbd</span> <span class="string">server</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">instance:</span></span><br><span class="line">  <span class="comment"># 如果应用容器化了，那么最好设置一下service-base-url参数，否则被映射出去的是容器的ip和端口</span></span><br><span class="line">  <span class="attr">service-base-url:</span> <span class="attr">http://host_ip:host_port</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="string">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line"><span class="string">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br><span class="line"><span class="comment"># Spring Security配置</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&lt;actuator</span> <span class="string">user&gt;</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">&lt;password</span> <span class="string">for</span> <span class="string">actuator</span> <span class="string">user&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Security配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http.httpBasic().and().authorizeRequests().antMatchers(<span class="string">"/actuator/**"</span>).authenticated().anyRequest().permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>client端已经配置完了，接下来就是SBD server端的配置了，和我们之前的配置也没差太多，主要是将SBD的用户名密码告知注册中心，我们这里使用的是Nacos，所以我们要将账号信息告诉Nacos，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">jsb_micro_admin_server</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">&lt;sbd</span> <span class="string">user&gt;</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">&lt;password</span> <span class="string">for</span> <span class="string">sbd</span> <span class="string">user&gt;</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="string">&lt;nacos_server_ip&gt;:&lt;nacos_server_port&gt;</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">prd</span></span><br><span class="line"><span class="attr">        ip:</span> <span class="string">&lt;sbd_ip&gt;</span></span><br><span class="line"><span class="attr">        metadata:</span></span><br><span class="line">          <span class="string">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line">          <span class="string">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure><p>双方服务启动即可，注意这里的namespace需要与服务的namespace一致，也就是它只能发现同一个namespace下的服务。</p><p>至此所有的配置就都搞定了，启动即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前我们都讲了普通的服务使用SBD，如果我们使用的是类似Nacos、Eureka、Consul等注册中心实现服务注册的，那我们应该怎么配置相应的安全策略？&lt;/p&gt;
&lt;p&gt;在Client端，我们依然需要引入sbd-client相关依赖包：&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot Admin" scheme="http://chuanyichuan.github.io/tags/SpringBoot-Admin/"/>
    
  </entry>
  
</feed>
