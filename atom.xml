<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>串一串</title>
  
  <subtitle>断舍离</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luxiaowan.github.io/"/>
  <updated>2020-04-09T17:22:58.427Z</updated>
  <id>http://luxiaowan.github.io/</id>
  
  <author>
    <name>cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL执行计划explain解析</title>
    <link href="http://luxiaowan.github.io/2020/04/10/MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92explain%E8%A7%A3%E6%9E%90/"/>
    <id>http://luxiaowan.github.io/2020/04/10/MySQL执行计划explain解析/</id>
    <published>2020-04-09T17:03:00.000Z</published>
    <updated>2020-04-09T17:22:58.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用法"><a class="markdownIt-Anchor" href="#用法"></a> 用法</h3><p><code>explain table</code>或<code>explain EXTENDED table</code></p><h3 id="参数解释"><a class="markdownIt-Anchor" href="#参数解释"></a> 参数解释</h3><p><img src="/images/image-20200410010618626.png" alt="image-20200410010618626"></p><ul><li><p>id：select查询的序列号，可以当做是执行顺序</p><ul><li>id相同时，执行顺序由上至下</li><li>如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li><li>id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</li></ul></li><li><p>select_type：查询中每个select子句的类型</p><ul><li><p>SIMPLE(简单SELECT,不使用UNION或子查询等)</p></li><li><p>PRIMARY(查询中若包含任何复杂的子部分,最外层的select被标记为PRIMARY)</p></li><li><p>UNION(UNION中的第二个或后面的SELECT语句)</p></li><li><p>DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p></li><li><p>UNION RESULT(UNION的结果)</p></li><li><p>SUBQUERY(子查询中的第一个SELECT)</p></li><li><p>DEPENDENT SUBQUERY(子查询中的第一个SELECT，取决于外面的查询)</p></li><li><p>DERIVED(派生表的SELECT, FROM子句的子查询)</p></li><li><p>UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p></li></ul></li><li><p>table：显示这一行的数据是关于哪张表的，有时不是真实的表名字,看到的是derivedx(x是个数字,我的理解是第几步执行的结果)</p></li><li><p>partitions：分区号</p></li><li><p>type：表示MySQL在表中找到所需行的方式，又称“访问类型”，常用的类型有： ALL, index,  range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）</p><ul><li>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</li><li>index：Full Index Scan，index与ALL区别为index类型只遍历索引树</li><li>range：只检索给定范围的行，使用一个索引来选择行</li><li>ref：表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li><li>eq_ref：类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</li><li>const、system：当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量,system是const类型的特例，当查询的表只有一行的情况下，使用system</li><li>NULL：MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</li></ul></li><li><p>possible_keys：指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用</p><p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p></li><li><p>Key：显示MySQL实际决定使用的键（索引）</p><p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p></li><li><p>key_len：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</p><p><code>不损失精确性的情况下，长度越短越好</code></p></li><li><p>ref：表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p></li><li><p>rows：表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p></li><li><p>Extra：该列包含MySQL解决查询的详细信息,有以下几种情况：</p><ul><li><p>Using filesort</p><p>MySQL有两种方式可以生成有序的结果，通过排序操作或者使用索引，当Extra中出现了Using filesort 说明MySQL使用了后者，但注意虽然叫filesort但并不是说明就是用了文件来进行排序，只要可能排序都是在内存里完成的。大部分情况下利用索引排序更快，所以一般这时也要考虑优化查询了。使用文件完成排序操作，这是可能是ordery by，group by语句的结果，这可能是一个CPU密集型的过程，可以通过选择合适的索引来改进性能，用索引来为查询结果排序。</p></li><li><p>Using temporary</p><p>用临时表保存中间结果，常用于GROUP BY 和 ORDER BY操作中，一般看到它说明查询需要优化了，就算避免不了临时表的使用也要尽量避免硬盘临时表的使用。</p></li><li><p>Not exists</p><p>MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行， 就不再搜索了</p></li><li><p>Using index</p><p>说明查询是覆盖了索引的，不需要读取数据文件，从索引树（索引文件）中即可获得信息。如果同时出现using where，表明索引被用来执行索引键值的查找，没有using where，表明索引用来读取数据而非执行查找动作。这是MySQL服务层完成的，但无需再回表查询记录。</p></li><li><p>Using index condition</p><p>这是MySQL 5.6出来的新特性，叫做“索引条件推送”。简单说一点就是MySQL原来在索引上是不能执行如like这样的操作的，但是现在可以了，这样减少了不必要的IO操作，但是只能用在二级索引上。</p></li><li><p>Using where</p><p>使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。<strong>注意</strong>：Extra列出现Using where表示MySQL服务器将存储引擎返回服务层以后再应用WHERE条件过滤</p></li><li><p>Using join buffer</p><p>使用了连接缓存：Block Nested Loop，连接算法是块嵌套循环连接;Batched Key Access，连接算法是批量索引连接</p></li><li><p>impossible where</p><p>where子句的值总是false，不能用来获取任何元组</p></li><li><p>select tables optimized away</p><p>在没有GROUP BY子句的情况下，基于索引优化MIN/MAX操作，或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</p></li><li><p>distinct</p><p>优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#用法&quot;&gt;&lt;/a&gt; 用法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;explain table&lt;/code&gt;或&lt;code&gt;explain EXTENDED table&lt;/code&gt;&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL索引建立原则</title>
    <link href="http://luxiaowan.github.io/2020/04/10/MySQL%E7%B4%A2%E5%BC%95%E5%BB%BA%E7%AB%8B%E5%8E%9F%E5%88%99/"/>
    <id>http://luxiaowan.github.io/2020/04/10/MySQL索引建立原则/</id>
    <published>2020-04-09T16:50:00.000Z</published>
    <updated>2020-04-09T17:02:53.639Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>索引的目的是提升查询数据的效率，所以我们建索引的标准应该一切从提升查询效率为基准。</p><h3 id="小技巧"><a class="markdownIt-Anchor" href="#小技巧"></a> 小技巧</h3><ol><li><p>对于有唯一值的列尽量使用唯一索引</p></li><li><p>索引长度尽量小一点，长度小的索引可以节省索引空间，也会使查找的速度得到提升，因为索引页只有16k，索引列长度小的话，一页可以容纳更多的数据</p></li><li><p>太长的列可以选择部分内容做索引，遵循最左前缀原则</p></li><li><p>更新频繁的列不适合建索引</p></li><li><p>利用断桥原则（最左前缀原则），比如建立了一个联合索引(a,b,c)，那么其实我们可利用的索引就有(a), (a,b), (a,b,c)</p></li><li><p>不要过多创建索引，索引越多占用的空间越多，而且每次增、删、改操作都会重建索引，并且索引太多的话也会增加之后的优化复杂度</p></li><li><p>尽量扩展索引，比如现有索引(a)，现在我又要对(a,b)进行索引，不需要再建一个索引(a,b)，只需要在原索引(a)的基础上新增b列即可</p></li><li><p>一次查询是不能应用多个索引，即使你查询条件中有多个索引，最终也只会选择最优的一个</p><img src="/images/image-20200410005949806.png" alt="image-20200410005949806" style="zoom:67%;"></li><li><p>&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN 可用到索引，&lt;&gt;，not in ，!= 则不行</p></li><li><p>like “xxxx%” 是可以用到索引的，like “%xxxx” 和 like “%xxx%” 则不行（但会用到索引下推）</p></li><li><p>NULL会使索引的效果大打折扣</p></li><li><p>索引列若出现函数或计算，则索引不会生效</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;索引的目的是提升查询数据的效率，所以我们建索引的标准应该一切从提升查询效率为基准。&lt;/p&gt;
&lt;h3 id=&quot;小技巧&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
      <category term="索引" scheme="http://luxiaowan.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL回表、索引覆盖、索引下推</title>
    <link href="http://luxiaowan.github.io/2020/04/09/MySQL%E5%9B%9E%E8%A1%A8%E3%80%81%E7%B4%A2%E5%BC%95%E8%A6%86%E7%9B%96%E3%80%81%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8/"/>
    <id>http://luxiaowan.github.io/2020/04/09/MySQL回表、索引覆盖、索引下推/</id>
    <published>2020-04-09T13:01:00.000Z</published>
    <updated>2020-04-09T16:37:44.165Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h3><p>创建一张表，并创建一个自增主键索引和一个组合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE index_opt_test (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  name varchar(11) DEFAULT NULL,</span><br><span class="line">  title varchar(11) DEFAULT NULL,</span><br><span class="line">  age int(11) DEFAULT NULL,</span><br><span class="line">  sex varchar(11) DEFAULT NULL,</span><br><span class="line">  content varchar(500) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  KEY idx_cb (name,title,age)</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure><h3 id="回表"><a class="markdownIt-Anchor" href="#回表"></a> 回表</h3><ol><li><p>什么是回表</p><p>回表是发生在二级索引上的一种数据查询操作，简单点讲就是我们要查询的列不在二级索引的列中，那么就必须根据二级索引查到主键ID，然后再根据主键ID到聚簇索引树上去查询整行的数据，这一过程就叫作回表。</p></li><li><p>为什么会回表</p><p>写一个会回表查询的SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name, age, sex from index_opt_test where name=&apos;cc&apos; and title=&apos;T7&apos; and age=35;</span><br></pre></td></tr></table></figure><p>解析：</p><p>​SQL需要查询的列包括<code>id、name、age、sex</code>，查询条件命中索引<code>idx_cb</code>，其中列<code>id、name、age</code>都在索引<code>idx_cb</code>中可以获取到，但是<code>sex</code>不能通过索引获取到，必须要获取到整行数据之后再从结果中捞出来<code>sex</code>列的数据，这种情况就必须要回表。</p></li><li><p>什么情况下不需要回表</p><p>当所有的列都能在二级索引树中查询到，就不需要再回表了，这种情况就是索引覆盖。</p></li></ol><h3 id="索引覆盖"><a class="markdownIt-Anchor" href="#索引覆盖"></a> 索引覆盖</h3><ol><li><p>什么是索引覆盖</p><p>当SQL语句中查询的列都在索引中时，我们就不需要回表去把整行数据都捞出来了，可以从非聚簇索引树中直接获取到我们需要的列的数据，这就叫索引覆盖。简单点来讲就是：所有不需要回表的查询操作都叫索引覆盖。</p></li><li><p>为什么会发生索引覆盖</p><p>关于为什么会发生索引覆盖这个问题，通过一条SQL来理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name, age from index_opt_test where name=&apos;cc&apos; and title=&apos;T7&apos;;</span><br></pre></td></tr></table></figure><p>这条SQL要查询的列<code>id、name、age</code>全部都能从非聚簇索引<code>idx_cb</code>中直接查询出来，可能会有个疑问：我们的索引列是name、title和age，为什么id明明不在组合索引中却还能发生索引覆盖？提出这个问题的同学真的是欠我一顿小烧烤，非聚簇索引的叶子节点里存的是什么东西：主键的关键字啊，我们这里主键是id，他的关键字就是id的值啊，那我们通过非聚簇索引是不是可以直接将主键id查出来，是不是就不用再回表了，不用回表是不是就发生了索引覆盖啊，就是那么简单。</p></li></ol><h3 id="索引下推"><a class="markdownIt-Anchor" href="#索引下推"></a> 索引下推</h3><ol><li><p>什么是索引下推</p><p>索引下推又叫索引条件下推(Index Condition Pushdown，简称ICP)，ICP默认是开启的，使用ICP可以减少存储引擎访问基础表的次数和Server访问存储引擎的次数。</p><ul><li><p>ICP没有启用：Server层会根据索引的断桥原则将命中的索引字段推送到引擎层获取数据，并把匹配到的数据全部返回到Server层，由Server层再根据剩余的where条件进行过滤，即使where条件中有组合索引的其他未命中的字段，也会保留在Server层做筛选，然后返回给Client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name, sex from index_opt_test where name=&apos;cc&apos; and title like &apos;%7&apos; and sex=&apos;male&apos;;</span><br></pre></td></tr></table></figure><p>执行过程：</p><ol><li>Server层把name推到引擎层</li><li>引擎层根据name去idx_cb的索引树中匹配主键</li><li>回表去捞数据返回给Server层</li><li>Server层再根据title、sex筛选出最终的数据</li><li>最后返回给客户端</li></ol><p><img src="/images/image-20200410003327016.png" alt="image-20200410003327016"></p></li><li><p>ICP启用：Server层会将where条件中在组合索引中的字段全部推送到引擎层，引擎层根据断桥原则匹配出索引数据，然后将其他索引字段带入再进行一次筛选，然后拿最终匹配的主键关键字回表查询出数据后返回给Server层，Server层再根据剩余的where条件做一次筛选，然后返回给Client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, name, sex from index_opt_test where name=&apos;cc&apos; and title like &apos;%7&apos; and sex=&apos;male&apos;;</span><br></pre></td></tr></table></figure><p>执行过程：</p><ol><li>Server把name和title都推到引擎层</li><li>引擎层根据name去idx_cb中查询出主键关键字和title、age</li><li>再由title筛选出匹配的主键关键字</li><li>回表去捞数据返回给Server层</li><li>Server层再根据sex筛选出最终的数据</li><li>再返回给客户端</li></ol><p><img src="/images/image-20200410003348304.png" alt="image-20200410003348304"></p></li></ul></li><li><p>索引下推适用条件</p><ul><li>ICP 用于访问方法是 <code>range/ref/eq_ref/ref_or_null</code>，且需要访问表的完整行记录。</li><li>ICP适用于 InnoDB 和 MyISAM 的表，包括分区的表。</li><li>对于 InnoDB 表，ICP只适用于二级索引。ICP 的目标是减少访问表的完整行的读数量从而减少 I/O 操作。对于 InnoDB 的聚簇索引，完整的记录已经读进 InnoDB 的缓存，使用 ICP 不能减少 I/O 。</li><li>ICP 不支持建立在虚拟列上的二级索引（InnoDB 支持在虚拟列上建立二级索引）。</li><li>引用子查询、存储函数的条件没法下推，Triggered conditions 也没法下推。</li></ul><p>所以ICP 适用的一个隐含前提是二级索引必须是组合索引、且在使用索引进行扫描时只能采用最左前缀匹配原则。组合索引后面的列出现在 where 条件里，因此可以先过滤索引元组、从而减少回表读的数量。</p></li><li><p>为什么会发生索引下推</p><p>索引下推在5.6版本加入的，默认开启，可以通过命令<code>SHOW VARIABLES like '%optimizer_switch%'</code>查看当前状态</p><img src="/images/image-20200410001946545.png" alt="image-20200410001946545" style="zoom: 50%;"><ul><li><p>关闭索引下推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET optimizer_switch = &apos;index_condition_pushdown=off&apos;;</span><br></pre></td></tr></table></figure><p>执行之后查看一下状态：</p><img src="/images/image-20200410002144781.png" alt="image-20200410002144781" style="zoom:50%;"><p>然后我们执行一下SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select id, name, sex from index_opt_test where name=&apos;cc&apos; and title like &apos;%7&apos; and sex=&apos;male&apos;;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20200410002324446.png" alt="image-20200410002324446"></p><p>从执行计划我们可以看出当我们关闭索引下推后，Extra中的是<code>Using where</code></p></li><li><p>开启索引下推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET optimizer_switch = &apos;index_condition_pushdown=on&apos;;</span><br></pre></td></tr></table></figure><p>执行之后查看一下状态：</p><img src="/images/image-20200410001946545.png" alt="image-20200410001946545" style="zoom: 50%;"><p>然后我们执行以下SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain</span><br><span class="line">select id, name, sex from index_opt_test where name=&apos;cc&apos; and title like &apos;%7&apos; and sex=&apos;male&apos;;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20200410002808326.png" alt="image-20200410002808326"></p><p>从执行计划中看到使用了<code>Using index condition</code>和<code>Using where</code>，<code>Using index condition</code>说明ICP生效了，title被推到了引擎层，而<code>Using where</code>是因为where条件中的sex字段</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#准备&quot;&gt;&lt;/a&gt; 准备&lt;/h3&gt;
&lt;p&gt;创建一张表，并创建一个自增主键索引和一个组合索引&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
      <category term="索引" scheme="http://luxiaowan.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL聚簇索引和非聚簇索引</title>
    <link href="http://luxiaowan.github.io/2020/04/09/MySQL%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95/"/>
    <id>http://luxiaowan.github.io/2020/04/09/MySQL聚簇索引和非聚簇索引/</id>
    <published>2020-04-09T10:00:00.000Z</published>
    <updated>2020-04-09T12:20:19.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="聚簇索引"><a class="markdownIt-Anchor" href="#聚簇索引"></a> 聚簇索引</h3><p>聚簇索引是指叶子节点存储的是一整行记录，比如InnoDB的主键索引，主键和表数据存储在一起。聚簇索引并不是一种单独的索引类型，而是一种数据存储方式，因为一行数据不能同时存储在两个地方，所以一张表中只能有一个聚簇索引，因为一张表的数据存储顺序只能是一种，故只有InnoDB主键索引是聚簇索引。</p><p>聚簇索引的存放顺序和数据的物理存储顺序是一致的，即只要是索引是挨着的，那么对应的数据在磁盘上的存储位置一定也是挨着的。</p><p>这里有一个问题：如果我们不用自增的字段作为主键，而使用字符串的话，会有什么不妥的地方？我们来分析看下：</p><ul><li>自增主键：按照主键的值按顺序递增，也就是会一直往后添加数据，只需要分配新页就可以了，那么已经存储了数据的页就永远不会再分裂，物理地址则不需要变动</li><li>字符串：需要根据字符串的ASSIC码值进行计算所要存储的位置，这个过程中会引起已存储数据的物理地址发生变动，并且需要不断的进行页的分裂，带来的性能开销非常大</li></ul><h4 id="优势"><a class="markdownIt-Anchor" href="#优势"></a> 优势</h4><ol><li>可以一次性将相邻的数据加载到内存中，减少了磁盘IO次数</li><li>由于聚簇索引是将索引和数据存储在一起，那么我们找到索引位置的时候实际上就是找到了具体的数据，否则还要进行一次磁盘IO去将最终数据捞出来</li></ol><h4 id="劣势"><a class="markdownIt-Anchor" href="#劣势"></a> 劣势</h4><ol><li>插入速度严重依赖于插入顺序：如果使用的是非自增主键，则可能需要进行页的分裂，非常影响性能</li><li>主键更新代价大：更新一次主键，可能导致被更新的行发生移动，引起页的分裂，非常影响性能</li><li>二级索引查询需要再次根据主键索引回表查询整行数据，因为InnoDB的二级索引的叶子节点存储的是主键的值</li></ol><h3 id="非聚簇索引"><a class="markdownIt-Anchor" href="#非聚簇索引"></a> 非聚簇索引</h3><p>非聚簇索引的叶子节点存储的是主键值或行数据存储的物理位置，MyIsam甭管是主键还是非主键索引都是非聚簇索引索引，InnoDB的非主键索引用的也是非聚簇索引，但是这两种存储引擎的非主键索引的叶子节点存储的内容是不同的。</p><ul><li>InnoDB非聚簇索引：叶子节点存储的是主键关键字，当聚簇索引发生页分裂或移动时(主键关键字未变)，非聚簇索引不需要改变</li><li>MyIsam非聚簇索引：所有索引的叶子节点存储的都是行数据的物理磁盘存储地址，只要行数据发生位置移动时，会引起所有的索引发生改变</li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><p>聚簇索引叶子节点存储的是行数据，非聚簇索引的叶子节点存储的是主键关键字或数据物理存储地址</p></li><li><p>InnoDB的主键索引是聚簇索引，InnoDB的二级索引和MyIsam的所有索引都是非聚簇索引</p></li><li><p>InnoDB非聚簇索引叶子节点存储的是主键关键字，MyIsam非聚簇索引叶子节点存储的是数据物理存储地址</p></li><li><p>聚簇索引尽量使用自增列，可以减少页分裂和行存储位置移动，提升性能</p></li></ul><p><img src="/images/image-20200409193050867.png" alt="image-20200409193050867"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;聚簇索引&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#聚簇索引&quot;&gt;&lt;/a&gt; 聚簇索引&lt;/h3&gt;
&lt;p&gt;聚簇索引是指叶子节点存储的是一整行记录，比如InnoDB的主键索引，主键和表数据存储在一起。聚簇索引并不是一种单独的索引类型，而是一
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
      <category term="索引" scheme="http://luxiaowan.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引类型</title>
    <link href="http://luxiaowan.github.io/2020/04/09/MySQL%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B/"/>
    <id>http://luxiaowan.github.io/2020/04/09/MySQL索引类型/</id>
    <published>2020-04-09T07:49:49.544Z</published>
    <updated>2020-04-09T09:38:13.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="索引类型"><a class="markdownIt-Anchor" href="#索引类型"></a> 索引类型</h3><p>MySQL中我们常用的索引类型有五种：</p><ol><li>普通索引</li><li>唯一索引</li><li>主键索引</li><li>组合索引</li><li>全文索引</li></ol><p>创建表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `INDEX_TEST` (</span><br><span class="line">  `id` int(11) DEFAULT NULL,</span><br><span class="line">  `name` varchar(11) DEFAULT NULL,</span><br><span class="line">  `idno` varchar(11) DEFAULT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  `sex` varchar(11) DEFAULT NULL,</span><br><span class="line">  `content` varchar(500) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure><h3 id="普通索引"><a class="markdownIt-Anchor" href="#普通索引"></a> 普通索引</h3><p>最基本的一种索引，没有任何限制，可以为null，可以重复，普通索引的目的就是为了加快对数据的访问速度，为那些常被用来作查询条件的字段创建一个索引</p><p>SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE INDEX_TEST ADD INDEX idx_normal(name);</span><br></pre></td></tr></table></figure><h3 id="唯一索引"><a class="markdownIt-Anchor" href="#唯一索引"></a> 唯一索引</h3><p>与普通索引类似，但是不同点在于被索引的字段的值不能重复，但是可以为null，比如身份证、员工编号等必须唯一的信息，被设置了唯一索引的字段在整张表中都不能重复</p><p>SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE INDEX_TEST ADD UNIQUE idx_unique(idno);</span><br></pre></td></tr></table></figure><h3 id="主键索引"><a class="markdownIt-Anchor" href="#主键索引"></a> 主键索引</h3><p>与唯一索引类似，但是不同点是字段值不能为null，一般一张表只能有一个主键。实际上每张表都要有一个主键字段，通常情况下我们都是在创建表的时候手动添加，如果一张InnoDB引擎的表未明确主键字段，那么InnoDB引擎会自动为表创建一个隐式的自增主键，所以最优的情况下，我们最好手动创建一个自增主键。</p><p>SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE INDEX_TEST ADD PRIMARY KEY idx_pk(id);</span><br></pre></td></tr></table></figure><p>创建索引的时候，索引名称可以不写。</p><h3 id="组合索引"><a class="markdownIt-Anchor" href="#组合索引"></a> 组合索引</h3><p>组合索引是创建一个包含表中多个字段的索引，组合索引的使用遵循&quot;断桥原则&quot;，也叫&quot;最左前缀原则&quot;，我们在使用组合索引的时候，会从第一个往后匹配，使用顺序影响不大，因为MySQL的优化器会进行再次优化，如果中间有断桥(漏掉了中间一个或多个字段)，则断桥左侧的字段才会被用到索引。</p><p>比如索引字段(a, b, c)，有以下情况：</p><ul><li><p>where a and c and b：索引字段全部命中</p><img src="/images/image-20200409172431883.png" alt="image-20200409172431883" style="zoom:50%;"></li><li><p>where a and c：索引命中a</p><img src="/images/image-20200409172638836.png" alt="image-20200409172638836" style="zoom:50%;"></li><li><p>where a and b：索引命中a、b</p><img src="/images/image-20200409172717610.png" alt="image-20200409172717610" style="zoom:50%;"></li><li><p>where b and c：索引未命中</p><img src="/images/image-20200409172802182.png" alt="image-20200409172802182" style="zoom:50%;"></li><li><p>where a and b order by c：索引字段全部命中</p><img src="/images/image-20200409172431883.png" alt="image-20200409172431883" style="zoom:50%;"></li></ul><p>SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE INDEX_TEST ADD INDEX idx_cb(age, sex);</span><br></pre></td></tr></table></figure><h3 id="全文索引"><a class="markdownIt-Anchor" href="#全文索引"></a> 全文索引</h3><p>主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。它可以在create table，alter table ，create index使用，不过目前只有char、varchar，text 列上可以创建全文索引。值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用CREATE index创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多，因为建表的时候表中没有数据，而已经有了数据再创建的话，要将已存在的数据都先fulltext一下，所以慢。</p><p>SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE INDEX_TEST ADD FULLTEXT idx_fulltext(content);</span><br></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>最终我们的表创建语句变成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `index_test` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(11) DEFAULT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  `sex` varchar(11) DEFAULT NULL,</span><br><span class="line">  `content` varchar(500) DEFAULT NULL,</span><br><span class="line">  `idno` varchar(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),# 主键索引</span><br><span class="line">  UNIQUE KEY `idx_unique` (`idno`),# 唯一索引</span><br><span class="line">  KEY `normal_index` (`name`),# 普通索引</span><br><span class="line">  KEY `idx_cb` (`age`,`sex`),# 组合索引</span><br><span class="line">  FULLTEXT KEY `idx_fulltext` (`content`)# 全文索引</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;索引类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#索引类型&quot;&gt;&lt;/a&gt; 索引类型&lt;/h3&gt;
&lt;p&gt;MySQL中我们常用的索引类型有五种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;普通索引&lt;/li&gt;
&lt;li&gt;唯一索引&lt;/li&gt;
&lt;li&gt;主键索引&lt;
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
      <category term="索引" scheme="http://luxiaowan.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL自适应Hash索引</title>
    <link href="http://luxiaowan.github.io/2020/04/09/MySQL%E8%87%AA%E9%80%82%E5%BA%94Hash%E7%B4%A2%E5%BC%95/"/>
    <id>http://luxiaowan.github.io/2020/04/09/MySQL自适应Hash索引/</id>
    <published>2020-04-09T06:40:00.000Z</published>
    <updated>2020-04-09T07:45:31.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hash索引"><a class="markdownIt-Anchor" href="#hash索引"></a> Hash索引</h3><p>Hash是一种查找数据非常快的数据结构，在正常情况下这种查找的时间复杂度为O(1)，即一般仅需要一次查找就能定位数据，正常情况是指不存在哈希冲突的情况；而B+树的查找次数，取决于B+树的高度，B+树的高度一般为3<sub>4层，所以一般最少需要3</sub>4次的查询。</p><h3 id="innodb的hash索引"><a class="markdownIt-Anchor" href="#innodb的hash索引"></a> InnoDB的Hash索引</h3><p>InnoDB存储引擎会监控对表上各索引页的查询，如果监控到某个索引页被频繁查询，并诊断后发现如果为这一页的数据创建Hash索引会带来更大的性能提升，则会自动为这一页的数据创建Hash索引，并称之为自适应Hash索引。自适应Hash是通过缓冲池中B+树的页进行构建的，建立速度很快，不需要对整张表的数据都构建Hash索引，所以我们又可以把自适应Hash索引看成是索引的索引，。注意一点就是InnoDB只会对热点页构建自适应索引，且是由InnoDB自动创建和删除的，所以不能人为干预是否在一张InnoDB的表中创建Hash索引。</p><h3 id="自适应hash索引"><a class="markdownIt-Anchor" href="#自适应hash索引"></a> 自适应Hash索引</h3><p>官方有告诉我们每一种存储引擎所支持的索引结构，在https://dev.mysql.com/doc/refman/5.7/en/create-index.html中可以查看，我们截图保留下：</p><p><img src="/images/image-20200409150053986.png" alt="image-20200409150053986"></p><p>我们可以看到MyIsam和InnoDB仅支持BTree结构的索引，但是我们在创建的时候却有Hash结构可选择，这是因为啥？细心的话可以发现不论我们在创建索引的时候选择了Hash还是BTree，在保存的时候都会自动转换成BTree，就是这个原因。</p><p>但是我们又在官方的https://dev.mysql.com/doc/refman/5.7/en/innodb-adaptive-hash.html页面看到这么一句话：</p><p><img src="/images/image-20200409150834710.png" alt="image-20200409150834710"></p><p>大致意思是：自适应Hash索引特征能使InnoDB在具有适当的工作负载和足够缓冲池内存的系统上执行的更像内存中的数据库的操作，且不会牺牲事务特性或可靠性，MySQL能基于监视到的搜索规则，使用索引键的前缀构建Hash索引，前缀可以是任意长度，并且可能只有b+树中的某些值出现在Hash索引中，Hash索引其实就是对经常访问的索引页进行构建的。</p><p>这又说明其实InnoDB是支持Hash索引的，但并不是真正意义上的Hash，而是通过自己的监视情况自动对某些热点索引值构建的内存Hash。</p><h3 id="开启和关闭"><a class="markdownIt-Anchor" href="#开启和关闭"></a> 开启和关闭</h3><p>默认情况下自适应索引是开启状态，毕竟是可以提升性能的嘛，我们也可以通过命令开启和关闭，并可以查看自适应索引的</p><ul><li><p>开启</p><p>默认就是开启的，可以通过命令<code>show variables like 'innodb_adaptive_hash_index';</code>查看自适应哈希索引的状态，并可以在命令行通过<code>show engine innodb status\G</code>查看自适应Hash索引的使用信息(AHI的大小，使用情况，每秒使用AHI搜索的情况等等)</p><img src="/images/image-20200409154256344.png" alt="image-20200409154256344" style="zoom:50%;"></li><li><p>关闭</p><p>负载较重的情况下，就不太适合开启自适应Hash索引了，因为这样可以避免额外的索引维护带来的开销，可以在启动的时候通过参数<code>--skip-innodb-adaptive-hash-index</code>关闭</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hash索引&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hash索引&quot;&gt;&lt;/a&gt; Hash索引&lt;/h3&gt;
&lt;p&gt;Hash是一种查找数据非常快的数据结构，在正常情况下这种查找的时间复杂度为O(1)，即一般仅需要一次查找就能定位数据，正
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
      <category term="索引" scheme="http://luxiaowan.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的Hash索引相关</title>
    <link href="http://luxiaowan.github.io/2020/04/09/MySQL%E7%9A%84Hash%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3/"/>
    <id>http://luxiaowan.github.io/2020/04/09/MySQL的Hash索引相关/</id>
    <published>2020-04-09T02:20:00.000Z</published>
    <updated>2020-04-09T16:49:28.507Z</updated>
    
    <content type="html"><![CDATA[<p>hash索引结构使用方式较为局限，仅适用于=、IN和&lt;=&gt;三种，但是由于通过hash可以直接查找到具体的值，而不用像B+树那样每次都从root节点开始遍历，所以在通常情况下，hash的查找效率要比B+树高。</p><p>hash的缺陷：</p><h6 id="1-hash不能进行范围查找"><a class="markdownIt-Anchor" href="#1-hash不能进行范围查找"></a> 1. hash不能进行范围查找</h6><p>值在计算hash后，并不能保证计算后的hash值和计算前的大小排列一样，所以hash不适用于范围查找</p><h6 id="2-hash不能进行排序查询"><a class="markdownIt-Anchor" href="#2-hash不能进行排序查询"></a> 2. hash不能进行排序查询</h6><p>值计算后的hash值无法保证与原值大小顺序一样，所以无法进行排序</p><h6 id="3-组合索引不能使用部分字段查询"><a class="markdownIt-Anchor" href="#3-组合索引不能使用部分字段查询"></a> 3. 组合索引不能使用部分字段查询</h6><p>组合索引的hash值是所有索引字段的值组合在一起进行计算的，若仅使用部分字段进行查询的话，计算出的hash值基本不会与索引的hash值相同</p><h6 id="4-hash在出现大量值碰撞的时候性能会降低"><a class="markdownIt-Anchor" href="#4-hash在出现大量值碰撞的时候性能会降低"></a> 4. hash在出现大量值碰撞的时候，性能会降低</h6><p>hash出现大量的值相等的时候，需要进行表扫描以进行精确匹配，效率较低</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hash索引结构使用方式较为局限，仅适用于=、IN和&amp;lt;=&amp;gt;三种，但是由于通过hash可以直接查找到具体的值，而不用像B+树那样每次都从root节点开始遍历，所以在通常情况下，hash的查找效率要比B+树高。&lt;/p&gt;
&lt;p&gt;hash的缺陷：&lt;/p&gt;
&lt;h6 id=
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
      <category term="索引" scheme="http://luxiaowan.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储引擎下的索引</title>
    <link href="http://luxiaowan.github.io/2020/04/09/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8B%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <id>http://luxiaowan.github.io/2020/04/09/MySQL存储引擎下的索引/</id>
    <published>2020-04-09T01:55:00.000Z</published>
    <updated>2020-04-09T06:39:18.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql存储引擎"><a class="markdownIt-Anchor" href="#mysql存储引擎"></a> MySQL存储引擎</h3><p>MySQL支持多种存储引擎，我们可以通过<code>show engines</code>命令查看当前数据库所支持的存储引擎列表，那么不同存储引擎下的索引实现方式是否会有所不同？那是当然的，但只不过都大同小异而已，我们目前常用的存储引擎大多是InnoDB，主要是因为InnoDB支持事务、行锁、外键等功能，第二常用的就是MyIsam，但是在MySQL5.5版本之后，InnoDB就变成了默认的存储引擎，也可以看出InnoDB的强大和普适性。我们主要记录InnoDB和MyIsam下的索引实现。</p><h3 id="myisam下的索引"><a class="markdownIt-Anchor" href="#myisam下的索引"></a> MyIsam下的索引</h3><p>MyIsam使用B+树作为索引结构，叶子节点存储的是目标数据的内存地址，大致结构图如下：</p><img src="/images/image-20200409120924556.png" alt="image-20200409120924556" style="zoom: 33%;"><p>我们发现，每一个叶子节点内存储的都是指向具体数据的内存地址，可以通过地址直接找到数据。那么我们是不是可以推算出MyIsam的索引在磁盘上是怎么存储的？</p><p>第一：索引存储的是具体数据的地址，和数据没有关系，只要通过地址就可以找到具体数据了</p><p>第二：索引可以单独维护，数据也可以单独维护，就比如是两个微服务项目</p><p>由这两点，我们可以推断出MyIsam的索引和数据应该是分开存储的，即索引存储一个文件，数据存储一个文件，当然还应该有表结构定义要单独一个文件，那么一张表是可以创建非常多的索引，是所有的索引都放在一个文件里，还是每个索引都创建一个文件，文件怎么命名？我们去MySQL的data目录下看看</p><img src="/images/image-20200409111403166.png" alt="image-20200409111403166" style="zoom: 50%;"><p>这个目录下有很多的文件夹，每一个文件夹都对应了我们一个用户库，这说明每个库其实都是相互隔离的，隔离的方式就是以目录的形式，我们进到db_test目录下</p><img src="/images/image-20200409111450620.png" alt="image-20200409111450620" style="zoom:50%;"><p>我们事先在db_test库中创建了一张MyIsam引擎的表myisam_db(id, name)，并且创建了name字段的索引和id的主键索引，看到这一张表对应了三个文件，且文件是以表的名字命名的</p><ul><li>*.frm：记录描述表结构文件，字段长度等</li><li>*.MYI：索引信息文件，记录所有的索引，My Index</li><li>*.MYD：数据信息文件，存储数据信息， My Data</li></ul><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><p>MyIsam的索引是B+树的数据结构，叶子节点中存储的是数据的地址，实现了索引和数据分离，查询的过程中通过值找到数据地址，然后再根据数据地址将地址内存储的数据捞出返回。</p><p>其实我们可以单独的根据文件的存储方式反推出索引的存储策略了，自己反推试试</p><h3 id="innodb下的索引"><a class="markdownIt-Anchor" href="#innodb下的索引"></a> InnoDB下的索引</h3><p>InnoDB和MyIsam一样都是采用B+树作为索引的数据结构，不同的在于InnoDB的叶子节点存储的是具体数据，而不是内存地址</p><p><img src="/images/image-20200409120652368.png" alt="image-20200409120652368"></p><p>我们都知道MySQL的每张表都必须创建一个主键索引，如果建表时未指定主键，那么MySQL引擎会选择一个非空唯一索引来当主键，若非空唯一索引也没有，那就会自动给添加一个自增的列来作为虚主键，InnoDB和MyIsam在存储上最大的一个区别就是索引和数据在同一个文件中，我们看一下InnoDB的表在磁盘上是怎么存储的。我们先在db_test中创建一张使用InnoDB存储引擎的表innodb_db，然后到/data/db_test目录下查看文件</p><img src="/images/image-20200409121451757.png" alt="image-20200409121451757" style="zoom:50%;"><p>磁盘上针对innodb_test表仅生成了两个文件，*.frm是表结构和字段描述等基础信息文件，重点来说一下*.ibd文件。</p><ul><li>表空间(Tablespace)</li></ul><p>ibd是单表表空间文件，每个表使用一个表空间文件，存放用户数据库表数据、索引，InnoDB的每个数据文件都归属于一个表空间，不同的表空间都有唯一的标识space id来标记，系统表空间文件为ibdata1, ibdata2…，公用同一个表空间，用户创建的表产生的ibd文件都使用唯一的space id，只包含一个文件。</p><ul><li>页(Page)</li></ul><p>表空间文件，其中最基本的单位是页(Page)，每一个Page的大小默认为16k，所以ibd的大小必定是16k的整数倍，当然也可以通过<code>innodb_page_size</code>选项将页大小减少到8KB或4KB，或增加到32KB或64KB，但是只能在实例初始化之前设置，不支持动态设置。每个页由header、body、trailer等组成，header标识了类型和checksum信息，可以根据header的类型将body解析成对应的类型，body记录详细的内容，trailer则通过记录checksum等信息来确认该页是否已经写入完成。</p><ul><li>区(Extent)</li></ul><p>Extent用于管理Page，每64个Page组成一个Extent，大小默认为1M，一个Extent内的所有页都是连续的，当表空间页容量不足要分配新页的时候，不会一页一页的分配，会一次性分配一个Extent，也就是连续的64个Page</p><ul><li>段(Segment)</li></ul><p>Segment用于管理Extent，一个表至少会有两个Segment，一个用于管理叶子节点的Extent，一个用于管理非叶子节点的Extent，每增加一个索引就会多出两个Segment，一张表的Segment数量=索引数量*2</p><h3 id="memory下的索引"><a class="markdownIt-Anchor" href="#memory下的索引"></a> Memory下的索引</h3><p>memory存储引擎是MySQL中的一类特殊的存储引擎。其使用存储在内存中的内容来创建表，而且所有数据也放在内存中，很少用到，至今我没用到过，不过在information_schema库中有很多使用Memory引擎的表。</p><p>Memory存储引擎默认使用哈希(HASH)索引，其速度比使用B型树(BTREE)索引快。如果我们需要使用B型树索引，可以在创建索引时选择使用。</p><p>Hash索引基于哈希表实现，只有匹配所有列的查询才有效。对于每一行数据，存储引擎都会对所有索引列计算一个哈希码，哈希码是一个较小的值，不同键值的行计算出的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时保存指向每个数据行的指针。如果多个列的哈希值相同，索引会以链表的方式存放多个记录指针到同一个哈希条目中去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mysql存储引擎&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql存储引擎&quot;&gt;&lt;/a&gt; MySQL存储引擎&lt;/h3&gt;
&lt;p&gt;MySQL支持多种存储引擎，我们可以通过&lt;code&gt;show engines&lt;/code&gt;命令查看当前
      
    
    </summary>
    
    
    
      <category term="索引" scheme="http://luxiaowan.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引初识</title>
    <link href="http://luxiaowan.github.io/2020/04/08/MySQL%E7%B4%A2%E5%BC%95%E5%88%9D%E8%AF%86/"/>
    <id>http://luxiaowan.github.io/2020/04/08/MySQL索引初识/</id>
    <published>2020-04-08T14:10:00.000Z</published>
    <updated>2020-04-09T04:12:05.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="索引是什么"><a class="markdownIt-Anchor" href="#索引是什么"></a> 索引是什么</h3><p>索引是一种能够改变操作速度的特殊数据结构，索引的表达形式有很多种，生活中有很多用到索引的地方，我们举几个例子来理解：</p><ol><li>图书馆书目标签：给每一本书建立唯一的编号，将编号和书架位置做好一一映射，这样我们就可以通过&quot;类型-编号&quot;快速的找到我们想要的书；有的同学可能会说：我们在查找的时候都是通过书的名字去查询的，没有用书的编号去查询啊，但也能查出来，这又是为啥？艾玛~这不就是书名和编号又做了一对多映射了么(因为书名重复的时候会有多个编号，所以用一对多)，我们可以先通过书名找出书的编号，然后再根据编号找到书在书架的位置，然后一锤定音(了解过MySQL索引的这时候是不是立刻想到了回表这个词)。这里书编号、书名就是图书馆书目的索引</li><li>词典：我们这里说一下汉语词典，我们可以按拼音、笔画、偏旁部首等排序的目录快速查找到需要的字。这里拼音、笔画、偏旁部首等就是词典的索引</li><li>酒店房卡：我们住酒店的时候，如果自助办完手续后，自助机吐出给我们一张房卡，然后如果房卡上没有门牌号的话，我们需要挨个儿房间的去尝试，酒店要是有几百个房间且我们正巧是最后一个房间的话，那估计等找到房子已经该要退房了，哈哈~所以房卡上直接告诉了我们房号，我们可以根据房号直接找到我们要入住的房间。这里房间号就是酒店房间的索引。</li></ol><p>通过上面的例子，相信一定能理解索引是什么、作用是什么了吧，我们来总结一下：索引是标识一个物体/数据的特殊属性，这个属性可能是唯一的，也可能不是唯一的，可以是一个属性作索引，也可以是多个属性一起作索引。</p><h3 id="索引有什么用"><a class="markdownIt-Anchor" href="#索引有什么用"></a> 索引有什么用</h3><p>索引的作用是什么，我们为什么要用索引？</p><p>相信很多人都会有这个问题，其实在数据量很小的情况下，比如一眼就看得到所有数据，那就没必要用索引了，为什么没必要？因为本来数据量就少，如果创建了索引的话，我们每次还要去查索引，然后从索引再去查具体数据，是不是很麻烦？并且有新数据插入或者索引的数据变更的时候，还需要同步去修改索引的数值，不然就会造成索引出现脏数据和数据无对应的索引等情况；若不建立索引的话，遍历所有的数据去查询某一条或者某几条出来，耗时貌似也不大，并且还不用在修改插入数据的时候也不用耗时去维护索引。</p><p>但是在数据量较大的情况下，我们就必须要建立索引了，因为如果我们为了查找一条数据而要去遍历几十万条数据的话，耗时是相当大的，特别是如果恰巧我们要查的数据在倒数第一条，那就彻底崩溃了，所以我们需要为数据集依据查询条目建立索引，我们先根据条件查询出来索引，然后把索引指向的存储位置上的数据捞出来直接返回就行了，是不是很方便？当然插入更新数据引起的索引更新相对于无索引查询带来的消耗来说，微乎其微。</p><p>聊到这里，肯定有一个疑问：我们在查询索引时不一样是要遍历所有的索引吗？这和遍历数据集中的所有数据有什么区别？</p><h3 id="索引结构"><a class="markdownIt-Anchor" href="#索引结构"></a> 索引结构</h3><p>为了解决索引的快速查询和命中，我们有哈希和树两种结构，在不同的MySQL存储引擎中支持的索引结构不同，比如MyIsam支持Hash，InnoDB支持树，并且是B+树，当然也知道Hash，但是属于是变形的Hash，和MyIsam中的不同，且Hash索引的创建和维护完全由MySQL自己决定，只有在数据量达到一定数量的时候才会创建Hash，但是使用Hash结构也是有缺陷的：</p><h5 id="hash结构索引"><a class="markdownIt-Anchor" href="#hash结构索引"></a> Hash结构索引</h5><ol><li><p>优势</p><p>Hash索引实际上就是采用一定的Hash算法，把键值转换成哈希值，检索的时候不需要像树那样从根开始找起，能够根据哈希值一次性定位到位置，所以在哈希冲突不严重的情况下，检索效率远高于树</p></li><li><p>缺陷</p><ul><li>只能匹配是否相等，不能实现范围查找，只能用于=、IN和&lt;&gt;</li><li>无法使用Order By进行排序</li><li>组合索引的时候，无法实现最左匹配，因为组合索引会将所有的字段整合一起做Hash计算，所以如果仅部分索引字段进行Hash计算的话，可能匹配到其他数据</li><li>当数据量越来越大的时候，哈希冲突会越来越严重，性能会下降的很严重</li></ul></li><li><p>结构图</p><img src="/images/135122_hash.png" alt="img" style="zoom:50%;"></li></ol><h5 id="树结构"><a class="markdownIt-Anchor" href="#树结构"></a> 树结构</h5><p>树有多种，MySQL中使用的是B+树，这是由B树演变而来的，B树又是从AVL树演变而来，我们分别来看一下各种树的结构和检索方式，然后推导出为什么MySQL使用B+树。</p><ol><li><p>AVL树</p><ul><li><p>结构</p><p><img src="/images/AVLtreef.png" alt="AVL树"></p></li><li><p>特征</p><p>在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是O(log n)。增加和删除元素的操作则可能需要借由一次或多次树旋转，以实现树的重新平衡</p></li><li><p>作为索引</p><ul><li>每个节点均能存储数据</li><li>每一个节点都需要进行一次磁盘IO</li><li>由于每一个节点最多只能有两个子节点，所以在数据量大的时候，树的高度会很大</li></ul></li></ul></li><li><p>B树 (B-树)</p><ul><li><p>结构</p><img src="/images/btree.png" alt="B树" style="zoom:67%;"></li><li><p>特征</p><p>B树，概括来说是一个一般化的二叉查找树（binary search tree）一个节点可以拥有2个以上的子节点。与自平衡二叉查找树不同，B树适用于读写相对大的数据块的存储系统，例如磁盘。B树减少定位记录时所经历的中间过程，从而加快存取速度。B树这种数据结构可以用来描述外部存储。这种数据结构常被应用在数据库和文件系统的实现上。</p></li><li><p>作为索引</p><ul><li>解决AVL树每个节点只能存储一个数据的问题</li><li>减少AVL树查询过程中的IO次数</li></ul></li></ul></li><li><p>B+树</p><ul><li><p>结构</p><p><img src="/images/image-20200409120652368.png" alt="image-20200409120652368"></p></li><li><p>特征</p><p>B+树在非叶子节点存储关键字和指向下一节点的指针，仅在叶子节点存储数据，叶子节点之间依据关键字从小到大有序排列成一个有序链表；</p><p>B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找；</p><p>所有的叶子节点都在同一高度上，对于所有内部节点，子指针的数目总是与元素的数目相同。</p></li><li><p>作为索引</p><ul><li>非叶子节点不保存关键字记录的指针，只进行数据索引，这样使非叶子节点能保存大量的关键字</li><li>所有的数据或数据地址只有在叶子节点才能获取到，所以每次查询所有的路径相同，查询稳定</li><li>非叶子节点的关键字都是从小到大有序排列</li><li>所有的叶子节点形成有序链表，方便于范围查询</li></ul></li></ul></li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>以上的内容带我们认识了什么是索引、索引有什么用、索引有哪些存储结构，基本上对索引有了一个最基本的认识，通过对几个存储结构的分析，我们可以看出为什么MySQL选择B+树：每一次的演变都是为了提供更快的查询，如何加快查询效率，就是减少IO的操作次数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;索引是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#索引是什么&quot;&gt;&lt;/a&gt; 索引是什么&lt;/h3&gt;
&lt;p&gt;索引是一种能够改变操作速度的特殊数据结构，索引的表达形式有很多种，生活中有很多用到索引的地方，我们举几个例子来理解：&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://luxiaowan.github.io/categories/MySQL/"/>
    
    
      <category term="索引" scheme="http://luxiaowan.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>getClassLoader能否为null</title>
    <link href="http://luxiaowan.github.io/2020/04/08/getClassLoader%E8%83%BD%E5%90%A6%E4%B8%BAnull/"/>
    <id>http://luxiaowan.github.io/2020/04/08/getClassLoader能否为null/</id>
    <published>2020-04-08T01:30:00.000Z</published>
    <updated>2020-04-08T13:58:13.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>我们Javaer都知道类想要被加载是需要一个个ClassLoader来帮助的，并且类加载的方案叫双亲委派模式，说是双亲，其实就是单亲，可能我们最初的翻译人想让我们的加载器的家庭更完整吧，所以翻译成双亲。默认的类加载器包括BootstrapClassLoader、ExtClassLoader、AppClassLoader，他们都定义在在rt.jar中的<code>sun.misc.Launcher</code>类中，他们的&quot;继承&quot;关系是AppClassLoader—&gt;ExtClassLoader—&gt;BootstrapClassLoader，ExtClassLoader的parent获取不到BootstrapClassLoader，只能获取到一个null。</p><img src="/images/classloader.png" alt="classloader" style="zoom:67%;"><ol><li>bootstrap是C++编写的类加载器，主要加载%JRE_HOME/lib/目录下的jar包</li><li>ExtClassLoader主要加载%JRE_HOME/lib/ext目录下的jar包</li><li>AppClassLoader主要加载java环境变量CLASSPATH所指定的路径下的jar包和class文件，通过System.getProperty(“java.class.path”)获取考验获取CLASSPATH路径</li><li>用户自定义ClassLoader，加载用户自己制定的类</li></ol><h3 id="getclassloader会不会为空"><a class="markdownIt-Anchor" href="#getclassloader会不会为空"></a> getClassLoader会不会为空</h3><p>说了这么多，其实就是想说getClassLoader当然可能会为空，是不是此时会有个疑惑：加载器都为空了，那这个类是怎么加载的，被谁加载的？答：被BootstrapClassLoader加载的。</p><p>我们知道BootstrapClassLoader是由C++编写的，我们是用Java代码获取不到的，BootstrapClassLoader也不是ExtClassLoader的父类，而是它的父亲，这里要搞清关系，父亲和父类是两码事，父类是有继承关系，父亲是上一层的关系，所以我们在获取String、Integer、int、double、BufferedInputStream等等一系列在rt.jar包中被BootstrapClassLoader加载的类的加载器时，返回的都是null。</p><h3 id="extclassloader是怎么成为appclassloader的父亲的"><a class="markdownIt-Anchor" href="#extclassloader是怎么成为appclassloader的父亲的"></a> ExtClassLoader是怎么成为AppClassLoader的父亲的</h3><p>类加载器并非是继承关系，而是父子关系，就像上面说的BootstrapClassLoader是ExtClassLoader的父亲，不是父类。关键点就在于ClassLoader的实例变量parent，这个parent指定了当前类加载器的父亲，但是翻遍了AppClassLoader的代码也没发现是在哪里把ExtClassLoader设置进去的，怎么parent就是ExtClassLoader了呢。</p><p>刚才我们说这些类加载器被定义在了Launcher类中，那么我们就去看下这个类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Launcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Launcher.ExtClassLoader var1;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取ExtClassLoader</span></span><br><span class="line">    var1 = Launcher.ExtClassLoader.getExtClassLoader();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException var10) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"Could not create extension class loader"</span>, var10);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取AppClassLoader实例并赋值给loader，并把ExtClassLoader的实例传入到方法中，</span></span><br><span class="line">    <span class="keyword">this</span>.loader = Launcher.AppClassLoader.getAppClassLoader(var1);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException var9) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"Could not create application class loader"</span>, var9);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回AppClassLoader实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.loader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Launcher的构造器我们看到关键点在AppClassLoader.getAppClassLoader(var1)这句，那我们就看这个方法是怎么写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AppClassLoader</span> <span class="keyword">extends</span> <span class="title">URLClassLoader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getAppClassLoader</span><span class="params">(<span class="keyword">final</span> ClassLoader var0)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String var1 = System.getProperty(<span class="string">"java.class.path"</span>);</span><br><span class="line">    <span class="keyword">final</span> File[] var2 = var1 == <span class="keyword">null</span> ? <span class="keyword">new</span> File[<span class="number">0</span>] : Launcher.getClassPath(var1);</span><br><span class="line">    <span class="keyword">return</span> (ClassLoader)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Launcher.AppClassLoader&gt;() &#123;</span><br><span class="line">      <span class="keyword">public</span> Launcher.<span class="function">AppClassLoader <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        URL[] var1x = var1 == <span class="keyword">null</span> ? <span class="keyword">new</span> URL[<span class="number">0</span>] : Launcher.pathToURLs(var2);</span><br><span class="line">        <span class="comment">// 关键看这一句，调用了AppClassLoader的构造器，并把ExtClassLoader实例传了进去，那就跳到构造器去看</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Launcher.AppClassLoader(var1x, var0);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造器</span></span><br><span class="line">  AppClassLoader(URL[] var1, ClassLoader var2) &#123;</span><br><span class="line">    <span class="comment">// 调用了父类的构造器，他的父类是哪个？从定义上看应该是URLClassLoader没跑了</span></span><br><span class="line">    <span class="keyword">super</span>(var1, var2, Launcher.factory);</span><br><span class="line">    <span class="keyword">this</span>.ucp.initLookupCache(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实再往里的代码就不用在这闲扯了，里面就是不断的将var2往上传递，直到ClassLoader这个类的构造器中，在ClassLoader中完成的设置。</p><h4 id="那为什么extclassloader没通过这种形式将bootstrapclassloader设置给parent呢"><a class="markdownIt-Anchor" href="#那为什么extclassloader没通过这种形式将bootstrapclassloader设置给parent呢"></a> 那为什么ExtClassLoader没通过这种形式将BootstrapClassLoader设置给parent呢？</h4><p>是不是傻，上面刚说了BootstrapClassLoader是C++写的，Java代码不能直观的获取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;我们Javaer都知道类想要被加载是需要一个个ClassLoader来帮助的，并且类加载的方案叫双亲委派模式，说是双亲，其实就是单亲，可能我们最
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java获取项目中的文件</title>
    <link href="http://luxiaowan.github.io/2020/04/07/Java%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://luxiaowan.github.io/2020/04/07/Java获取项目中的文件/</id>
    <published>2020-04-07T15:17:00.000Z</published>
    <updated>2020-04-07T15:43:48.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="classgetresource与classloadergetresource的区别"><a class="markdownIt-Anchor" href="#classgetresource与classloadergetresource的区别"></a> Class.getResource()与ClassLoader.getResource()的区别</h3><p><code>Class.getResource()</code>是指<code>AAA.class.getResource()</code></p><ol><li><p>Class.getResource(String name)：在当前class类的同一路径下查找资源</p></li><li><p>ClassLoader.getResource(String name)：在根目录下查找该资源文件，即&quot;/&quot;或classpath目录</p></li></ol><h3 id="粗解"><a class="markdownIt-Anchor" href="#粗解"></a> 粗解</h3><ol><li><p>在当前项目目录下查找指定的文件，此方式只能加载当前项目classpath下的文件，用.表示当前目录，不能以/开头，会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line">URL url = ClassLoader.getSystemResource(<span class="string">"."</span>);</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line">url = LoaderResourceTest.class.getClassLoader().getResource(<span class="string">"."</span>);</span><br></pre></td></tr></table></figure><p>url会输出当前class文件所在的根目录，比如当前我输出的结果就是<code>file:/Users/chuan/Documents/projects_code/java-project/demo/demo-core/target/classes/</code></p></li><li><p>以当前类所在的目录为基础，在当前目录查找并加载指定名称的资源文件，比如当前类LoaderResourceTest在项目的<code>cc.kevinlu.demo.core.loader</code>包中，若是我们以<code>LoaderResourceTest.class.getResource(&quot;LoaderT.class&quot;)</code>的方式加载一个文件，则首先会在<code>cc.kevinlu.demo.core.loader</code>包中查找LoaderT.class文件，若查找不到则返回null，如果我们想要加载其他包中的文件，则可以使用&quot;/&quot;开头并加上文件在项目中的完整包路径，比如<code>LoaderResourceTest.class.getResource(&quot;/cc/kevinlu/demo/core/gof/facade/FacadeTest.class&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前类所在的包目录</span></span><br><span class="line">url = LoaderResourceTest.class.getResource(<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取其他包内的文件</span></span><br><span class="line">url = LoaderResourceTest.class.getResource(<span class="string">"/cc/kevinlu/demo/core/gof/facade/FacadeTest.class"</span>);</span><br></pre></td></tr></table></figure><p>这两条语句的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file:/Users/chuan/Documents/projects_code/java-project/demo/demo-core/target/classes/cc/kevinlu/demo/core/loader/</span><br><span class="line"></span><br><span class="line">file:/Users/chuan/Documents/projects_code/java-project/demo/demo-core/target/classes/cc/kevinlu/demo/core/gof/facade/FacadeTest.class</span><br></pre></td></tr></table></figure><p>由此可以很明显的看出Class的getResource是获取当前类所在的包目录，如果不同的包中都有相同名称的资源文件，但是仅针对当前包可用，那么就可以使用这种方式去加载读取，不会出现读到其他目录的文件的情况，但是这仅受限于我们写的类，不适用于jar包中的。</p></li><li><p>如果我们想读取项目中引用的jar包内的文件，那么怎么办？其实和读取项目中自己写的文件是相同的办法，因为在系统启动的时候会将jar包中的文件加载到classpath目录下，所以读取方式一样的。</p></li><li><p>以上讲解的只是读取单个资源，那么要是想把所有匹配到的资源都获取到，则可以使用<code>Class.getClassLoader().getResources()</code>和<code>ClassLoader.getSystemResources()</code>两种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = LoaderResourceTest.class.getClassLoader().getResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">  System.out.println(urls.nextElement());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--ClassLoader.getSystemResources--"</span>);</span><br><span class="line">urls = ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">  System.out.println(urls.nextElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取资源文件内容方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InputStream is = LoaderResourceTest.class.getClassLoader().getResourceAsStream(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">String line = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">  System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="整个测试文件代码"><a class="markdownIt-Anchor" href="#整个测试文件代码"></a> 整个测试文件代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc.kevinlu.demo.core.loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.admin.SpringApplicationAdminMXBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaderResourceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在当前项目目录下查找指定的文件，此方式只能加载当前项目classpath下的文件，用.表示当前目录，不能以/开头，会报错</span></span><br><span class="line">        URL url = ClassLoader.getSystemResource(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此方式和ClassLoader.getSystemResource一样</span></span><br><span class="line">        url = LoaderResourceTest.class.getClassLoader().getResource(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以当前类所在的目录为基础，在当前目录查找并加载指定名称的资源文件，比如当前类LoaderResourceTest在</span></span><br><span class="line">        <span class="comment">// 项目的cc.kevinlu.demo.core.loader包中，若是我们以LoaderResourceTest.class.getResource("LoaderT.class")的</span></span><br><span class="line">        <span class="comment">// 方式加载一个文件，则首先会在cc.kevinlu.demo.core.loader包中查找LoaderT.class文件，若查找不到则返回null，如果我们想要加载其他包中的文件，</span></span><br><span class="line">        <span class="comment">// 则可以使用/开头并加上文件在项目中的完整包路径，比如LoaderResourceTest.class.getResource("/cc/kevinlu/demo/core/gof/facade/FacadeTest.class")                                                                                              </span></span><br><span class="line">        url = LoaderResourceTest.class.getResource(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">        url = LoaderResourceTest.class.getResource(<span class="string">"/cc/kevinlu/demo/core/gof/facade/FacadeTest.class"</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取jar包内的文件有以下方式</span></span><br><span class="line">        <span class="comment">// 1. 使用Class.getClassLoader().getResource()，这种方式只能获取第一个匹配到的文件</span></span><br><span class="line">        System.out.println(<span class="string">"************"</span>);</span><br><span class="line">        url = LoaderResourceTest.class.getClassLoader().getResource(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        System.out.println(<span class="string">"************"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 使用Class.getResource()，这种方式也只能获取第一个匹配到的文件</span></span><br><span class="line">        url = LoaderResourceTest.class.getResource(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 使用ClassLoader.getSystemResource()方法，这种也仅仅只是获取第一个匹配的文件</span></span><br><span class="line">        url = ClassLoader.getSystemResource(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 那我们如果想要获取到所有匹配到的文件要怎么办呢？那么就使用Class.getClassLoader().getResources()，这个方法会返回一个Enumeration&lt;URL&gt;实例，</span></span><br><span class="line">        <span class="comment">// 我们迭代返回的这个实例就可以读取所有匹配到的所有文件了，如果没有匹配到任何文件也可以大胆的去迭代，不用判空，因为在getResources方法中进行了非空封装</span></span><br><span class="line">        System.out.println(<span class="string">"-----"</span>);</span><br><span class="line">        Enumeration&lt;URL&gt; urls = LoaderResourceTest.class.getClassLoader().getResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">        <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">            System.out.println(urls.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----"</span>);</span><br><span class="line">        urls = ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">        <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">            System.out.println(urls.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果想要读取文件的具体内容，那么我们就要用到文件流了，常用的方法就是使用BufferedReader去读了</span></span><br><span class="line">        <span class="comment">// getResourceAsStream()方法，它相当于你用getResource()取得File文件后，再new InputStream(file)一样的结果</span></span><br><span class="line">        InputStream is = LoaderResourceTest.class.getClassLoader().getResourceAsStream(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i == <span class="number">1</span> &amp;&amp; (line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*******"</span>);</span><br><span class="line">        url = SpringApplicationAdminMXBean.class.getResource(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;classgetresource与classloadergetresource的区别&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#classgetresource与classloadergetresource的区别&quot;&gt;&lt;/a&gt; Cla
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>运行Jar包时指定启动端口</title>
    <link href="http://luxiaowan.github.io/2020/04/02/%E8%BF%90%E8%A1%8Cjar%E5%8C%85%E6%97%B6%E6%8C%87%E5%AE%9A%E5%90%AF%E5%8A%A8%E7%AB%AF%E5%8F%A3/"/>
    <id>http://luxiaowan.github.io/2020/04/02/运行jar包时指定启动端口/</id>
    <published>2020-04-02T13:30:00.000Z</published>
    <updated>2020-04-02T13:32:00.255Z</updated>
    
    <content type="html"><![CDATA[<p>java -jar xxx.jar --server.port=9090</p><blockquote><p>–server.port一定要在最后</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java -jar xxx.jar --server.port=9090&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;–server.port一定要在最后&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈RPC</title>
    <link href="http://luxiaowan.github.io/2020/04/02/%E6%B5%85%E8%B0%88RPC/"/>
    <id>http://luxiaowan.github.io/2020/04/02/浅谈RPC/</id>
    <published>2020-04-01T17:10:00.000Z</published>
    <updated>2020-04-07T15:44:11.888Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>RPC是Remote Procedure Call的简称，译为远程过程调用，何为远程？就是从这个地方到另一个地方，也就是调用双方不在同一个进程或者不在同一台服务器上，由于双方不在一个内存空间中，所以需要借助网络来实现通信和数据传递。</p><h3 id="工作过程"><a class="markdownIt-Anchor" href="#工作过程"></a> 工作过程</h3><p>A服务器上的进程P1调用A服务器上的进程P2，或者A服务器上的进程P1调用B服务器上的P2，P1发起调用行为之后，进程被挂起，P2接收到请求之后开始执行，然后返回结果给P1，P1继续执行。P1可以使用参数将信息传递给P2，然后通过P2传回的消息得到结果。</p><p><img src="/images/45366c44f775abfd0ac3b43bccc1abc3_1440w.png" alt="img"></p><ol><li>Client function中像调用本地方法一样调用远程服务</li><li>Client stub接收到调用请求后，将方法、参数序列化</li><li>Client通过Socket将消息发送到远程服务</li><li>Server接收到消息后转发给Server stub，Server stub将消息进行解码（反序列化）</li><li>Server stub根据解码后的内容调用本地Server服务</li><li>Server执行完本地方法后，将执行结果返回给Server stub</li><li>Server stub将结果进行编码（序列化），然后传给Socket</li><li>然后通过Socket将消息发送给Client</li><li>Client接收到返回的消息后转发给Client stub，随之进行解码（反序列化）</li><li>Client接收到返回数据做最终处理</li></ol><p>以上就是一次RPC请求的全过程，整个RPC调用过程有同步和异步两种方式，同步也就是Client在接收到Server返回的消息之前一直将请求保持在运行中状态，例如IO和BIO；异步则是Client将请求发出去之后就将请求挂起，然后Server执行完后再发消息过来通知服务唤醒对应的请求继续处理，例如NIO和AIO。</p><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3><p>在RPC理论被提出时就被赋予了简单、高效、通用三个特点。</p><p>简单：RPC概念语义清晰，使建立分布式应用更加简单，服务之间调用方式简单</p><p>高效：过程调用使用起来很高效，会隐藏底层的通信细节，不需要我们之间去处理Socket通信</p><p>通用：RPC是一个请求响应模型，调用双方可以使用不同的编程语言去实现，选择合适的序列化方式即可</p><p>简单点说，就是RPC能够使我们像调用本地方法一样去调用远程方法，并且调用者不需要知道远程服务到底部署在何处，达到像傻子一样去编程。</p><h3 id="序列化"><a class="markdownIt-Anchor" href="#序列化"></a> 序列化</h3><p>在说到RPC调用过程的时候，有反复的提到序列化和反序列化，RPC支持的数据序列化方式有Java序列化、JSON、Hessian、Kryo等，还有我们很早之前WebService常用的XML。</p><ul><li>JSON：<ul><li>可读性较高</li><li>无法表示数据内的引用关系</li><li>统一JSON字段命名规范较困难</li></ul></li><li>Hessian二进制<ul><li>几乎无可读性而言</li><li>支持的语言不够多，比如直接忽略了对js的支持</li><li>二进制兼容性较高</li><li>二进制传输速度比XML、JSON快</li></ul></li></ul><h3 id="rpc框架"><a class="markdownIt-Anchor" href="#rpc框架"></a> RPC框架</h3><ul><li><p>Dubbo</p><p>阿里研发的，后由当当网扩展出了Dubbox，阿里的已经不维护了，现在丢给Apache了</p></li><li><p>Feign</p><p>Netflix的一套，由Spring Cloud拓展出来了一套轻量级的，很好的融合于Spring Cloud，微服务中还是常用的，适用于Java</p></li><li><p>gRPC</p><p>谷歌的一套RPC框架，基于HTTP/2 协议传输，在多语言服务之间交互时常被采用</p></li><li><p>Java RMI</p><p>较古老的一款RPC框架，仅适用于Java程序，无法跨语言，用起来也不方便</p></li><li><p>Thrift</p><p>Facebook开源的一套RPC框架，它主要是一种接口描述语言和二进制通信协议，跨语言协作，现在丢给Apache了</p></li><li><p>SOAP</p><p>由XML-RPC演变而来，不常用，老项目里可能会用到</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;RPC是Remote Procedure Call的简称，译为远程过程调用，何为远程？就是从这个地方到另一个地方，也就是调用双方不在同一个进程或
      
    
    </summary>
    
    
      <category term="分布式" scheme="http://luxiaowan.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>聊一聊SPI</title>
    <link href="http://luxiaowan.github.io/2020/04/02/%E8%81%8A%E4%B8%80%E8%81%8ASPI/"/>
    <id>http://luxiaowan.github.io/2020/04/02/聊一聊SPI/</id>
    <published>2020-04-01T17:10:00.000Z</published>
    <updated>2020-04-05T14:06:22.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>SPI全称是Service Provider Interface，是一种服务发现机制（哎，服务发现机制？和Zookeeper什么关系？）。SPI 的本质是将接口实现类的全限定名配置在文件META-INFO/services目录下以接口全限定名命名的文件中，并由服务加载器(ServiceLoader)读取配置文件，加载实现类。这样可以在运行时，动态为接口替换实现类。正因此特性，我们可以很容易的通过 SPI 机制为我们的程序提供拓展功能。</p><p><img src="/images/image-20200405012001538.png" alt="image-20200405012001538"></p><h3 id="使用方式"><a class="markdownIt-Anchor" href="#使用方式"></a> 使用方式</h3><ul><li><p>场景</p><p>如果在使用过程中需要动态替换接口类的实现逻辑，那么比较适合使用SPI。比如<code>java.sql.Driver</code>。</p></li><li><p>方式</p><ol><li>在服务提供者提供了接口的一种具体实现后，在jar包的META-INF/services目录下创建一个以接口全限定名为命名的文件，内容为实现类的全限定名</li><li>通过maven引入接口实现类所在的jar包，或者将jar包放到应用的classpath中</li><li>通过java.util.ServiceLoder动态装载接口实现模块，它通过扫描META-INF/services目录下的配置文件找到实现类的全限定名，把类加载到JVM</li><li>SPI的实现类必须有一个无参的public构造器</li></ol></li><li><p>疑问</p><ul><li><p>为什么要把定义放在META-INF/services目录下？</p><p>这个目录位置是在ServiceLoader中定义的，并且还是final不能修改的，所以还是乖乖遵守吧，因为ServiceLoader也是final的，所以也不能从这个类进行扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoader</span>&lt;<span class="title">S</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">"META-INF/services/"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为什么需要一个无参的public构造器？</p><p>ServiceLoader内部实例化扫描到的类是通过<code>LazyIterator</code>迭代器在迭代的时候使用Class的newInstance()方法，所以这里必须要有一个无参的public构造器，否则实例化的时候会报错。</p></li><li><p>如果引入的多个jar包中均有目标接口的实现类及SPI定义，咋整？</p><p>全部都会被加载，只要是在项目中被引入了，就会全部被加载。</p></li><li><p>运行过程是什么样子的？</p><img src="/images/spi.png" alt="spi" style="zoom:46%;"></li></ul></li></ul><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><ol><li><p>服务方</p><ul><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc.kevinlu.spidemo.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SPIUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 领导实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaderServiceImpl</span> <span class="keyword">implements</span> <span class="title">SPIUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"领导发话了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 员工实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SPIUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"员工暴怒了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>spi文件</p><p>在实现类所在的项目中的resources目录下创建文件夹META-INF/services文件夹，然后创建文件<code>cc.kevinlu.spidemo.spi.SPIUserService</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cc.kevinlu.spidemoimpl.spi.LeaderServiceImpl</span></span><br><span class="line"><span class="attr">cc.kevinlu.spidemoimpl.spi.EmployeeServiceImpl</span></span><br></pre></td></tr></table></figure></li><li><p>项目结构</p><img src="/images/image-20200405175109421.png" alt="image-20200405175109421" style="zoom:50%;"></li></ul></li><li><p>调用方</p><ul><li><p>pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.kevinlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spi-demo-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ServiceLoader&lt;SPIUserService&gt; services = ServiceLoader.load(SPIUserService.class);</span><br><span class="line"><span class="comment">// 隐式迭代器方式</span></span><br><span class="line"><span class="keyword">for</span> (SPIUserService service : services) &#123;</span><br><span class="line">  service.name();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"><span class="comment">// 显式迭代器方式</span></span><br><span class="line">Iterator&lt;SPIUserService&gt; iterator = services.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">  SPIUserService service = iterator.next();</span><br><span class="line">  service.name();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> MySQL</h3><p>在mysql-connector-java包中的META-INFO/services目录下可以找到以接口<code>java.sql.Driver</code>为名的文件，文件内容是<code>com.mysql.jdbc.Driver</code>或者<code>com.mysql.cj.jdbc.Driver</code>。再来我们就需要找到是在哪里对这个类进行加载的，我们从<code>com.mysql.jdbc.Driver</code>可以进入到<code>java.sql.DriverManager</code>，哦哟~原来是在DriverManager类中的静态代码块实现的对目标类的加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load the initial JDBC drivers by checking the System property</span></span><br><span class="line"><span class="comment"> * jdbc.properties and then use the &#123;<span class="doctag">@code</span> ServiceLoader&#125; mechanism</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  loadInitialDrivers();</span><br><span class="line">  println(<span class="string">"JDBC DriverManager initialized"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadInitialDrivers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String drivers;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the driver is packaged as a Service Provider, load it.</span></span><br><span class="line">  <span class="comment">// Get all the drivers through the classloader</span></span><br><span class="line">  <span class="comment">// exposed as a java.sql.Driver.class service.</span></span><br><span class="line">  <span class="comment">// ServiceLoader.load() replaces the sun.misc.Providers()</span></span><br><span class="line">  AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class="line">      Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Load these drivers, so that they can be instantiated.</span></span><br><span class="line"><span class="comment">       * It may be the case that the driver class may not be there</span></span><br><span class="line"><span class="comment">       * i.e. there may be a packaged driver with the service class</span></span><br><span class="line"><span class="comment">       * as implementation of java.sql.Driver but the actual class</span></span><br><span class="line"><span class="comment">       * may be missing. In that case a java.util.ServiceConfigurationError</span></span><br><span class="line"><span class="comment">       * will be thrown at runtime by the VM trying to locate</span></span><br><span class="line"><span class="comment">       * and load the service.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * Adding a try catch block to catch those runtime errors</span></span><br><span class="line"><span class="comment">       * if driver not available in classpath but it's</span></span><br><span class="line"><span class="comment">       * packaged as service and that service is there in classpath.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(driversIterator.hasNext()) &#123;</span><br><span class="line">          driversIterator.next();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(Throwable t) &#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  println(<span class="string">"DriverManager.initialize: jdbc.drivers = "</span> + drivers);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="疑"><a class="markdownIt-Anchor" href="#疑"></a> 疑</h2><p>前几天面试的时候，有个同学问我：我们订单类型分很多种，有美食、外卖、酒店、门票、火车票、机票等等，我们这边是做一个中台(中间平台)，为客户端提供统一下单、出单、订单等服务，但是订单需要流转到相对应的业务部门，怎么做？</p><p>我说SDK、微服务等形式，比如下单的时候由中台判断订单要流转的业务线，然后依据策略调用不同业务线提供的API服务。</p><p>然后又问我每个业务线提供的接口定义不同，调用起来会很麻烦，怎么办？</p><p>我说这个很简单啊，由中台定义接口，业务方引入中台的接口依赖，然后实现中台提供的接口，去编写自己的业务逻辑，并把该api暴露给中台去调用，这样中台对外的接口定义都一致，其实就是对外统一接口请求规范。</p><p>接着这位同学问了句：你知道SPI么？</p><p>艾玛~SPI会把业务方的实现代码依赖进来，如果某个业务方的处理逻辑改变了，或者他们的包版本变更了，岂不是所有的依赖方都要去更新依赖？这种方式其实不是不可取，只是会麻烦一些，并且我们把所有的业务方的实现都依赖进来了，那么我们使用ServiceLoader加载之后在使用的时候判断起来也麻烦。</p><p>是吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;SPI全称是Service Provider Interface，是一种服务发现机制（哎，服务发现机制？和Zookeeper什么关系？）。SPI
      
    
    </summary>
    
    
      <category term="分布式" scheme="http://luxiaowan.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud全家桶初探</title>
    <link href="http://luxiaowan.github.io/2020/04/01/SpringCloud%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%88%9D%E6%8E%A2/"/>
    <id>http://luxiaowan.github.io/2020/04/01/SpringCloud全家桶初探/</id>
    <published>2020-04-01T14:56:00.000Z</published>
    <updated>2020-04-05T14:07:16.784Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是spring-cloud"><a class="markdownIt-Anchor" href="#什么是spring-cloud"></a> 什么是Spring Cloud</h3><p>官网上面有一段话：Spring Cloud为开发人员提供了快速构建分布式系统中的一些常见模式的工具(例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话、集群状态)。</p><ul><li>Spring Boot是Spring的一套快速配置脚手架，可以基于Spring Boot快速开发一个微服务应用，而Spring Cloud是一个基于Spring Boot实现云应用的开发工具；</li><li>Spring Boot专注于快速、方便的创建单个微服务，Spring Cloud专注于微服务全局的服务治理框架；</li><li>Spring Boot使用了约定大于配置的理念，大部分集成方案都预设好了，不需要过多的配置，或者说能不配置就不配置，而Spring Cloud是基于Spring Boot来实现的，也就是说Spring Boot可以独立于Spring Cloud，而Spring Cloud强依赖于Spring Boot。</li></ul><h3 id="什么是微服务"><a class="markdownIt-Anchor" href="#什么是微服务"></a> 什么是微服务</h3><ol><li><p>微服务架构</p><ul><li>分散：不同的功能模块部署在不同的服务器/容器中，减轻功能模块高并发带来的压力</li><li>集群：不同服务器/容器中部署相同的功能模块，通过负载均衡服务配置实现功能模块的高可用</li><li>微服务：微服务架构简单来说就是将web应用拆分成一系列小的服务应用，这些应用可以独立的编译、部署，应用之间通过暴露各自的API实现通信，共同组成一个完整的web应用</li></ul></li><li><p>微服务的特点</p><ul><li>单一职责：每一个微服务模块都对应不同的服务功能，负责单一业务的业务实现</li><li>微/细：服务拆分的粒度很小，但依据分久必合合久必分原则，微服务之间也是可以进行再拆分或合并的</li><li>面向服务：每个服务应用对外暴露自己的API，调用者不需要关注具体的业务实现</li><li>自我治理：<ul><li>服务独立，研发团队独立</li><li>技术独立：只要提供相应的API即可，实现技术和实现语言不必一致</li><li>前后端分离</li><li>配置独立</li><li>解耦：独立部署，通过RPC或REST方式通信，耦合影响较小</li><li>服务容错、限流</li></ul></li></ul></li><li><p>微服务的劣势</p><ul><li>微服务使整个应用分散成多个服务应用，定位问题非常困难（trace解决定位难的问题）</li><li>稳定性下降，服务数量过多会导致整个应用出现问题的概率变大，其中一个服务挂掉就可能导致整个应用不可用，访问量越大出问题的可能性越大</li><li>服务数量过多，部署、管理的工作量变大</li><li>开发的过程中很难实现相互依赖的服务之间同步进行（mock解决此问题）</li><li>测试难度增大，由原先的单体应用测试变成服务间调用的测试，测试过程更加复杂</li><li>服务运行过程中可能会经常发生服务宕机，所以对于微服务必须建立完善的服务监控体系，尽可能的第一时间发现故障服务并进行故障通知、转移和恢复（Zookeeper、Eureka、Consul、Etcd等）</li></ul></li><li><p>微服务拆分依据</p><p>微服务拆分不是一蹴而就的，而是需要在开发过程中不断的去分析和理清每一个服务的边界。对于老工程中尚未分清拆分方向的，可先留于其中，最终可考虑将这些功能作为一个微服务。</p><ul><li>基于业务逻辑</li><li>基于可扩展</li><li>基于可靠性</li><li>基于性能</li></ul></li><li><p>微服务拆分规范</p><ul><li>粒度：先少后多，先粗后细</li><li>调用：保持单向调用，尽量禁止循环调用，比如订单—&gt;产品，产品—x&gt;订单</li><li>接口幂等：应保证接口的幂等性，避免出现脏数据</li><li>纵向拆分尽量少于三层，也即维持在控制层—&gt;业务服务层—&gt;基础服务层</li><li>先拆分服务，后拆分数据库</li></ul></li></ol><h3 id="基础元件"><a class="markdownIt-Anchor" href="#基础元件"></a> 基础元件</h3><ol><li><p>Config</p><p>分布式服务，由于服务数量较多，每一个服务都会有1+套配置文件，如果每个项目单独配置一个yml/properties文件，管理起来会很混乱，并且无法实现动态变更配置属性的值，所以我们需要一个分布式配置中心组件，Spring Cloud Config就因此应运而生，它支持配置信息放在配置服务的内存中，也支持放在远程的git/svn仓库中，Config分两个角色，一个Server和一个Client。</p><ul><li><p>Server：创建一个简单的Config Server，使用git作为配置中心，我们再git仓库中创建目录config，这个目录名称需要和<code>spring.cloud.config.server.git.search-paths</code>配置的一致，然后在目录中创建client1-dev.properties</p><ol><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">7701</span></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.uri</span>=<span class="string">http://gitlab.xx.com/spring-cloud/config-center.git</span></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.username</span>=<span class="string">xxxxx</span></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.password</span>=<span class="string">xxxxx</span></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.search-paths</span>=<span class="string">config</span></span><br></pre></td></tr></table></figure><ul><li>spring.cloud.config.server.git.uri：git仓库地址</li><li>spring.cloud.config.server.git.search-paths：git仓库地址下的相对地址，可以配置多个，用,分割</li><li>spring.cloud.config.server.git.username：git仓库登录用户名</li><li>spring.cloud.config.server.git.password：git仓库登录密码</li></ul></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再启动类加上<code>@EnableConfigServer</code>注解，表明该项目是Config Server项目，启动后访问<code>http://localhost:7701/client1/dev</code>，如果返回如下，则表示我们已经配置正常，可以使用：</p><blockquote><p>{<br>“name”: “client1”,<br>“profiles”: [<br>“dev”<br>],<br>“label”: null,<br>“version”: “e3741fe5e48b303c80f34c1b8a44c0ef2999e22b”,<br>“state”: null,<br>“propertySources”: [<br>{<br>“name”: “<a href="http://gitlab.xxx.com/spring-cloud/config-demo.git/config/client1-dev.yml" target="_blank" rel="noopener">http://gitlab.xxx.com/spring-cloud/config-demo.git/config/client1-dev.yml</a>”,<br>“source”: {<br>“name”: “cc”<br>}<br>}<br>]<br>}</p></blockquote><p>☆说明：</p><blockquote><p>仓库中的配置文件会被转换成 Web 接口，访问可以参照以下的规则：</p><ul><li>/{application}/{profile}[/{label}]</li><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties</li></ul><p>上面的 URL 会映射 <code>{application}-{profile}.yml</code> 对应的配置文件，其中 <code>{label}</code> 对应 Git 上不同的分支，默认为 master。以 config-client-dev.yml 为例子，它的 application 是 config-client，profile 是 dev。</p></blockquote></li></ol></li><li><p>Client</p><ol><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态刷新配置信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们引入了actuator，目的是可以在修改了git仓库中的配置信息之后，可以手动刷新，让项目读取最新的配置信息，而不需要重启我们的应用</p></li><li><p>bootstrap.properties</p><p>config的配置必须配置在bootstrap.properties文件中，这样才能被正确的加载，按照springboot的配置文件加载顺序来看，会先加载bootstrap，然后再加载application，并且我们的config的配置要优先于项目中的其他内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.config.profile</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.config.label</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.config.uri</span>=<span class="string">http://127.0.0.1:7701/</span></span><br><span class="line"><span class="meta">spring.cloud.config.name</span>=<span class="string">client1</span></span><br></pre></td></tr></table></figure><ul><li>label：对应git仓库的分支名称，默认是master，我们这里dev表示我们使用的是dev分支，若分支不存在，则报错</li><li>profile：环境，对应文件后缀</li><li>uri：Config Server地址</li><li>name：配置中心的项目文件夹名称，若配置一个不存在的文件名，则会报错</li></ul></li><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">client1</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">health, info, refresh</span></span><br></pre></td></tr></table></figure><p>在application.properties中指定端口和项目名称，因为我们引入的actuator，但是它默认暴露的接口是health和info两个接口，其他的都涉及到安全所以需要手动将接口暴露出来，因为我们要可以动态刷新，所以将refresh接口也暴露出来，以POST方式请求该接口：<code>curl -X POST http://127.0.0.1:8080/actuator/refresh</code></p></li><li><p>TestController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/one"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">one</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解<code>@RefreshScope</code>是指明该类下的属性注入可以动态刷新</p></li></ol></li><li><p>测试</p><ol><li>访问http://127.0.0.1:8080/index/one</li><li>修改client-dev.properties文件中name=one_1</li><li>刷新：<code>curl -X POST http://127.0.0.1:8080/actuator/refresh</code></li><li>访问http://127.0.0.1:8080/index/one</li></ol></li></ul></li><li><p>Eureka</p><p>服务注册发现中心，基于CAP理论的AP实现，一个基于REST的服务，用于服务的发现和定位，以实现云端中间层服务发现和故障转移。Eureka的AP原则保证了注册中心的高可用，它是一个去中心化的架构，也就是集群中的所有节点都无主从之分，每一个节点都是平等的，可以相互注册，每一个节点都需要添加一个或多个serviceUrl指向其他节点，每个节点都可以视为其他节点的副本，这一特点实现了Eureka的高可用。</p><p>当有一台Server宕机后，Eureka Client会将请求自动转发到其他的Server节点上，当故障的Server节点恢复之后，Eureka会将其再次加入到服务器集群中。</p><p>当一个新的Server启动并加入进群后，会首先从其他的临近节点获取所有的可用服务列表信息完成初始化。</p><ul><li><p>Server：创建一个Eureka Server中心只需要在启动类上加上注解<code>@EnableEurekaServer</code>即可，启动服务之后通过访问<code>http://127.0.0.1:8080/</code>进入eureka控制中心，我们需要在<code>pom.xml</code>中引入一个jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> ↓(内嵌)</span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> ↓(内嵌)</span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@SpringBootApplication</span></span><br><span class="line"> <span class="meta">@EnableEurekaServer</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们仅仅是部署一个Eureka Server，那么我们还需要修改一下eureka.client前缀的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"> <span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://127.0.0.1:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>这些配置信息对应的类是在<code>spring-cloud-netflix-eureka-client.jar</code>包中的<code>org.springframework.cloud.netflix.eureka.EurekaClientConfigBean</code>类中，看下这个类中上面三个参数的默认值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ConfigurationProperties</span>(EurekaClientConfigBean.PREFIX)</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientConfigBean</span> <span class="keyword">implements</span> <span class="title">EurekaClientConfig</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 默认的eureka客户端配置前缀，就用在上面↑</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">"eureka.client"</span>;</span><br><span class="line">   <span class="comment">// Eureka默认的访问地址，如果我们不修改这个配置的话，就可以通过8761端口的这个地址去访问</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_URL = <span class="string">"http://localhost:8761"</span> + DEFAULT_PREFIX</span><br><span class="line"> + <span class="string">"/"</span>;</span><br><span class="line">   <span class="comment">// 如果没设置zone就使用下面这个默认的</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ZONE = <span class="string">"defaultZone"</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 指定是否将当前服务注册到Eureka Server以被其他服务发现和使用</span></span><br><span class="line"> <span class="comment">// 如果不想使当前应用被其他服务发现，则修改此属性为false</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> registerWithEureka = <span class="keyword">true</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 指定当前服务是否从Eureka Server拉取监听的服务列表</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">boolean</span> fetchRegistry = <span class="keyword">true</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Eureka Server访问地址，一个Map，可以存储很多值</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, String&gt; serviceUrl = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="comment">// 将默认的server地址放入服务地址Map中</span></span><br><span class="line"><span class="keyword">this</span>.serviceUrl.put(DEFAULT_ZONE, DEFAULT_URL);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Client：创建一个Eureka Client很简单，在启动类上加上注解<code>@EnableEurekaClient</code>即可，如果Eureka Server服务的端口并不是使用的8761，那么则需要修改一下配置信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://127.0.0.1:8080/eureka/</span></span><br></pre></td></tr></table></figure><p>仅仅只需要修改折一个配置即可，因为其他的默认都为true，不用再配置了，这就是Spring Boot所说的约定大于配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@SpringBootApplication</span></span><br><span class="line"> <span class="meta">@EnableEurekaClient</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自我保护模式</p><ul><li>Eureka Server在运行期间会不断的统计心跳失败比例，如果再15分钟内有超过85%的client未正常发送心跳过来(单机模式很容易满足，生产环境如果出现这个情况则一般是网络通信出现了问题)，那么Eureka Server就会认为自己和客户端出现了网络故障，就会进入自我保护模式</li><li>自我保护模式的原则是宁可放过不可错杀，意思就是即使服务宕机了，我们在注册中心看到的服务状态依然是UP</li><li>自我保护模式使的Eureka实现了CAP中的AP，默认是开启的，可以通过参数<code>eureka.server.enable-self-preservation=false</code>进行关闭，但是在实际生产环境中不建议关闭，因为如果关闭的话，可能就直接导致服务不可用了</li><li>在正常情况下，如果超过默认的90秒未接收到某client的心跳，则将该client做下线处理，并从服务列表中移除掉；但是在保护模式下，不会将无心跳的client从服务列表中移除</li><li>自我保护模式下，当前Server节点依然可以接收通信正常的服务的注册和发现，但是不会将新注册的服务同步给集群中的其他Server节点，只有待网络恢复且退出自我保护模式之后，才会将自我保护模式期间新注册的服务同步给其他节点</li><li>Eureka的服务健康检查是通过actuator的/info和/health来实现的</li></ul><p><img src="/images/image-20200402211128777.png" alt="image-20200402211128777"></p></li></ul></li><li><p>Consul</p><ul><li><p>Consul用于实现分布式系统的服务发现与配置，其它分布式服务注册与发现的方案，满足CAP的CP，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具（ZooKeeper等），Consul可以与Docker完美融合使用Go语言开发，基于 Mozilla Public License 2.0 的协议开源。</p></li><li><p>Consul工作原理</p><img src="/images/consol_service.png" alt="img" style="zoom:67%;"><ul><li>Producer启动的时候，会向Consul发送自己的服务信息，比如IP、port等</li><li>Consul每隔10秒(默认)会向Producer发送一个心跳监控请求，检测Producer是否健康</li><li>Consumer每隔10秒(默认)会向Consul拉取一次服务列表缓存在本地，Consumer的请求都基于本地的服务缓存列表进行请求</li></ul></li><li><p>安装Consul服务</p><ul><li><p>Docker运行（单机版）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 查询consul可用镜像</span></span><br><span class="line">docker search consul</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 拉取consul镜像</span></span><br><span class="line">docker pull consul:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 启动镜像</span></span><br><span class="line">docker run \</span><br><span class="line">--name consul \</span><br><span class="line">-p 8599:8500 \</span><br><span class="line">-v /data/consul/conf/:/consul/conf/ \</span><br><span class="line">-v /data/consul/data/:/consul/data/ \</span><br><span class="line">-d consul</span><br></pre></td></tr></table></figure></li><li><p>正常安装</p><p>下载地址：<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">https://www.consul.io/downloads.html</a></p><p>帮助文档：<a href="https://learn.hashicorp.com/consul/getting-started/install" target="_blank" rel="noopener">https://learn.hashicorp.com/consul/getting-started/install</a></p></li><li><p>访问consul：<a href="http://127.0.0.1:8599" target="_blank" rel="noopener">http://127.0.0.1:8599</a></p><p><img src="/images/consul.png" alt="image-20200402161855088"></p></li></ul></li><li><p>Consul与客户端集成</p><ul><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web包，必须引入，否则服务无法注册到注册中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- consul discovery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 心跳 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">7702</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">consul-demo</span></span><br><span class="line"><span class="meta">spring.cloud.consul.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.cloud.consul.port</span>=<span class="string">8500</span></span><br><span class="line"><span class="comment">#spring.cloud.consul.discovery.health-check-path=/health</span></span><br></pre></td></tr></table></figure><ul><li>spring.cloud.consul.host：consul服务IP</li><li>spring.cloud.consul.port：consul服务端口</li><li>spring.cloud.consul.discovery.health-check-path：consul心跳地址，默认为actuator/health，我们可以自定义</li></ul></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用注解@EnableDiscoveryClient开启服务自动注册和发现</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConsulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConsulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20200402170513327.png" alt="image-20200402170513327"></p></li></ul></li><li><p>运行机制</p><ul><li>Consul的一致性算法采用了Raft，比Zookeeper的Paxos算法简单很多</li><li>强一致性给Consul带来了可用性的下降<ul><li>当一个服务注册到leader节点时，因为Raft算法要求所有节点数投票同意过半才能将服务真正的注册进来，所以新服务注册的时间被拉长了；</li><li>当leader节点挂掉之后，需要根据Raft算法选举出新的leader节点，选举的过程中，Consul服务不可用</li></ul></li></ul></li></ul></li><li><p>Ribbon</p><p>负载均衡(Load Balance)是用于解决一个服务节点无法处理所有请求的算法，Ribbon是一款基于TCP和HTTP的客户端负载均衡工具，基于Netflix Ribbon，由Spring Cloud进行了再封装，将我们的REST模板的请求均转换为客户端负载均衡的服务调用，Ribbon仅仅只是一个工具，包含在每一个Spring Cloud应用中，无需单独的部署其他服务。</p><p>由于Ribbon属于是客户端负载均衡，所以需要在客户端维护一份服务端列表信息，而这些列表信息来自于服务注册中心，如Eureka、Consul等，客户端的服务端列表信息也需要不断的去更新，保证服务列表中服务的可用性，这个过程并不是在客户端去检测各个服务端的心跳，而是通过与服务注册中心进行数据交换来维护服务端的健康。</p><p>Spring Cloud默认会自动加载和配置Ribbon的一切，我们只需要去解读一下<code>org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration</code>和<code>org.springframework.cloud.consul.discovery.RibbonConsulAutoConfiguration</code>就可以知道一切了，这里不做源码解释</p><ul><li><p>如何在Spring Cloud中使用Ribbon</p><ul><li>服务端启动多个实例，并注册到同一个服务注册中心，或者同一个集群</li><li>客户端的RestTemplate实例创建的时候通过注解<code>@LoadBalanced</code>修饰</li></ul></li><li><p>Ribbon带来的好处</p><ul><li>当集群中某一个服务宕掉后，整个服务集群依然可以正常提供服务</li><li>可以选择合适的负载算法保证服务的良性使用，避免在流量激增的时候拖垮CPU</li></ul></li><li><p>负载均衡算法</p><ul><li><p>权重</p><p>为每台机器设置在集群中的比重，请求过来后按照比重分配进行轮询</p></li><li><p>随机</p><p>对集群中的机器随机访问，通过随机数定位要访问的机器</p></li><li><p>哈希</p><p>请求按照一定规则映射到要访问的机器上</p></li><li><p>轮询</p><p>轮询是指将请求轮流分配给每台服务器，当服务器群中各服务器的处理能力相同时，且每笔业务处理量差异不大时，最适合使用这种算法</p></li></ul></li><li><p>Ribbon工作原理</p><ol><li><p>获取被<code>@LoadBalanced</code>修饰的RestTemplate</p><p>我们知道SpringBoot中的自配装配都是通过MATE-INF/spring.factories文件中<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>指定的类来实现的，在注解<code>@LoadBalanced</code>所在的包中我们找到了<code>org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration</code>，其实整个EnableAutoConfiguration的列表中只有这一个和LoadBalance有关，所以很容易找，我们看下LoadBalanceAutoConfiguration的代码是怎么写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> List&lt;RestTemplate&gt; restTemplates = Collections.emptyList();</span><br></pre></td></tr></table></figure><p>我们知道<code>@Autowired</code>可以将对象赋值给一个对象，也可以赋值给一个对象的集合，这里我们不做解释，可以去了解一下<code>@Autowired</code>和<code>@Qualifier</code>。</p></li><li><p>为RestTemplate添加一个拦截器，也就是<code>org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor</code>，拦截每一次的RestTemplate请求</p><p>我们看下LoadBalancerInterceptor的创建过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SmartInitializingSingleton <span class="title">loadBalancedRestTemplateInitializerDeprecated</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">final</span> ObjectProvider&lt;List&lt;RestTemplateCustomizer&gt;&gt; restTemplateCustomizers)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> () -&gt; restTemplateCustomizers.ifAvailable(customizers -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (RestTemplate restTemplate : LoadBalancerAutoConfiguration.<span class="keyword">this</span>.restTemplates) &#123;</span><br><span class="line">      <span class="keyword">for</span> (RestTemplateCustomizer customizer : customizers) &#123;</span><br><span class="line">        <span class="comment">// 触发LoadBalancerInterceptorConfig.restTemplateCustomizer的执行</span></span><br><span class="line">        customizer.customize(restTemplate);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span>(<span class="string">"org.springframework.retry.support.RetryTemplate"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerInterceptorConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建拦截器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> LoadBalancerInterceptor <span class="title">ribbonInterceptor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    LoadBalancerClient loadBalancerClient,</span></span></span><br><span class="line"><span class="function"><span class="params">    LoadBalancerRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadBalancerInterceptor(loadBalancerClient, requestFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为RestTemplate实例添加拦截器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RestTemplateCustomizer <span class="title">restTemplateCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> LoadBalancerInterceptor loadBalancerInterceptor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate -&gt; &#123;</span><br><span class="line">      List&lt;ClientHttpRequestInterceptor&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">        restTemplate.getInterceptors());</span><br><span class="line">      list.add(loadBalancerInterceptor);</span><br><span class="line">      <span class="comment">// 拦截器设置点</span></span><br><span class="line">      restTemplate.setInterceptors(list);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在拦截器中获取服务所有的列表，根据负载规则选择一台机器提供服务</p><p>通过上面的分析，我们可以看到只要为RestTemplate添加了拦截器之后，根据拦截器的工作性质，往后通过RestTemplate实例的每一次请求都会先走到这个拦截器的intercept()方法中，在intercept()方法中调用了<code>LoadBalancerClient.execute()</code>进行了Server选举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 获取服务列表，检测服务是否存活，每一次请求均需要检测一次，所有的路由均实现于ILoadBalancer</span></span><br><span class="line">  ILoadBalancer loadBalancer = getLoadBalancer(serviceId);</span><br><span class="line">  <span class="comment">// 根据配置的路由规则选择最终要提供的服务的地址，所有的规则都实现于IRule</span></span><br><span class="line">  Server server = getServer(loadBalancer);</span><br><span class="line">  <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No instances available for "</span> + serviceId);</span><br><span class="line">  &#125;</span><br><span class="line">  RibbonServer ribbonServer = <span class="keyword">new</span> RibbonServer(serviceId, server, isSecure(server, serviceId), serverIntrospector(serviceId).getMetadata(server));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> execute(serviceId, ribbonServer, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送请求获取结果，然后将结果返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, ServiceInstance serviceInstance, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Server server = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(serviceInstance <span class="keyword">instanceof</span> RibbonServer) &#123;</span><br><span class="line">server = ((RibbonServer)serviceInstance).getServer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No instances available for "</span> + serviceId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RibbonLoadBalancerContext context = <span class="keyword">this</span>.clientFactory</span><br><span class="line">.getLoadBalancerContext(serviceId);</span><br><span class="line">RibbonStatsRecorder statsRecorder = <span class="keyword">new</span> RibbonStatsRecorder(context, server);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 最终请求语句</span></span><br><span class="line">T returnVal = request.apply(serviceInstance);</span><br><span class="line">statsRecorder.recordStats(returnVal);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">statsRecorder.recordStats(ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">statsRecorder.recordStats(ex);</span><br><span class="line">ReflectionUtils.rethrowRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借他人的一张图来说明一下请求流程：</p><p><img src="/images/e9998448e095176c2454fafd66ea57ab1511332.png" alt="img"></p></li></ol></li><li><p>配置负载策略</p><p>Ribbon默认的负载策略为ZoneAwareLoadBalancer，我们可以通过配置修改策略方案</p><ol><li><p>使用Ribbon中已存在的负载策略</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">u-service.ribbon.NFLoadBalancerRuleClassName</span>=<span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>所有的策略都实现于IRule接口</p><p><img src="/images/rule.png" alt="img"></p><p>这里单独说一下WeightedResponseTimeRule这个策略，我们在使用Nginx的时候，可以手动预先设置好每一台服务器的权重，但是在Ribbon中，权重是依据服务器响应时间动态设置的，在应用运行期间，这个权重有可能会改变，在WeightedResponseTimeRule类中有一个内部类DynamicServerWeightTask，它是一个定时器，调度时间默认为30秒一次，如果想要修改这个时间，则可以使用自定义负载规则。</p></li><li><p>使用自定义负载策略</p><ul><li><p>创建自定义配置器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 使用权重规则</span></span><br><span class="line">        WeightedResponseTimeRule rule = <span class="keyword">new</span> WeightedResponseTimeRule();</span><br><span class="line">        IClientConfig config = <span class="keyword">new</span> DefaultClientConfigImpl();</span><br><span class="line">        config.loadDefaultValues();</span><br><span class="line">      <span class="comment">// 修改权重定时器执行时间</span></span><br><span class="line">        config.set(WeightedResponseTimeRule.WEIGHT_TASK_TIMER_INTERVAL_CONFIG_KEY, <span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">      <span class="comment">// 调用方法修改配置</span></span><br><span class="line">        rule.initWithNiwsConfig(config);</span><br><span class="line">        <span class="keyword">return</span> rule;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明要使用该规则的服务</p><p>在启动类上加入<code>@RibbonClient(name = &quot;user-service&quot;, configuration = MyRule.class)</code>，name属性指定服务名称，configuration指定要使用的规则</p></li></ul></li></ol></li></ul></li><li><p>Hystrix</p><p>Spring Cloud Hystrix是从Netflix Hystrix延伸出的一个轻量级的组件，主要功能是服务容错和线程隔离。</p><p>在微服务架构中，服务之间通过远程调用的方式进行通信，会出现一个请求走过多个服务的情况，在请求链路中，一旦某个服务出现故障，那么所有依赖这个服务的其他服务均会发生故障，严重的情况下会导致整个系统全部瘫痪，这与我们做微服务的初衷是相悖的。Hystrix的断路器模式帮我们提升了服务的故障容错能力，当某个服务或某个接口出现故障时，通过断路器的监控，给调用方返回一个指定的错误响应，避免调用方因为长期等待一直占用线程而造成的故障蔓延。</p><p>Hystrix具备服务降级、服务熔断、线程隔离、请求缓存、请求合并和服务监控等功能，我们常用的大多就是降级和熔断了。</p><ul><li><p>服务熔断降级</p><p>服务熔断是指在下游服务变得不可用或响应时间过长而导致调用方放弃继续调用转而直接返回的一种处理方式，目的是为了保证上游服务的可用性和稳定性。然后我们创建一个具有熔断器的项目，下游服务的代码不做解释，我们看下上游服务如何开启熔断。</p><ol><li><p>pom.xml</p><p>我们要使用Hystrix的第一步当然是要引入jar包，我们在pom.xml文件中引入依赖jar：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- euraka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Hystrix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为什么要引入eureka？因为服务端是注册到eureka里面的啊，所以要引入eureka去做服务发现。那么可以不用eureka么？当然可以。</p></li><li><p>API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"faultMethod"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/cuser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String obj = restTemplate.getForObject(<span class="string">"http://cuser-service/user/1"</span>, String.class);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">faultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"服务熔断"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API的定义和我们平时写的不太一样，多了一个注解<code>@HystrixCommand</code>，这个注解的作用就是在我们API内发生异常的时候进行熔断，参数<code>fallbackMethod</code>指定的就是在发生异常的时候跳转的熔断方法，这个方法参数和返回类型需要和被熔断的方法如出一辙，否则就会报错。</p><ul><li>注解<code>@HystrixCommand</code>参数解析<ol><li>fallbackMethod：指定服务降级处理方法；</li><li>ignoreExceptions：忽略某些异常，不发生服务降级；</li><li>commandKey：命令名称，用于区分不同的命令；</li><li>groupKey：分组名称，Hystrix会根据不同的分组来统计命令的告警及仪表盘信息；</li><li>threadPoolKey：线程池名称，用于划分线程池。</li></ol></li></ul></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudCuserConsumerHystrixApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudCuserConsumerHystrixApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解<code>@EnableHystrix</code>的作用是为应用开启Hystrix的能力，等于一个开关。老版本中使用的是注解<code>@EnableCircuitBreaker</code>，新版本中可以看到EnableHystrix中已经集成在一起了，所以我们使用这一个注解就行了。</p><p>运行过程就不用说了，也就是eureka、server、client都启动了，然后访问<code>http://127.0.0.1:8090/cuser</code>，接着把server停掉，然后再访问，会发现接口发生了熔断。</p></li><li><p>高级参数配置</p><p>注解<code>@HystrixCommand</code>中可以通过参数commandProperties、threadPoolProperties设置熔断降级相关的参数，参数名称在类<code>com.netflix.hystrix.contrib.javanica.conf.HystrixPropertiesManager</code>中有指定，并且类中也说明了这两个属性所适用的参数名称，太多了，写两个比较常用的吧</p><ul><li>threadPoolProperties<ul><li>coreSize：线程池核心线程数</li><li>keepAliveTimeMinutes：线程最大存活时间，单位为分钟</li><li>maxQueueSize：最大等待线程队列容量</li><li>queueSizeRejectionThreshold：等待队列拒绝添加的阈值</li></ul></li><li>commandProperties<ul><li>execution.isolation.thread.timeoutInMilliseconds：设置调用者等待命令执行的超时限制，超过此时间，HystrixCommand被标记为TIMEOUT，并执行回退逻辑。</li></ul></li></ul></li></ol></li><li><p>服务限流</p><p>服务接口限流我们可以通过设置注解<code>@HystrixCommand</code>的threadPoolProperties的参数来实现，限制请求的线程池数量来达到限流的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>   index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"faultMethod"</span>, threadPoolProperties = &#123;</span><br><span class="line">  <span class="meta">@HystrixProperty</span>(name = <span class="string">"coreSize"</span>, value = <span class="string">"1"</span>),</span><br><span class="line">  <span class="meta">@HystrixProperty</span>(name = <span class="string">"queueSizeRejectionThreshold"</span>, value = <span class="string">"2"</span>),</span><br><span class="line">  <span class="meta">@HystrixProperty</span>(name = <span class="string">"maxQueueSize"</span>, value = <span class="string">"1"</span>) &#125;, commandProperties = &#123;</span><br><span class="line">  <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"2000"</span>) &#125;)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/cuser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span> (index % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  String obj = restTemplate.getForObject(<span class="string">"http://cuser-service/user/1"</span>, String.class);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">faultMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"服务熔断"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们用index来模拟一个请求挂起的操作，我们线程池核心数设置为1，最大等待队列长度为1，我们用JMeter来模拟45个并发，会发现最终只有3个请求顺利通过，其他的全部都被熔断了。</p><p>然后我们修改一下线程池大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"faultMethod"</span>, threadPoolProperties = &#123;</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"coreSize"</span>, value = <span class="string">"10"</span>),</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"queueSizeRejectionThreshold"</span>, value = <span class="string">"10"</span>),</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"maxQueueSize"</span>, value = <span class="string">"100"</span>) &#125;, commandProperties = &#123;</span><br><span class="line">&gt;                     <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"2000"</span>) &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>把核心数和队列数都增大，然后还是45个并发，会发现全部请求都正常了，把并发改为200后，会发现有那么一两个请求会被熔断</p><p>再改一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"faultMethod"</span>, threadPoolProperties = &#123;</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"coreSize"</span>, value = <span class="string">"2"</span>),</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"queueSizeRejectionThreshold"</span>, value = <span class="string">"2"</span>),</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"maxQueueSize"</span>, value = <span class="string">"10"</span>) &#125;, commandProperties = &#123;</span><br><span class="line">&gt;                     <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"2000"</span>) &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>150个并发，大概平均每次会有32个请求正常访问，其他的全部被熔断，我们的请求熔断过期时间是2秒，一开始会有2个请求进入核心线程去处理，后续会有10个请求进入等待队列，依次去请求</p><p>问题：如果我们想把接口限制并发20，怎么办？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"faultMethod"</span>, threadPoolProperties = &#123;</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"coreSize"</span>, value = <span class="string">"10"</span>),</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"queueSizeRejectionThreshold"</span>, value = <span class="string">"2"</span>),</span><br><span class="line">&gt;             <span class="meta">@HystrixProperty</span>(name = <span class="string">"maxQueueSize"</span>, value = <span class="string">"10"</span>) &#125;, commandProperties = &#123;</span><br><span class="line">&gt;                     <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"150000"</span>) &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>我们只能大概的控制一下，并不能如此严谨的设置</p></blockquote></li></ul></li><li><p>Feign</p><p>Spring Cloud Feign是从Netflix Feign扩展出来的一套通过声明式服务调用客户端的组件，使用Feign可用帮助我们更简单的构建一个Web服务，我们只需要通过注解来编写接口，就可以完成对服务接口的绑定。Feign对Hystrix有依赖关系，它只是一个简单的REST框架，最终还是需要通过Ribbon去做负载均衡，通过上面的内容可以看出Feign+Eureka+Ribbon是一家人，Feign通过整合Eureka和Ribbon来实现支持负载均衡的客户端服务。</p><p>使用Feign，我们需要将下游服务的接口定义引入到当前应用中，毕竟Java是一个面向对象的语言，即便是RPC调用，我们也需要使用相同的参数类型，并且尽量保证我们参与传递的参数都能够被序列化，所以既然我们要引入下游服务的接口定义，那么我们尽量在下游接口定义中定义FeignClient，这样做的好处是，服务可以被多个客户端使用，不需要每个客户端都定义一次 Feign 接口。</p><p>客户端需要在启动类上使用注解<code>@EnableFeignClients</code>开启Feign，Feign最终仍然是使用HTTP方式去发起请求。</p><blockquote><p>上游服务A，下游服务B</p><p>B：interface(feign client)—&gt;controller</p><p>A：dependency#A—&gt;enable discovery client &amp;&amp; enable feign clients</p></blockquote><ul><li><p>客户端调用</p><ul><li>定义要调用的目标API接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"cuser-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CUserService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function">String <span class="title">getUser</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只需要定义接口即可，接口的参数和请求路径都需要和对应的API一致，接口由注解<code>@FeignClient</code>标注。</p><ul><li>调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/cuser/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Feign支持多种注解方式：Feign、JAX-RS、SpringMVC。</p></li></ol><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是spring-cloud&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是spring-cloud&quot;&gt;&lt;/a&gt; 什么是Spring Cloud&lt;/h3&gt;
&lt;p&gt;官网上面有一段话：Spring Cloud为开发人员提供了快速构建
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://luxiaowan.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringCloud" scheme="http://luxiaowan.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis中的设计模式</title>
    <link href="http://luxiaowan.github.io/2020/03/29/MyBatis%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://luxiaowan.github.io/2020/03/29/MyBatis中的设计模式/</id>
    <published>2020-03-29T15:55:00.000Z</published>
    <updated>2020-04-01T17:06:16.344Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Builder模式</p><p>SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder</p></li><li><p>工厂模式</p><p>SqlSessionFactory、ObjectFactory、MapperProxyFactory</p></li><li><p>单例模式</p><p>ErrorContext和LogFactory</p></li><li><p>代理模式</p><p>Mybatis实现的核心，比如MapperProxy、ConnectionLogger，用的jdk的动态代理；还有executor.loader包使用了cglib或者javassist达到延迟加载的效果</p></li><li><p>组合模式</p><p>SqlNode和各个子类ChooseSqlNode等</p></li><li><p>模板方法模式</p><p>BaseExecutor和SimpleExecutor，还有BaseTypeHandler和所有的子类例如IntegerTypeHandler</p></li><li><p>适配器模式</p><p>Log的Mybatis接口和它对jdbc、log4j等各种日志框架的适配实现</p></li><li><p>装饰者模式</p><p>Cache包中的cache.decorators子包中等各个装饰者的实现</p></li><li><p>迭代器模式</p><p>迭代器模式PropertyTokenizer</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Builder模式&lt;/p&gt;
&lt;p&gt;SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://luxiaowan.github.io/categories/MyBatis/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring解决循环依赖</title>
    <link href="http://luxiaowan.github.io/2020/03/29/Spring%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
    <id>http://luxiaowan.github.io/2020/03/29/Spring解决循环依赖/</id>
    <published>2020-03-29T15:35:00.000Z</published>
    <updated>2020-04-07T15:44:04.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是循环依赖"><a class="markdownIt-Anchor" href="#什么是循环依赖"></a> 什么是循环依赖</h3><p>循环依赖的关键点在循环，为了直观一点，我们看个图</p><img src="/images/image-20200405224151194.png" alt="image-20200405224151194" style="zoom:50%;"><p>从图中我们看到，要想实例化类A，必须先要实例化类B，但是在实例化B之前也必须先实例化C，可想要实例化C，就要先实例化A，喏，死循环了，三个类相互引用又相互等待。</p><h3 id="循环依赖如何产生的"><a class="markdownIt-Anchor" href="#循环依赖如何产生的"></a> 循环依赖如何产生的</h3><p>循环依赖的产生可能有多种情况：</p><ol><li>A的构造器中依赖了B的实例，B的构造器中依赖了A的实例</li><li>A的构造器中依赖了B的实例，B的属性或者setter依赖了A的实例</li><li>A的属性或setter依赖了B的实例，B的属性或者setter依赖了A的实例</li></ol><h3 id="spring-ioc解决办法"><a class="markdownIt-Anchor" href="#spring-ioc解决办法"></a> Spring IOC解决办法</h3><p>Spring并不是能解决所有的循环依赖情况，比如上方的情况1是无法解决的，并且如果Bean的scope是protype的，也无法解决。</p><ol><li><p>scope=prototype</p><p>此种情况无法解决循环依赖，因为如果获取bean实例的时候，如果类正在创建中，则会抛出异常，详情查看<code>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line"><span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line"><span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从注释我们就可以看出：如果创建bean实例失败则多半因为存在循环依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return whether the specified prototype bean is currently in creation</span></span><br><span class="line"><span class="comment"> * (within the current thread).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isPrototypeCurrentlyInCreation</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">  Object curVal = <span class="keyword">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class="line">  <span class="keyword">return</span> (curVal != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">          (curVal.equals(beanName) || (curVal <span class="keyword">instanceof</span> Set &amp;&amp; ((Set&lt;?&gt;) curVal).contains(beanName))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>prototype类型的Bean在创建之前会进行标记和创建之后进行解标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">  <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">  Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    beforePrototypeCreation(beanName);</span><br><span class="line">    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    afterPrototypeCreation(beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforePrototypeCreation</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">  Object curVal = <span class="keyword">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class="line">  <span class="keyword">if</span> (curVal == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.prototypesCurrentlyInCreation.set(beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterPrototypeCreation</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">  Object curVal = <span class="keyword">this</span>.prototypesCurrentlyInCreation.get();</span><br><span class="line">  <span class="keyword">if</span> (curVal <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    <span class="keyword">this</span>.prototypesCurrentlyInCreation.remove();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>scope=singleton</p><p>Spring通过三级缓存的模式解决非构造器注入引起的循环依赖，详情查看<code>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object sharedInstance = getSingleton(beanName);</span><br></pre></td></tr></table></figure><p>我们看下getSingleton方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 第一级缓存获取</span></span><br><span class="line">  Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">  <span class="comment">// 第一级未找到缓存且bean处于创建中(例如A定义的构造函数依赖了B对象，得先去创建B对象，或者在populatebean过程中依赖了B对象，得先去创建B对象，此时A处于创建中)</span></span><br><span class="line">  <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">      singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">      <span class="comment">// 第二级未找到缓存并允许循环依赖即从工厂类获取对象</span></span><br><span class="line">      <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">        ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">          singletonObject = singletonFactory.getObject();</span><br><span class="line">          <span class="comment">// 将三级缓存移入二级缓存</span></span><br><span class="line">          <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">          <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> singletonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在singleton方法中出现了三个属性：<code>singletonObjects</code>,<code>earlySingletonObjects</code>,<code>singletonFactories</code>，这也就是上面说的三级缓存，这个方法的逻辑是先获取一级缓存，若一级缓存中不存在，则获取第二级缓存，二级缓存若也不存在则获取三级缓存，若三级缓存都不存在，则在getBean方法中当成prototype处理。那么这三级缓存中主要存的是什么东西呢？</p><ul><li>一级缓存：已经初始化完成的bean对象Cache</li><li>二级缓存：提前曝光的bean对象Cache</li><li>三级缓存：ObjectFactory工厂bean缓存, 存储实例化后的bean factory</li></ul><p>Spring创建一个Bean的实例大致经过三个步骤：</p><ol><li>createBeanInstance：调用Bean的构造器进行实例化，调用构造器并未填充属性</li><li>populateBean：填充属性，也就是setter所有的property</li><li>initializeBean：初始化Bean，会调用指定的init方法，或者afterPropertiesSet方法，这个时候类属性已经注入完成了</li></ol><h4 id="三级缓存何时设置的"><a class="markdownIt-Anchor" href="#三级缓存何时设置的"></a> 三级缓存何时设置的</h4><p>三级缓存的设置点是什么时候？我们来看下类的创建过程<code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. Instantiate the bean.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 创建三级缓存</span></span><br><span class="line">  <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                                    isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">  <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">                   <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取Bean的ObjectFactory并放入三级缓存</span></span><br><span class="line">    addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">  Object exposedObject = bean;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 填充属性</span></span><br><span class="line">    populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">    <span class="comment">// 初始化Bean</span></span><br><span class="line">    exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">        mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到第三级缓存是在createBeanInstance方法之后就被设置，这个时候Bean的对象已经被创建出来了，只不过是还不够完美，只是一个壳，但是在容器中已经可以根据对象引用被认出来了；</li><li>第二级缓存是在getSingleton方法之后，若第三级缓存中已经存在，则将对象从三级缓存中转移到二级缓存中；</li><li>完全初始化之后将自己放入到一级缓存singletonObjects中</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是循环依赖&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是循环依赖&quot;&gt;&lt;/a&gt; 什么是循环依赖&lt;/h3&gt;
&lt;p&gt;循环依赖的关键点在循环，为了直观一点，我们看个图&lt;/p&gt;
&lt;img src=&quot;/images/image-2020
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://luxiaowan.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>TCP三次握手和四次挥手</title>
    <link href="http://luxiaowan.github.io/2020/03/29/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://luxiaowan.github.io/2020/03/29/TCP三次握手和四次挥手/</id>
    <published>2020-03-29T12:20:00.000Z</published>
    <updated>2020-03-29T15:32:38.853Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>传输控制协议(Transmission Control Protocol，简称TCP)是一种面向连接的、可靠的、基于字节流的传输层通信协议，应用层向TCP层发送用于网间传输的用8位字节表示的数据流，TCP将数据流做分隔处理后透传给IP层，然后由IP层将数据传输给目标端TCP层。</p><p>TCP为保证不发生丢包，会对所有的包进行编号，接收端依据编号按序接收，全部数据包接收完成后按序号进行合并，这里可能会发生粘包、拆包的问题(暂不介绍)。接收端在每次接收到数据包的时候都会返回给发送端一个确认信息(ACK)，若发送端在一定时间内未接收到ACK信息，则主观认为数据发送失败或数据丢失，会重新发送丢失序号的包。</p><h3 id="三次握手"><a class="markdownIt-Anchor" href="#三次握手"></a> 三次握手</h3><p>TCP在发送数据之前，需要先建立连接，客户端主动，TCP使用三次握手的方式建立连接，三次握手的意思就是客户端和服务端进行三次通信，三次握手的目的是为了确认通信双方的发送和接收能力是否正常。主要过程：</p><img src="/images/tcp_connect.png" alt="tcp_connect" style="zoom:67%;"><ul><li><p>第一次握手：客户端：服务端，我想要向你发送数据</p><ul><li>客户端向服务端发送一个SYN包，并指明客户端的初始化序列号ISN，随后客户端进入SYN_SEND状态。</li><li>同部位SYN=1，初始序列号seq=x，此报文不能携带任何的数据，却会消耗掉一个序列号</li></ul></li><li><p>第二次握手：服务端：客户端，我准备好了，你可以把数据发过来了</p><ul><li>服务端接收到客户端发送的消息，需要返回一个SYN/ACK包进行响应，否则客户端会以为消息跑丢了造成重发，SYN/ACK以服务端的为准，SYN=1, ACK=x+1</li><li>服务端响应消息也属于是一次通信，所以服务端需要将自己的序列号放入到报文中携带给客户端，初始化序列号seq=y</li><li>总的响应报文：SYN=1 ACK=x+1 seq=y</li><li>服务端进入SYN_RECV状态</li></ul></li><li><p>第三次握手：客户端：服务端，我知道了，敌人还有三秒到达战场</p><ul><li>客户端接收到服务端的响应之后，要告诉服务端老子收到你的响应了，不要以为消息丢了，等着接收数据吧您嘞</li><li>这次握手等于是服务端响应的翻版，报文包括ACK=y+1 seq=x+1</li><li>客户端和服务端均进入ESTABLISHED（TCP连接成功）状态</li></ul></li></ul><blockquote><p>为什么使用三次握手，两次是否可以？</p><p>*** 之所以进行三次握手，是保证客户端和服务端均可以进行一次发送、接收和发送接收反馈，目的是让客户端和服务端各自确认自己的发送和接收能力都正常**</p></blockquote><h3 id="四次挥手"><a class="markdownIt-Anchor" href="#四次挥手"></a> 四次挥手</h3><p>TCP发送完数据之后，需要将连接断开，当然断开连接的也需要客户端主动发起，因为数据是否发送完毕只有发送者知道。断开连接需要通过四次挥手(也可以叫四次握手)来保证合理性。</p><img src="/images/tcp_disconnect.png" alt="tcp_disconnect" style="zoom:67%;"><ul><li>第一次挥手：客户端：我数据发送完了，可以断开连接了，我先进入准备断开状态<ul><li>客户端发送完数据之后，向服务端发送断开请求报文，FIN=1 seq=u</li><li>客户端进入FIN-WAIT-1状态，等待服务端的响应</li><li>表示客户端没有数据要发给服务端了</li></ul></li><li>第二次挥手：服务端：我收到了，我同意你的请求，但我要看下我是否还有数据尚在发送，你等会<ul><li>服务端接收到客户端的断开请求之后，根据序列号进行反馈，ACK=1 seq=v ack=u+1</li><li>服务端反馈之后进入CLOSE-WAIT状态，客户端接收到反馈之后进入FIN-WAIT-2状态，等待服务端的确认断开请求</li></ul></li><li>第三次挥手：服务端：我的数据也都发完了，可以断开了<ul><li>服务端再处理完自己的事情之后，向客户端发送确认断开报文，FIN=1 ACK=1 seq=w ack=u+1</li><li>这里的ack=u+1，发现和第二次挥手时候的ack一模一样，这也就是和客户端的断开请求对应起来，否则把别的给断开了岂不是很尴尬</li><li>服务端进入LAST-ACK状态，等待客户端的回应</li></ul></li><li>第四次挥手：客户端：我知道了，断开<ul><li>客户端接收到确认断开报文后，向服务端反馈断开报文，ACK=1 seq=u+1 ack=w+1</li><li>服务端接收到反馈后关闭连接</li><li>客户端等待2MSL后关闭连接</li></ul></li></ul><p>看一个官方描述图片：</p><img src="/images/tcp_disconnect.jpg" alt="tcp_disconnect" style="zoom:75%;"><h5 id="为什么要等待2msl"><a class="markdownIt-Anchor" href="#为什么要等待2msl"></a> 为什么要等待2MSL</h5><ul><li><p>目的是防止ACK消息丢失，服务端重发消息后可以再次接收并反馈；</p></li><li><p>如果在第三次挥手反馈后客户端立刻关闭，如果反馈报文丢失，那么服务端可能就会一直处于重发第三次挥手的报文中，服务端将无法正常进入关闭状态</p></li><li><p>如果第四次挥手的报文丢失，服务端会再次发送确认关闭消息，客户端重新等待2MSL</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;传输控制协议(Transmission Control Protocol，简称TCP)是一种面向连接的、可靠的、基于字节流的传输层通信协议，应用
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://luxiaowan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis哨兵简介</title>
    <link href="http://luxiaowan.github.io/2020/03/29/Redis%E5%93%A8%E5%85%B5%E7%AE%80%E4%BB%8B/"/>
    <id>http://luxiaowan.github.io/2020/03/29/Redis哨兵简介/</id>
    <published>2020-03-28T17:05:00.000Z</published>
    <updated>2020-03-28T19:20:52.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>Redis Sentinel是Redis官方建议的高可用(HA)解决方案，在我们搭建Redis集群时，Redis本身并未集成主备切换功能，sentinel本身是独立运行的，能够监控多个Redis集群，发现master宕机后能够自动切换，选举一个slave成为新的master，当原master恢复之后，sentinel会自动将其作为slave加入到集群中，整个过程不需要人工参与，完全自动化。</p><h3 id="主要介绍"><a class="markdownIt-Anchor" href="#主要介绍"></a> 主要介绍</h3><ol><li><p>sentinel主要功能</p><ul><li>定期监控Redis服务是否运行正常</li><li>定期监控其他sentinel服务是否正常</li><li>能够自动切换master节点</li><li>sentinel节点不存储数据</li></ul></li><li><p>sentinel集群</p><p>这个不难理解，如果我们用一个非高可用的sentinel去实现Redis的高可用，明显是不科学的，当这一台sentinel宕机之后，Redis显然无法继续保持它的高可用，所以我们在部署sentinel的时候也会采用集群的方式</p><blockquote><p>优势：</p><p>​即使有sentinel服务宕机，只要还有一台sentinel运行正常，就可以使Redis继续保持高可用</p></blockquote></li><li><p>sentinel版本问题</p><p>sentinel在Redis2.6版本中引入的，当时是sentinel 1，貌似有蛮多问题，毕竟初版</p><p>在Redis2.8版本中升级到sentinel 2，之后就非常稳定了</p><p>不过现在Redis已经发展了很久，版本也越来越高，sentinel已经非常值得信赖了</p></li><li><p>sentinel中的定时任务</p><ul><li>每隔10秒向各个Redis服务器(master和slave节点)发送INFO命令，根据回应获取master和slave信息，通过master的回复可以获取到新增的slave节点</li><li>每隔02秒向Redis的master服务器发送命令(hello消息)，用于发现和监视其他sentinel，sentinel之间的监控不在额外创建订阅</li><li>每隔01秒向Redis和sentinel所有服务发送PING消息(sentinel本身的ip、端口、id等内容)，通过回复PONG判断服务是否在线</li></ul></li><li><p>下线判断</p><ul><li>主观下线：当前sentinel断定master下线</li><li>客观下线：满足sentinel配置文件中quorum数量的sentinel均断定master下线</li></ul></li><li><p>配置文件解读</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel运行的端口，默认为26379</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26377      </span></span><br><span class="line"></span><br><span class="line"><span class="attr">dir</span> <span class="string">"/private/tmp"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logfile</span> <span class="string">"/var/log/redis/sentinel_26377.log"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以守护进程执行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 守护进程运行的pid保存文件</span></span><br><span class="line"><span class="attr">pidfile</span> <span class="string">"/var/run/redis-sentinel.pid"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式：sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line"><span class="comment"># 该行的意思是：&lt;master-name&gt;：自定义</span></span><br><span class="line"><span class="comment">#&lt;ip&gt;：master主机的IP</span></span><br><span class="line"><span class="comment">#&lt;redis-port&gt;：master的端口</span></span><br><span class="line"><span class="comment">#&lt;quorum&gt;：表示在sentinel集群中，使master由主观下线变为客观下线的sentinel数量。</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor cc_master 127.0.0.1 6379 2  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式：sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="comment"># sentinel会向master发送心跳PING来确认master是否存活，如果master在&lt;milliseconds&gt;时间内回应的不是PONG，那么这个sentinel会主观地认为这个master下线了。&lt;milliseconds&gt;的单位是毫秒，默认30秒。</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">down-after-milliseconds cc_master 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式：sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="comment"># failover过期时间，当failover开始后，在此时间内仍然没有触发任何failover操作，当前sentinel将会认为此次failoer失败。默认180秒，即3分钟。</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">failover-timeout cc_master 60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span></span><br><span class="line"><span class="comment"># 在发生failover主备切换时，这个选项指定了最多可以有多少个slave同时对新的master进行同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越多的slave因为replication而不可用。可以通过将这个值设为1来保证每次只有一个slave处于不能处理命令请求的状态。</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">parallel-syncs cc_master 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式：sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line"><span class="comment"># sentinel连接的master节点的登录密码</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">auth-pass cc_master redis</span></span><br></pre></td></tr></table></figure></li><li><p>故障转移</p><ul><li>sentinel使用Raft投票选举出一个leader去执行故障转移<ul><li>每一个将master标记为主观下线的sentinel节点发起投票</li><li>其他sentinel节点收到投票后，若尚未参与投票(也就是尚未投票给其他sentinel)，则同意，否则拒绝</li><li>最终收到过半同意的sentinel节点作为leader</li><li>若有两个sentinel收到了过半投票，那么就再重新选举</li></ul></li><li>选举新的master节点<ul><li>选择replica-priority配置数字最高的slave节点为master，默认为100</li><li>若replica-priority相同，则选择偏移量最大的slave节点，偏移量是指slave从master同步的进度，偏移量越大说明数据越完整，可以通过Redis的info命令查看(slave_repl_offset)当前slave的偏移量</li><li>若偏移量相同，则选择最先启动的slave作为master</li><li>更改master后，通知其他slave节点同步为新的master节点的slave节点</li><li>原master节点恢复之后自动加入到集群中，成为新master的slave节点</li></ul></li></ul></li></ol><h3 id="实战"><a class="markdownIt-Anchor" href="#实战"></a> 实战</h3><p>在本机上启动3个Redis实例，采用1主2从的模式，以下只记录redis.conf和sentinel.conf中关键内容</p><ol><li><p>redis.conf</p><ul><li><p>redis-master.conf配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br></pre></td></tr></table></figure></li><li><p>redis-slave1.conf配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">63791</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式：replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"><span class="comment"># 从节点归属的master节点</span></span><br><span class="line"><span class="attr">replicaof</span> <span class="string">127.0.0.1 6379</span></span><br></pre></td></tr></table></figure></li><li><p>redis-slave2.conf配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">63792</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式：replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"><span class="comment"># 从节点归属的master节点</span></span><br><span class="line"><span class="attr">replicaof</span> <span class="string">127.0.0.1 6379</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>sentinel.conf</p><ul><li><p>sentinel0.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">myid 842c9102c48eb0cedeb06fe55e7d2258595ac267</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控master</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor cc_master 127.0.0.1 6379 2</span></span><br></pre></td></tr></table></figure></li><li><p>sentinel1.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26378</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">myid 842c9102c48eb0cedeb06fe55e7d2258595ac266</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控master</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor cc_master 127.0.0.1 6379 2</span></span><br></pre></td></tr></table></figure></li><li><p>sentinel2.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">myid 842c9102c48eb0cedeb06fe55e7d2258595ac265</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控master</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor cc_master 127.0.0.1 6379 2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动</p><ol><li><p>启动sentinel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel ~/Documents/develop_tools/tools/redis-5.0.5/sentinel0.conf</span><br><span class="line"></span><br><span class="line">redis-sentinel ~/Documents/develop_tools/tools/redis-5.0.5/sentinel1.conf</span><br><span class="line"></span><br><span class="line">redis-sentinel ~/Documents/develop_tools/tools/redis-5.0.5/sentinel2.conf</span><br></pre></td></tr></table></figure></li><li><p>启动Redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server ~/Documents/develop_tools/tools/redis-5.0.5/redis-master.conf</span><br><span class="line"></span><br><span class="line">redis-server ~/Documents/develop_tools/tools/redis-5.0.5/redis-slave1.conf</span><br><span class="line"></span><br><span class="line">redis-server ~/Documents/develop_tools/tools/redis-5.0.5/redis-slave2.conf</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="redis通过info查看信息"><a class="markdownIt-Anchor" href="#redis通过info查看信息"></a> Redis通过info查看信息</h3><p>127.0.0.1:6379&gt;info all</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Server服务器信息</span></span><br><span class="line"><span class="attr">redis_version</span>:<span class="string">5.0.5# Redis 服务器版本</span></span><br><span class="line"><span class="attr">redis_git_sha1</span>:<span class="string">00000000 # Git SHA1</span></span><br><span class="line"><span class="attr">redis_git_dirty</span>:<span class="string">0# Git dirty flag</span></span><br><span class="line"><span class="attr">redis_build_id</span>:<span class="string">6c6e38af7cea0726# Redis构建ID</span></span><br><span class="line"><span class="attr">redis_mode</span>:<span class="string">standalone# Redis运行模式</span></span><br><span class="line"><span class="attr">os</span>:<span class="string">Darwin 19.3.0 x86_64# 运行环境操作系统版本</span></span><br><span class="line"><span class="attr">arch_bits</span>:<span class="string">64# 架构（32 或 64 位）</span></span><br><span class="line"><span class="attr">multiplexing_api</span>:<span class="string">kqueue# Redis 所使用的事件处理机制</span></span><br><span class="line"><span class="attr">atomicvar_api</span>:<span class="string">atomic-builtin</span></span><br><span class="line"><span class="attr">gcc_version</span>:<span class="string">4.2.1# 编译的GCC版本</span></span><br><span class="line"><span class="attr">process_id</span>:<span class="string">61985# 服务器进程的 PID</span></span><br><span class="line"><span class="attr">run_id</span>:<span class="string">433b78ec513c8b782f3a46ba6b4ade1f12439aca# Redis 服务器的随机标识符(用于Sentinel和集群)</span></span><br><span class="line"><span class="attr">tcp_port</span>:<span class="string">6379# Redis端口</span></span><br><span class="line"><span class="attr">uptime_in_seconds</span>:<span class="string">108# Redis运行时长，秒</span></span><br><span class="line"><span class="attr">uptime_in_days</span>:<span class="string">0# Redis运行市场，天</span></span><br><span class="line"><span class="attr">hz</span>:<span class="string">10</span></span><br><span class="line"><span class="attr">configured_hz</span>:<span class="string">10</span></span><br><span class="line"><span class="attr">lru_clock</span>:<span class="string">8363059# 以分钟为单位进行自增的时钟，用于 LRU 管理</span></span><br><span class="line"><span class="attr">executable</span>:<span class="string">/Users/chuan/redis-server# 运行命令</span></span><br><span class="line"><span class="attr">config_file</span>:<span class="string"># 启动使用的配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Clients</span></span><br><span class="line"><span class="attr">connected_clients</span>:<span class="string">7# 已连接客户端的数量</span></span><br><span class="line"><span class="attr">client_recent_max_input_buffer</span>:<span class="string">2# 当前连接的客户端当中，最长的输出列表</span></span><br><span class="line"><span class="attr">client_recent_max_output_buffer</span>:<span class="string">0# 当前连接的客户端当中，最大输入缓存</span></span><br><span class="line"><span class="attr">blocked_clients</span>:<span class="string">0# 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Memory (太多了，不做解释了)</span></span><br><span class="line"><span class="attr">used_memory</span>:<span class="string">2235920# 由 Redis 分配器分配的内存总量，以字节（byte）为单位</span></span><br><span class="line"><span class="attr">used_memory_human</span>:<span class="string">2.13M# 以可读的格式返回 Redis 分配的内存总量</span></span><br><span class="line"><span class="attr">used_memory_rss</span>:<span class="string">3153920# 从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和top 、 ps 等命令的输出一致。</span></span><br><span class="line"><span class="attr">used_memory_rss_human</span>:<span class="string">3.01M # 以可读的格式返回rss</span></span><br><span class="line"><span class="attr">used_memory_peak</span>:<span class="string">2317840# Redis 的内存消耗峰值（以字节为单位）</span></span><br><span class="line"><span class="attr">used_memory_peak_human</span>:<span class="string">2.21M</span></span><br><span class="line"><span class="attr">used_memory_peak_perc</span>:<span class="string">96.47%</span></span><br><span class="line"><span class="attr">used_memory_overhead</span>:<span class="string">2221526</span></span><br><span class="line"><span class="attr">used_memory_startup</span>:<span class="string">987776</span></span><br><span class="line"><span class="attr">used_memory_dataset</span>:<span class="string">14394</span></span><br><span class="line"><span class="attr">used_memory_dataset_perc</span>:<span class="string">1.15%</span></span><br><span class="line"><span class="attr">allocator_allocated</span>:<span class="string">2271808</span></span><br><span class="line"><span class="attr">allocator_active</span>:<span class="string">3116032</span></span><br><span class="line"><span class="attr">allocator_resident</span>:<span class="string">3116032</span></span><br><span class="line"><span class="attr">total_system_memory</span>:<span class="string">17179869184</span></span><br><span class="line"><span class="attr">total_system_memory_human</span>:<span class="string">16.00G</span></span><br><span class="line"><span class="attr">used_memory_lua</span>:<span class="string">37888</span></span><br><span class="line"><span class="attr">used_memory_lua_human</span>:<span class="string">37.00K</span></span><br><span class="line"><span class="attr">used_memory_scripts</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">used_memory_scripts_human</span>:<span class="string">0B</span></span><br><span class="line"><span class="attr">number_of_cached_scripts</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">maxmemory</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">maxmemory_human</span>:<span class="string">0B</span></span><br><span class="line"><span class="attr">maxmemory_policy</span>:<span class="string">noeviction</span></span><br><span class="line"><span class="attr">allocator_frag_ratio</span>:<span class="string">1.37</span></span><br><span class="line"><span class="attr">allocator_frag_bytes</span>:<span class="string">844224</span></span><br><span class="line"><span class="attr">allocator_rss_ratio</span>:<span class="string">1.00</span></span><br><span class="line"><span class="attr">allocator_rss_bytes</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">rss_overhead_ratio</span>:<span class="string">1.01</span></span><br><span class="line"><span class="attr">rss_overhead_bytes</span>:<span class="string">37888</span></span><br><span class="line"><span class="attr">mem_fragmentation_ratio</span>:<span class="string">1.39</span></span><br><span class="line"><span class="attr">mem_fragmentation_bytes</span>:<span class="string">882112</span></span><br><span class="line"><span class="attr">mem_not_counted_for_evict</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">mem_replication_backlog</span>:<span class="string">1048576</span></span><br><span class="line"><span class="attr">mem_clients_slaves</span>:<span class="string">33844</span></span><br><span class="line"><span class="attr">mem_clients_normal</span>:<span class="string">151226</span></span><br><span class="line"><span class="attr">mem_aof_buffer</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">mem_allocator</span>:<span class="string">libc</span></span><br><span class="line"><span class="attr">active_defrag_running</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">lazyfree_pending_objects</span>:<span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Persistence</span></span><br><span class="line"><span class="attr">loading</span>:<span class="string">0# 服务器是否正在载入持久化文件</span></span><br><span class="line"><span class="attr">rdb_changes_since_last_save</span>:<span class="string">1# 距离最后一次成功创建持久化文件之后，改变了多少个键值</span></span><br><span class="line"><span class="attr">rdb_bgsave_in_progress</span>:<span class="string">0# 服务器是否正在创建RDB文件</span></span><br><span class="line"><span class="attr">rdb_last_save_time</span>:<span class="string">1585421263# 最近一次成功创建RDB文件的UNIX时间</span></span><br><span class="line"><span class="attr">rdb_last_bgsave_status</span>:<span class="string">ok# 最后一次创建RDB文件的结果是成功还是失败</span></span><br><span class="line"><span class="attr">rdb_last_bgsave_time_sec</span>:<span class="string">0# 最后一次创建RDB文件耗费的秒数</span></span><br><span class="line"><span class="attr">rdb_current_bgsave_time_sec</span>:<span class="string">-1# 记录当前创建RDB操作已经耗费了多长时间（单位为秒）</span></span><br><span class="line"><span class="attr">rdb_last_cow_size</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">aof_enabled</span>:<span class="string">0# AOF是否处于打开状态</span></span><br><span class="line"><span class="attr">aof_rewrite_in_progress</span>:<span class="string">0# 服务器是否正在创建AOF文件</span></span><br><span class="line"><span class="attr">aof_rewrite_scheduled</span>:<span class="string">0# 是否需要执行预约的AOF重写操作</span></span><br><span class="line"><span class="attr">aof_last_rewrite_time_sec</span>:<span class="string">-1# 最后一次重启AOF的秒数</span></span><br><span class="line"><span class="attr">aof_current_rewrite_time_sec</span>:<span class="string">-1# 记录当前正在重写AOF的秒数</span></span><br><span class="line"><span class="attr">aof_last_bgrewrite_status</span>:<span class="string">ok# 最后一次重写AOF文件的结果</span></span><br><span class="line"><span class="attr">aof_last_write_status</span>:<span class="string">ok# 最后一次写入结果</span></span><br><span class="line"><span class="attr">aof_last_cow_size</span>:<span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Stats(可以不做了解)</span></span><br><span class="line"><span class="attr">total_connections_received</span>:<span class="string">9</span></span><br><span class="line"><span class="attr">total_commands_processed</span>:<span class="string">720</span></span><br><span class="line"><span class="attr">instantaneous_ops_per_sec</span>:<span class="string">6</span></span><br><span class="line"><span class="attr">total_net_input_bytes</span>:<span class="string">34197</span></span><br><span class="line"><span class="attr">total_net_output_bytes</span>:<span class="string">229238</span></span><br><span class="line"><span class="attr">instantaneous_input_kbps</span>:<span class="string">0.34</span></span><br><span class="line"><span class="attr">instantaneous_output_kbps</span>:<span class="string">1.19</span></span><br><span class="line"><span class="attr">rejected_connections</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">sync_full</span>:<span class="string">2# 主从完全同步成功次数</span></span><br><span class="line"><span class="attr">sync_partial_ok</span>:<span class="string">0# 主从部分同步成功次数</span></span><br><span class="line"><span class="attr">sync_partial_err</span>:<span class="string">0# 主从部分同步失败次数</span></span><br><span class="line"><span class="attr">expired_keys</span>:<span class="string">0# 运行以来过期的key的数量</span></span><br><span class="line"><span class="attr">expired_stale_perc</span>:<span class="string">0.00# 过期的比率</span></span><br><span class="line"><span class="attr">expired_time_cap_reached_count</span>:<span class="string">0# 过期计数</span></span><br><span class="line"><span class="attr">evicted_keys</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">keyspace_hits</span>:<span class="string">1</span></span><br><span class="line"><span class="attr">keyspace_misses</span>:<span class="string">1</span></span><br><span class="line"><span class="attr">pubsub_channels</span>:<span class="string">1</span></span><br><span class="line"><span class="attr">pubsub_patterns</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">latest_fork_usec</span>:<span class="string">278</span></span><br><span class="line"><span class="attr">migrate_cached_sockets</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">slave_expires_tracked_keys</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">active_defrag_hits</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">active_defrag_misses</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">active_defrag_key_hits</span>:<span class="string">0</span></span><br><span class="line"><span class="attr">active_defrag_key_misses</span>:<span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Replication（master节点）</span></span><br><span class="line"><span class="attr">role</span>:<span class="string">master# 角色 master和slave</span></span><br><span class="line"><span class="attr">connected_slaves</span>:<span class="string">2# slave节点数</span></span><br><span class="line"><span class="attr">slave0</span>:<span class="string">ip=127.0.0.1,port=63791,state=online,offset=20163,lag=1# 从节点1</span></span><br><span class="line"><span class="attr">slave1</span>:<span class="string">ip=127.0.0.1,port=63792,state=online,offset=20163,lag=0# 从节点2</span></span><br><span class="line"><span class="attr">master_replid</span>:<span class="string">895f219aa1e7ed5ecda50dcb1f77eea9f1ef9c3d# 主实例启动随机字符串</span></span><br><span class="line"><span class="attr">master_replid2</span>:<span class="string">0000000000000000000000000000000000000000# 主实例启动随机字符串2</span></span><br><span class="line"><span class="attr">master_repl_offset</span>:<span class="string">20163# 主从同步偏移量,此值如果和上面的offset相同说明主从一致没延迟，与master_replid可被用来标识主实例复制流中的位置。</span></span><br><span class="line"><span class="attr">second_repl_offset</span>:<span class="string">-1# 主从同步偏移量2,此值如果和上面的offset相同说明主从一致没延迟</span></span><br><span class="line"><span class="attr">repl_backlog_active</span>:<span class="string">1# 复制积压缓冲区是否开启</span></span><br><span class="line"><span class="attr">repl_backlog_size</span>:<span class="string">1048576# 复制积压缓冲大小</span></span><br><span class="line"><span class="attr">repl_backlog_first_byte_offset</span>:<span class="string">1# 复制缓冲区里偏移量的大小</span></span><br><span class="line"><span class="attr">repl_backlog_histlen</span>:<span class="string">20163# 此值等于 master_repl_offset - repl_backlog_first_byte_offset,该值不会超过repl_backlog_size的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Replication（slave节点）</span></span><br><span class="line"><span class="attr">role</span>:<span class="string">slave# 角色 master和slave</span></span><br><span class="line"><span class="attr">master_host</span>:<span class="string">127.0.0.1# master节点IP</span></span><br><span class="line"><span class="attr">master_port</span>:<span class="string">6379# master节点端口</span></span><br><span class="line"><span class="attr">master_link_status</span>:<span class="string">up# master通信</span></span><br><span class="line"><span class="attr">master_last_io_seconds_ago</span>:<span class="string">1# 主库多少秒未发送数据到从库</span></span><br><span class="line"><span class="attr">master_sync_in_progress</span>:<span class="string">0# 从服务器是否在与主服务器进行同步</span></span><br><span class="line"><span class="attr">slave_repl_offset</span>:<span class="string">42262# slave复制偏移量</span></span><br><span class="line"><span class="attr">slave_priority</span>:<span class="string">100# slave优先级</span></span><br><span class="line"><span class="attr">slave_read_only</span>:<span class="string">1# 从库是否设置只读</span></span><br><span class="line"><span class="attr">connected_slaves</span>:<span class="string">0# 连接的slave实例个数</span></span><br><span class="line"><span class="attr">master_replid</span>:<span class="string">895f219aa1e7ed5ecda50dcb1f77eea9f1ef9c3d</span></span><br><span class="line"><span class="attr">master_replid2</span>:<span class="string">0000000000000000000000000000000000000000</span></span><br><span class="line"><span class="attr">master_repl_offset</span>:<span class="string">42262# master偏移量，与slave_repl_offset相同则表示同步完整</span></span><br><span class="line"><span class="attr">second_repl_offset</span>:<span class="string">-1</span></span><br><span class="line"><span class="attr">repl_backlog_active</span>:<span class="string">1# 复制积压缓冲区是否开启</span></span><br><span class="line"><span class="attr">repl_backlog_size</span>:<span class="string">1048576# 复制积压缓冲大小</span></span><br><span class="line"><span class="attr">repl_backlog_first_byte_offset</span>:<span class="string">1# 复制缓冲区里偏移量的大小</span></span><br><span class="line"><span class="attr">repl_backlog_histlen</span>:<span class="string">42262# 此值等于 master_repl_offset - repl_backlog_first_byte_offset,该值不会超过repl_backlog_size的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU</span></span><br><span class="line"><span class="attr">used_cpu_sys</span>:<span class="string">0.104404# 将所有redis主进程在核心态所占用的CPU时求和累计起来</span></span><br><span class="line"><span class="attr">used_cpu_user</span>:<span class="string">0.079472# 将所有redis主进程在用户态所占用的CPU时求和累计起来</span></span><br><span class="line"><span class="attr">used_cpu_sys_children</span>:<span class="string">0.002037# 将后台进程在核心态所占用的CPU时求和累计起来</span></span><br><span class="line"><span class="attr">used_cpu_user_children</span>:<span class="string">0.000648# 将后台进程在用户态所占用的CPU时求和累计起来</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster</span></span><br><span class="line"><span class="attr">cluster_enabled</span>:<span class="string">0# 实例是否启用集群模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Keyspace</span></span><br><span class="line"><span class="attr">db0</span>:<span class="string">keys=1,expires=0,avg_ttl=0# db0的key的数量,以及带有生存期的key的数,平均存活时间</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;Redis Sentinel是Redis官方建议的高可用(HA)解决方案，在我们搭建Redis集群时，Redis本身并未集成主备切换功能，sen
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://luxiaowan.github.io/categories/Redis/"/>
    
    
      <category term="Sentinel" scheme="http://luxiaowan.github.io/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>线程池运行的线程和队列中等待的线程是同一个吗</title>
    <link href="http://luxiaowan.github.io/2020/03/28/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E9%98%9F%E5%88%97%E4%B8%AD%E7%AD%89%E5%BE%85%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%E5%90%97/"/>
    <id>http://luxiaowan.github.io/2020/03/28/线程池运行的线程和队列中等待的线程是同一个吗/</id>
    <published>2020-03-27T16:52:00.000Z</published>
    <updated>2020-03-27T18:42:31.562Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程池"><a class="markdownIt-Anchor" href="#线程池"></a> 线程池</h3><p>在高并发场景下，线程池是会被频繁使用到的，简单介绍下线程池：</p><ul><li><p>线程池基础参数：核心线程数、最大线程数、线程最大存活时间、时间单位、阻塞队列、线程池工厂、拒绝策略</p></li><li><p>创建方式：</p><ul><li>ThreadPoolExecutor类：ThreadPoolExecutor tpe = new ThreadPoolExecutor(1, 1, 0, TimeUtil.SECONDS, new ArrayBlockingQueue(), new DefaultThreadFactory())</li><li>Executors类：<ul><li>newFixedThreadPool(1);</li><li>newSingleThreadExecutor();</li><li>newCachedThreadPool();</li><li>newScheduledThreadPool(1);</li></ul></li><li>等待队列：<ul><li>ArrayBlockingQueue：由数组结构组成的有界阻塞队列</li><li>LinkedBlockingQueue：由链表结构组成的有界阻塞队列</li><li>DelayQueue：使用优先级队列实现的无界阻塞队列</li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列</li><li>SynchronousQueue：不存储元素的阻塞队列</li></ul></li><li>拒绝策略：<ul><li>DiscardPolicy：丢弃被拒绝任务</li><li>DiscardOldestPolicy：丢弃队列头部的任务</li><li>AbortPolicy：抛出RejectedExecutionException</li><li>CallerRunsPolicy：在调用execute方法的线程中运行被拒绝的任务</li></ul></li></ul></li><li><p>工作原理：</p><p><img src="/images/tpe-process.png" alt="tpe-process"></p></li></ul><h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3><ul><li><p>线程池创建过程</p><ol><li><p>创建语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor pools = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, TimeUtil.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue(), <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">  核心线程数：<span class="number">5</span></span><br><span class="line">  最大线程数：<span class="number">10</span></span><br><span class="line">  非核心线程最大存活时间：<span class="number">10</span>秒</span><br><span class="line">  阻塞队列：LinkedBlockingQueue</span><br><span class="line">  线程池工厂：DefaultThreadFactory</span><br><span class="line">  拒绝策略：AbortPolicy</span><br></pre></td></tr></table></figure></li><li><p>在线程池真正运行之前，核心线程尚未创建，因为默认是在实际使用的时候才会去创建，但是如果我们想要在线程池创建的时候就初始化核心线程，可以调用ThreadPoolExecutor的实例方法<code>prestartAllCoreThreads()</code>，如果我们想要让核心线程在空闲时可以过期，那么我们可以调用ThreadPoolExecutor的实例方法<code>allowCoreThreadTimeOut(boolean value)</code>来设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置核心线程是否允许过期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allowCoreThreadTimeOut</span><span class="params">(<span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 若value为true，但是线程最大存活时间不大于0，那么则抛异常</span></span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; keepAliveTime &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Core threads must have nonzero keep alive times"</span>);</span><br><span class="line">  <span class="comment">// 如果设置的新值和当前值不同，则执行计划</span></span><br><span class="line">  <span class="keyword">if</span> (value != allowCoreThreadTimeOut) &#123;</span><br><span class="line">    allowCoreThreadTimeOut = value;</span><br><span class="line">    <span class="comment">// 若value为true，则终止线程池内的所有空闲Worker</span></span><br><span class="line">    <span class="keyword">if</span> (value)</span><br><span class="line">      interruptIdleWorkers();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化核心线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">prestartAllCoreThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 循环创建工作线程Worker</span></span><br><span class="line">  <span class="keyword">while</span> (addWorker(<span class="keyword">null</span>, <span class="keyword">true</span>))</span><br><span class="line">    ++n;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建线程Worker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">  retry:<span class="comment">// goto语法</span></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;<span class="comment">// 无限循环，循环体内控制退出</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">    <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; !(rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span> &amp;&amp; !workQueue.isEmpty()))</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">int</span> wc = workerCountOf(c);<span class="comment">// 当前线程数</span></span><br><span class="line">      <span class="comment">// 校验当前正在执行的线程数是否超过了2^29 - 1，或者根据创建的是否为核心线程来与核心线程数和最大线程数做校验，如果已经超过了相关的值，则返回false拒绝创建</span></span><br><span class="line">      <span class="keyword">if</span> (wc &gt;= CAPACITY || wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">// 改变当前运行的线程数，这里使用的CAS来保证线程安全，设置成功则跳出最外层循环</span></span><br><span class="line">      <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">        <span class="keyword">break</span> retry;</span><br><span class="line">      c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">      <span class="comment">// 当前线程池状态和方法最初的对比，若不等，则重新执行for循环体</span></span><br><span class="line">      <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">        <span class="keyword">continue</span> retry;</span><br><span class="line">      <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">  Worker w = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建Worker线程实例</span></span><br><span class="line">    w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">    <span class="comment">// Worker实例的属性，在Worker构造器中通过getThreadFactory().newThread(this);来创建</span></span><br><span class="line">    <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 加锁，保证线程安全</span></span><br><span class="line">      <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">      mainLock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">        <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">        <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验rs是否为RUNNING，或者停止且队列中无任务</span></span><br><span class="line">        <span class="keyword">if</span> (rs &lt; SHUTDOWN || (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">          <span class="comment">// 将新创建的Worker实例放入HashSet集合中</span></span><br><span class="line">          workers.add(w);</span><br><span class="line">          <span class="keyword">int</span> s = workers.size();</span><br><span class="line">          <span class="comment">// 更新最大线程运行数</span></span><br><span class="line">          <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">            largestPoolSize = s;</span><br><span class="line">          workerAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 工作线程创建成功后，调用线程的start()方法开启线程</span></span><br><span class="line">      <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">        t.start();<span class="comment">// tag-cc307</span></span><br><span class="line">        workerStarted = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 创建失败的话，则处理失败计划</span></span><br><span class="line">    <span class="keyword">if</span> (!workerStarted)</span><br><span class="line">      addWorkerFailed(w);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由addWorker方法我们可以看出，线程池的核心执行器是Worker内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Worker类定义</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">--</span></span><br><span class="line"><span class="class">  <span class="title">final</span>修饰：不可被扩展</span></span><br><span class="line"><span class="class">  继承自<span class="title">AQS</span>：保证线程运行的隔离性，线程池的线程安全核心</span></span><br><span class="line"><span class="class">  实现自<span class="title">Runnable</span>，所以<span class="title">Worker</span>也是一个线程类</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">-- 构造器</span></span><br><span class="line"><span class="class">  <span class="title">Worker</span>(<span class="title">Runnable</span> <span class="title">firstTask</span>) </span>&#123;</span><br><span class="line">    setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">    <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">  <span class="comment">// 使用线程池工厂创建新线程，并将创建的线程赋值给实例属性thread，也就是在我们调用了thread的start()方法之后，会运行Worker类中的run()方法</span></span><br><span class="line">    <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>看到这里，就应该去看Worker类中的run方法了，我们看到在run方法中调用了runWorker方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心关键方法，final修饰，不允许被overload和override</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">  Thread wt = Thread.currentThread();</span><br><span class="line">  <span class="comment">// 全文搜索tag-cc307</span></span><br><span class="line">  Runnable task = w.firstTask;</span><br><span class="line">  w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">// 加锁前先释放锁，查看Worker中的tryRelease方法</span></span><br><span class="line">  w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">  <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 无限循环，这里的无限循环的实现方法主要在getTask()方法中，getTask()是从阻塞队列中获取等待的任务，这里我们可以看到阻塞队列中存储的是一个个Runnable实例</span></span><br><span class="line">    <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 线程加锁</span></span><br><span class="line">      w.lock();</span><br><span class="line">      <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">      <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">      <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">      <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">      <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">           (Thread.interrupted() &amp;&amp;</span><br><span class="line">            runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">          !wt.isInterrupted())</span><br><span class="line">        wt.interrupt();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行前计划</span></span><br><span class="line">        beforeExecute(wt, task);</span><br><span class="line">        Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 直接调用任务的run方法，这里其实就是将队列中Runnable实例当成普通的非线程对象，我们都知道直接调用线程的run方法会以普通方法的形式去执行，这里之所以这样写，是因为我们当前已经处于一个线程中了，没必要再去启用一个线程去执行任务，否则线程池就没有存在的必要了</span></span><br><span class="line">          task.run();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">          thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">          thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">          thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          afterExecute(task, thrown);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        task = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 记录线程Worker的成功任务数</span></span><br><span class="line">        w.completedTasks++;</span><br><span class="line">        w.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    processWorkerExit(w, completedAbruptly);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取队列中的任务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">    <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">      decrementWorkerCount();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心：判断是否允许核心线程过期 或 当前工作线程数是否超过了核心线程数，timed决定了是否回收核心线程</span></span><br><span class="line">    <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">        &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 若需要销毁工作线程，则使用poll方法使阻塞队列消失</span></span><br><span class="line">      <span class="comment">// 否则通过take方法继续阻塞，直到队列中有新数据</span></span><br><span class="line">      Runnable r = timed ?</span><br><span class="line">        workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">      workQueue.take();</span><br><span class="line">      <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">      timedOut = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">      timedOut = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>从以上的内容中我们可以看出来：线程池运行的线程和队列中等待的线程不是同一个，线程池中实际运行的线程是Worker实例</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线程池&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#线程池&quot;&gt;&lt;/a&gt; 线程池&lt;/h3&gt;
&lt;p&gt;在高并发场景下，线程池是会被频繁使用到的，简单介绍下线程池：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;线程池基础参数：核心线程数、最大线程数、线
      
    
    </summary>
    
    
      <category term="Java" scheme="http://luxiaowan.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
