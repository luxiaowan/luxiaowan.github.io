<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>串一串</title>
  
  <subtitle>断舍离</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chuanyichuan.github.io/"/>
  <updated>2020-12-03T16:12:13.008Z</updated>
  <id>http://chuanyichuan.github.io/</id>
  
  <author>
    <name>cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL Cluster安装</title>
    <link href="http://chuanyichuan.github.io/2020/12/04/MySQL%20Cluster%E5%AE%89%E8%A3%85/"/>
    <id>http://chuanyichuan.github.io/2020/12/04/MySQL Cluster安装/</id>
    <published>2020-12-03T16:00:00.000Z</published>
    <updated>2020-12-03T16:12:13.008Z</updated>
    
    <content type="html"><![CDATA[<p>目前有3台机器，我们设置一台ndb_mgm，两台ndbd，两台mysqld</p><table><thead><tr><th>角色</th><th>机器</th></tr></thead><tbody><tr><td>ndb_mgm</td><td>10.160.22.157</td></tr><tr><td>ndbd</td><td>10.160.22.158</td></tr><tr><td></td><td>10.160.22.159</td></tr><tr><td>mysqld</td><td>10.160.22.157</td></tr><tr><td></td><td>10.160.22.158</td></tr></tbody></table><hr><ol><li><p>下载MySQL cluster安装包<br><a href="https://downloads.mysql.com/archives/cluster/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/cluster/</a></p></li><li><p>解压安装包<br>tar -zxvf mysql-cluster-8.0.21-el7-x86_64.tar.gz</p></li><li><p>复制文件<br>mkdir /usr/local/mysql<br>cp -R mysql-cluster-8.0.21-el7-x86_64/* /usr/local/mysql/</p></li><li><p>创建配置管理节点<br>4.1 将bin目录中的ndb_mgm<em>文件全部复制到/usr/local/bin/目录中<br>cp /usr/local/mysql/bin/ndb_mgm</em> /usr/local/bin/</p></li></ol><blockquote><p>ndb_mgm，ndb客户端命令</p><p>ndb_mgmd，ndb管理节点启动命令</p><p>ndb_mgm是ndb_mgmd（MySQL Cluster Server）的客户端管理工具，通过它可以方便的检查Cluster的状态、启动备份、关闭Cluster等功能。</p></blockquote><p>​4.2 修改管理节点配置文件<br>​4.2.1 创建数据库集群配置文件的目录<br>​mkdir /var/lib/mysql-cluster<br>​4.2.2 编辑配置文件<br>​vim /var/lib/mysql-cluster/config.ini<br>​文件内如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[ndbd default]</span><br><span class="line">NoOfReplicas=2</span><br><span class="line">DataMemory=1024M</span><br><span class="line">IndexMemory=512M</span><br><span class="line"></span><br><span class="line">[ndb_mgmd]</span><br><span class="line">HostName=10.160.22.157</span><br><span class="line">DataDir=/var/lib/mysql-cluster/</span><br><span class="line"></span><br><span class="line">[ndbd]</span><br><span class="line">HostName=10.160.22.158</span><br><span class="line">DataDir=/usr/local/mysql/data/</span><br><span class="line"></span><br><span class="line">[ndbd]</span><br><span class="line">HostName=10.160.22.159</span><br><span class="line">DataDir=/usr/local/mysql/data/</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">HostName=10.160.22.157</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">HostName=10.160.22.158</span><br></pre></td></tr></table></figure><p>[NDBD DEFAULT]：表示每个数据节点的默认配置，在每个节点的[NDBD]中不用再写这些选项，只能有一个。<br>NoOfReplicas：副本数量，数据节点数必须是副本数的整数倍。<br>[NDB_MGMD]：表示管理节点的配置，只有一个，默认的对其他节点的端口是1186，故服务器需要开放1186端口。<br>[NDBD]：表示每个数据节点的配置，可以有多个，分别写上不同数据节点的IP地址。<br>[MYSQLD]：表示SQL节点的配置，可以有多个，分别写上不同SQL节点的IP地址</p><p>4.3 启动管理节点</p><ul><li><p>有新增节点或首次启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgmd -f /var/lib/mysql-cluster/config.ini --initial</span><br></pre></td></tr></table></figure></li><li><p>无新增节点启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgmd -f /var/lib/mysql-cluster/config.ini</span><br></pre></td></tr></table></figure></li></ul><p>4.4 查看管理节点运行状态</p><ul><li><p>进入控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndb_mgm</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* ndb_mgm&gt; show</span><br><span class="line">  Connected to Management Server at: localhost:1186</span><br><span class="line">  Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2 (not connected, accepting connect from 10.160.22.158)</span><br><span class="line">id=3 (not connected, accepting connect from 10.160.22.159)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5 (not connected, accepting connect from 10.160.22.158)</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>创建数据节点<br>5.1 配置10.160.22.159<br><em>因为该节点为单纯的data节点，所以先配置该节点</em><br>5.1.1 配置/etc/my.cnf</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.160.22.157:1186</span><br></pre></td></tr></table></figure><p>5.1.2 新增用户并修改权限<br>groupadd mysql<br>useradd mysql -g mysql</p><h1 id="修改目录"><a class="markdownIt-Anchor" href="#修改目录"></a> 修改目录</h1><p>cd /usr/local/mysql<br>mkdir data<br>chown -R root .<br>chown -R mysql data<br>chgrp -R mysql .</p><p>5.1.3 安装数据库<br>/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/</p><blockquote><p>用户为mysql的名称需要跟配置文件my.cnf中的user=mysql相同</p><p>–basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ 需要加上</p><p>启动成功后最后一行会输出数据库密码：root@localhost: &gt;Ba4&lt;oa!u7fD*</p></blockquote><p>5.1.2 设置开启自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure><p>5.1.3 启动data节点<br>service mysqld start</p><blockquote><p>启动的过程中可能会遇到一些错误，比如找不到/tmp/mysql.sock<br>这里建立一个软连接即可： ln -s /usr/local/mysql/data/mysql.sock /tmp/mysql.sock<br>建立好之后再启动</p></blockquote><p>5.1.4 修改数据库密码</p><ul><li><p>启动之后需要修改数据库密码，否则会无法使用，初始密码就是5.1.3步骤中的密码<br>/usr/local/mysql/bin/mysql -uroot -p</p></li><li><p>修改密码：<br>alter user ‘root’@‘localhost’ identified by ‘ojbKpqiOhsg8/i’;</p></li><li><p>退出重新用新密码登录<br>/usr/local/mysql/bin/mysql -uroot -p</p></li></ul><p>5.1.5 启动data节点<br>/usr/local/mysql/bin/ndbd --initial</p><p><em>首次启动加上<code>--initial</code>，非首次启动不需要加，不然会丢失之前的数据</em></p><p>5.1.6 启动之后到管理节点查看cluster状态<br>ndb_mgm&gt; show</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2 (not connected, accepting connect from 10.160.22.158)</span><br><span class="line">id=3@10.160.22.159  (mysql-8.0.21 ndb-8.0.21, starting, Nodegroup: 0)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5 (not connected, accepting connect from 10.160.22.158)</span><br></pre></td></tr></table></figure><p><em>10.160.22.159状态已经连接上了</em></p><p>5.2 配置10.160.22.158<br><em>因为该节点为data和sql节点，所以该节点的配置需要在158的基础上增加sql的配置，主要修改/etc/my.cnf</em></p><p>5.2.1 修改/etc/my.cnf文件</p><p>[mysqld]</p><h1 id="设置ndbcluster"><a class="markdownIt-Anchor" href="#设置ndbcluster"></a> 设置ndbcluster</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ndbcluster</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置默认的存储引擎</span></span><br><span class="line"></span><br><span class="line">default-storage-engine=ndbcluster</span><br><span class="line">port=3306</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">[mysql_cluster]</span><br><span class="line">ndb-connectstring=10.160.22.157:1186</span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><blockquote><p>其他方式与10.160.22.159的配置相同<br><em><font color="red">最终需要将root密码修改为与159相同，所有节点的密码都应相同</font></em></p></blockquote><p>5.2.3 启动之后到管理节点查看cluster状态<br>ndb_mgm&gt; show</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cluster Configuration</span><br><span class="line"></span><br><span class="line">[ndbd(NDB)]2 node(s)</span><br><span class="line">id=2@10.160.22.158  (mysql-8.0.21 ndb-8.0.21, Nodegroup: 0, *)</span><br><span class="line">id=3@10.160.22.159  (mysql-8.0.21 ndb-8.0.21, Nodegroup: 0)</span><br><span class="line"></span><br><span class="line">[ndb_mgmd(MGM)]1 node(s)</span><br><span class="line">id=1@10.160.22.157  (mysql-8.0.21 ndb-8.0.21)</span><br><span class="line"></span><br><span class="line">[mysqld(API)]2 node(s)</span><br><span class="line">id=4 (not connected, accepting connect from 10.160.22.157)</span><br><span class="line">id=5@10.160.22.158  (mysql-8.0.21 ndb-8.0.21)</span><br></pre></td></tr></table></figure><blockquote><p>可以看到data和sql节点都已经连接OK了</p></blockquote><ol start="6"><li>创建sql节点<br>6.1 10.160.22.159在上面已经完成了，不在配置</li></ol><p>6.2 配置10.160.22.157<br>6.2.1 修改/etc/my.cnf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">ndbcluster</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/data/mysql.sock</span><br><span class="line">symbolic-links=0</span><br><span class="line">default-storage-engine=ndbcluster</span><br><span class="line">port=3306</span><br><span class="line">user=mysql</span><br><span class="line">tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/data/error.log</span><br><span class="line">pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><p>6.2.2 启动sql节点<br>service mysqld start</p><hr><p>安装过程中出现的问题：</p><ol><li>报错找不到libcrypto.so.1.1<br>ln -s /usr/local/mysql/lib/private/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1<br>ln -s /usr/local/mysql/lib/private/libssl.so.1.1 /usr/lib64/libssl.so.1.1</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前有3台机器，我们设置一台ndb_mgm，两台ndbd，两台mysqld&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;th&gt;机器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ndb_mgm&lt;/td&gt;
&lt;td&gt;1
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://chuanyichuan.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Java接收Python发送的RabbitMQ消息全是byte数组</title>
    <link href="http://chuanyichuan.github.io/2020/12/02/Java%E6%8E%A5%E6%94%B6Python%E5%8F%91%E9%80%81%E7%9A%84RabbitMQ%E6%B6%88%E6%81%AF%E5%85%A8%E6%98%AFbyte%E6%95%B0%E7%BB%84/"/>
    <id>http://chuanyichuan.github.io/2020/12/02/Java接收Python发送的RabbitMQ消息全是byte数组/</id>
    <published>2020-12-02T14:45:00.000Z</published>
    <updated>2020-12-02T15:01:40.325Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个好玩的bug，主要源自于对pika的不了解，业务场景是这样的：在构建应用时，需要使用sonarqube进行静态扫描，并且需要将扫描结果反馈到构建服务中，因为SonarQube扫描任务使用的Sonar-Scanner脚本进行操作的，CI服务分散在二十多台机器上，主要的架构图是这样的：</p><blockquote><p>pika代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身份验证</span></span><br><span class="line">auth = pika.PlainCredentials(mq_username, mq_password)</span><br><span class="line"><span class="comment"># 身份验证之后连接mq</span></span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(mq_host, mq_port, mq_virtual_host, auth, heartbeat=<span class="number">9999</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line">channel.basic_publish(</span><br><span class="line">        exchange=mq_ack_exchange,</span><br><span class="line">        routing_key=mq_ack_routing_key,</span><br><span class="line">        body=json.dumps(json_body),</span><br><span class="line">        properties=pika.BasicProperties(</span><br><span class="line">            <span class="comment"># make message persistent</span></span><br><span class="line">            delivery_mode=<span class="number">2</span>,</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><blockquote><p>java代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"#&#123;'$&#123;external.mq.queue.deploy&#125;'&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@Payload String message)</span> </span>&#123;</span><br><span class="line">    System.out.println(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里输出的内容变成了ASCII码<code>12 34 56 87</code>，然后报错了，思前想后，也到mq控制台检查了，消息报文正常，然后心想用new String()转一下呢？辗转反侧，最后的解决方案是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"#&#123;'$&#123;external.mq.queue.deploy&#125;'&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@Payload Message message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意Message类不要import错了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到一个好玩的bug，主要源自于对pika的不了解，业务场景是这样的：在构建应用时，需要使用sonarqube进行静态扫描，并且需要将扫描结果反馈到构建服务中，因为SonarQube扫描任务使用的Sonar-Scanner脚本进行操作的，CI服务分散在二十多台机器上，主
      
    
    </summary>
    
    
      <category term="Java" scheme="http://chuanyichuan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>解决IntelliJ IDEA创建SpringBoot项目失败</title>
    <link href="http://chuanyichuan.github.io/2020/11/25/%E8%A7%A3%E5%86%B3IntelliJ-IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE%E5%A4%B1%E8%B4%A5/"/>
    <id>http://chuanyichuan.github.io/2020/11/25/解决IntelliJ-IDEA创建SpringBoot项目失败/</id>
    <published>2020-11-25T12:25:00.000Z</published>
    <updated>2020-11-26T01:35:06.668Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用idea在创建SpringBoot工程的时候，默认需要连接<code>https://start.spring.io</code>来获取相关的配置和组件，但是因为网络问题，我们经常性的会出现连接不上的情况，如下图：</p><img src="/images/image-20201125205941367.png" alt="image-20201125205941367" style="zoom: 30%; "><p>一直在这个页面转啊转的，然后果断时间就弹出连接失败的提示框：</p><img src="/images/image-20201125210205586.png" alt="image-20201125210205586" style="zoom:50%;"><p>遇到这种情况呢，大家也不想的，要不歇一歇，下碗面给你吃啊？</p><img src="/images/xiamianchigeini.png" alt="xiamianchigeini" style="zoom:50%;"><p>这不胡扯呢么，抓紧想办法解决啊。此处提供几种解决办法：</p><blockquote><p>第一种</p></blockquote><p>使用阿里云的工具地址来代替spring的地址，速度相当之快，阿里云的地址为：<code>https://start.aliyun.com</code>，设置方式如下：<br><img src="/images/image-20201125212323488.png" alt="image-20201125212323488" style="zoom: 33%;"></p><blockquote><p>第二种</p></blockquote><p>使用<code>https://start.springboot.io</code>地址来代替原地址，设置方式与上面一样，速度一般</p><blockquote><p>第三种</p></blockquote><p>搭建自己的服务器，搭建方式如下：</p><ol><li>下载代码：<code>git clone https://github.com/spring-io/start.spring.io</code></li><li>打包编译：进入到工程下，执行maven命令<code>mvn clean package -Dmaven.test.skip=true</code></li><li>打包完成之后，进入到<code>start-site</code>目录中执行命令<code>../mvnw spring-boot:run</code></li><li>运行成功后，访问<code>http://localhost:8080</code></li></ol><hr><p>从上述三种方法来看，使用阿里云的地址是最简单靠谱的，不需要自己进行维护，springboot的地址也可能会偶尔连不上，结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们使用idea在创建SpringBoot工程的时候，默认需要连接&lt;code&gt;https://start.spring.io&lt;/code&gt;来获取相关的配置和组件，但是因为网络问题，我们经常性的会出现连接不上的情况，如下图：&lt;/p&gt;
&lt;img src=&quot;/images/ima
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot Admin使用Nacos作为服务注册中心</title>
    <link href="http://chuanyichuan.github.io/2020/11/23/SpringBoot%20Admin%E4%BD%BF%E7%94%A8Nacos%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://chuanyichuan.github.io/2020/11/23/SpringBoot Admin使用Nacos作为服务注册中心/</id>
    <published>2020-11-23T01:05:00.000Z</published>
    <updated>2020-11-30T02:55:42.273Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们都讲了普通的服务使用SBD，如果我们使用的是类似Nacos、Eureka、Consul等注册中心实现服务注册的，那我们应该怎么配置相应的安全策略？</p><p>在Client端，我们依然需要引入sbd-client相关依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>即使是使用注册中心，该依赖的包也不能少，不然client就走丢了</p></blockquote><p>包引入之后，同样的是在项目配置文件中将actuator的相关端口暴露出来，这个之前讲过，包括Spring Security的配置，就不在赘述了，贴一下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">ALWAYS</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">boot:</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">client:</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">&lt;sbd</span> <span class="string">server</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">instance:</span></span><br><span class="line">  <span class="comment"># 如果应用容器化了，那么最好设置一下service-base-url参数，否则被映射出去的是容器的ip和端口</span></span><br><span class="line">  <span class="attr">service-base-url:</span> <span class="attr">http://host_ip:host_port</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="string">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line"><span class="string">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br><span class="line"><span class="comment"># Spring Security配置</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&lt;actuator</span> <span class="string">user&gt;</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">&lt;password</span> <span class="string">for</span> <span class="string">actuator</span> <span class="string">user&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Security配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http.httpBasic().and().authorizeRequests().antMatchers(<span class="string">"/actuator/**"</span>).authenticated().anyRequest().permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>client端已经配置完了，接下来就是SBD server端的配置了，和我们之前的配置也没差太多，主要是将SBD的用户名密码告知注册中心，我们这里使用的是Nacos，所以我们要将账号信息告诉Nacos，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">jsb_micro_admin_server</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">&lt;sbd</span> <span class="string">user&gt;</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">&lt;password</span> <span class="string">for</span> <span class="string">sbd</span> <span class="string">user&gt;</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="string">&lt;nacos_server_ip&gt;:&lt;nacos_server_port&gt;</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="string">prd</span></span><br><span class="line"><span class="attr">        ip:</span> <span class="string">&lt;sbd_ip&gt;</span></span><br><span class="line"><span class="attr">        metadata:</span></span><br><span class="line">          <span class="string">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line">          <span class="string">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure><p>双方服务启动即可，注意这里的namespace需要与服务的namespace一致，也就是它只能发现同一个namespace下的服务。</p><p>至此所有的配置就都搞定了，启动即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前我们都讲了普通的服务使用SBD，如果我们使用的是类似Nacos、Eureka、Consul等注册中心实现服务注册的，那我们应该怎么配置相应的安全策略？&lt;/p&gt;
&lt;p&gt;在Client端，我们依然需要引入sbd-client相关依赖包：&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot Admin" scheme="http://chuanyichuan.github.io/tags/SpringBoot-Admin/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Admin安全配置</title>
    <link href="http://chuanyichuan.github.io/2020/11/22/SpringBoot%20Admin%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://chuanyichuan.github.io/2020/11/22/SpringBoot Admin安全配置/</id>
    <published>2020-11-22T15:15:00.000Z</published>
    <updated>2020-11-23T01:47:20.080Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们讲过如何使用SpringBoot Admin监控微服务，但是这种情况下，所有的服务都会暴露给外部，一旦SBD地址泄露，那我们的服务将毫无安全可言，所以我们需要给SBD配置安全策略。Web应用的身份认证和授权方式有多种方法，Spring Boot Admin不提供默认方法。默认情况下，spring-boot-admin-server-ui提供登录页面和注销按钮，我们使用Spring Security实现安全认证。</p><ol><li><p>引入Spring Security依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在application.yml文件中配置安全认证信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">&lt;user</span> <span class="string">name&gt;</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">&lt;Password</span> <span class="string">for</span> <span class="string">user</span> <span class="string">name&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建认证策略管理类</p><p>该类继承自<code>WebSecurityConfigurerAdapter</code>，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.config.AdminServerProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 安全配置类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String adminContextPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SavedRequestAwareAuthenticationSuccessHandler handler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">        handler.setTargetUrlParameter(<span class="string">"redirectTo"</span>);</span><br><span class="line">        handler.setDefaultTargetUrl(<span class="keyword">this</span>.adminContextPath + <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启用HTTP-Basic支持。这是Spring Boot Admin Client注册所必需的</span></span><br><span class="line">        http.httpBasic().and()</span><br><span class="line">                <span class="comment">// 授予对所有静态资产和登录页面的公共访问权限</span></span><br><span class="line">                .authorizeRequests().antMatchers(<span class="keyword">this</span>.adminContextPath + <span class="string">"/assets/**"</span>).permitAll()</span><br><span class="line">                <span class="comment">// 授予对所有静态资产和登录页面的公共访问权限</span></span><br><span class="line">                .antMatchers(<span class="keyword">this</span>.adminContextPath + <span class="string">"/login"</span>).permitAll().and()</span><br><span class="line">                <span class="comment">// 所有请求都需要验证登录</span></span><br><span class="line">                .authorizeRequests().anyRequest().authenticated().and()</span><br><span class="line">                <span class="comment">// 登录表单</span></span><br><span class="line">                .formLogin().loginPage(<span class="keyword">this</span>.adminContextPath + <span class="string">"/login"</span>).successHandler(handler).and()</span><br><span class="line">                <span class="comment">// 登出表单</span></span><br><span class="line">                .logout().logoutUrl(<span class="keyword">this</span>.adminContextPath + <span class="string">"/logout"</span>).and().csrf()</span><br><span class="line">                <span class="comment">//Enables CSRF-Protection using Cookies</span></span><br><span class="line">                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()).ignoringAntMatchers(</span><br><span class="line">                  <span class="comment">//将服务注册的接口暴露出去.</span></span><br><span class="line">                  <span class="keyword">this</span>.adminContextPath + <span class="string">"/instances"</span>,</span><br><span class="line">                  <span class="keyword">this</span>.adminContextPath + <span class="string">"/actuator/**"</span>);</span><br><span class="line"></span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启服务即可</p><p><img src="/images/image-20201122235722207.png" alt="image-20201122235722207"></p></li></ol><hr><p>讲了半天如何配置server端的安全，难道客户端的安全就不重要了吗？当然不是，服务端是访问权限的控制，而客户端是操作权限的控制，这里才是安全配置的重中之重，因为服务端也仅仅是通过客户端actuator的接口实现通信的，所以将客户端的权限配置稳固，也是我们必须要做的，否则别人直接通过actuator接口调用我们的actuator/shutdown接口，服务就翘了，开发要祭天了，产品要疯了，运营要炸了。</p><p>首先我们需要将客户端的几个actuator接口暴露出来，这里我们将所有的接口全都暴露出来，就不做相关的控制了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">exposure:</span></span><br><span class="line"><span class="attr">include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">endpoint:</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line"><span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure><p>然后引入Spring Security依赖包做权限控制：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入Security包了，就需要配置相关的权限，首先配置接口的访问权限：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&lt;actuator</span> <span class="string">user&gt;</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">&lt;password</span> <span class="string">for</span> <span class="string">actuator</span> <span class="string">user&gt;</span></span><br></pre></td></tr></table></figure><p>权限开通了，那么我们就需要将权限告知SBD Server端，否则server端将会无权限访问，告知方式也是在配置文件中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">boot:</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">client:</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">&lt;sbd</span> <span class="string">server</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">&lt;sbd</span> <span class="string">server</span> <span class="string">username&gt;</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">&lt;password</span> <span class="string">for</span> <span class="string">sbd</span> <span class="string">server</span> <span class="string">user&gt;</span></span><br><span class="line"><span class="attr">instance:</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="string">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line"><span class="string">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure><p>设置OK，启动我们的client服务， 发现服务监控成功了，但是其他的接口都访问不了了，业务跪了，这是因为我们的Security默认是拦截所有的请求，但是我们这里指需要让它拦截actuator的接口即可，业务相关的接口由业务权限系统去控制，所以我们需要单独配置一下<code>WebSecurityConfigurerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.httpBasic().and().authorizeRequests().antMatchers(<span class="string">"/actuator/**"</span>).authenticated().anyRequest().permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里再重新启动服务，所有的流程就都通畅了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前我们讲过如何使用SpringBoot Admin监控微服务，但是这种情况下，所有的服务都会暴露给外部，一旦SBD地址泄露，那我们的服务将毫无安全可言，所以我们需要给SBD配置安全策略。Web应用的身份认证和授权方式有多种方法，Spring Boot Admin不提供默认
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot Admin" scheme="http://chuanyichuan.github.io/tags/SpringBoot-Admin/"/>
    
  </entry>
  
  <entry>
    <title>Linux挂载磁盘</title>
    <link href="http://chuanyichuan.github.io/2020/11/06/Linux%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98/"/>
    <id>http://chuanyichuan.github.io/2020/11/06/Linux挂载磁盘/</id>
    <published>2020-11-05T16:17:00.000Z</published>
    <updated>2020-11-06T10:06:57.204Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一步</p></blockquote><p>使用<code>fdisk -l</code>查看当前挂载的数据盘，可以看到磁盘<code>/dev/sda</code>尚未挂载到系统上</p><img src="/images/image-20201106002222587.png" alt="image-20201106002222587" style="zoom:50%;"><blockquote><p>第二步</p></blockquote><p>使用<code>fdisk /dev/sda</code>开始挂载，如果不知道接下来输入什么command，可以使用m指令查看帮助，这里我们应该选择n来创建新的分区</p><img src="/images/image-20201106002343593.png" alt="image-20201106002343593" style="zoom:50%;"><blockquote><p>第三步</p></blockquote><p>常规的操作指令创建，可以一路按回车，但是第一步要选择p，e为创建扩展分区，p为创建逻辑分区。然后一路回车即可，但是如果想要创建多个分区，那么在<code>Partition number</code>阶段输入相关的分区数量，然后立即进入块选择阶段，这里最好是使用默认值，不然会造成空间的浪费。紧接着就是选择分区的大小，从图上看，是输入错误，数字前必须使用<code>+</code>，比如想要创建10G的分区，则输入<code>+10G</code>。</p><img src="/images/image-20201106002554231.png" alt="image-20201106002554231" style="zoom:50%;"><blockquote><p>第四步</p></blockquote><p>输入<code>wq</code>保存分区，然后输入<code>fdisk -l</code>查看当前分区，发现磁盘已经分配好了，那么现在就是要格式化</p><img src="/images/image-20201106003152520.png" alt="image-20201106003152520" style="zoom:50%;"><blockquote><p>第五步</p></blockquote><p>格式化新分区的磁盘，对盘符进行格式化。例如，可以格式化为ext4、ext3、xfs或者其他文件系统格式，这里我们选择ext4：</p><ul><li>ext4：执行指令 #mkfs.ext4 /dev/vdb1</li><li>ext3：执行指令 #mkfs.ext3 /dev/vdb1</li><li>xfs：执行指令 #mkfs.xfs /dev/vdb1</li></ul><img src="/images/image-20201106003310943.png" alt="image-20201106003310943" style="zoom:50%;"><blockquote><p>第六步</p></blockquote><p>磁盘挂载，首先创建一个目录，如果使用mount进行挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">mount /dev/sda1 /data</span><br></pre></td></tr></table></figure><blockquote><p>第七步</p></blockquote><p>现在挂载的磁盘，在虚拟机重启之后就会消失，还需要重新挂载，所以我们需要永久性挂载磁盘，步骤如下</p><ol><li><p>使用<code>fldik /dev/sda1</code>查看磁盘的UUID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chuans-002 ~]# blkid /dev/sda1</span><br><span class="line">/dev/sda1: UUID="47905e0e-312b-49ff-b160-6eb550e1a6fa" TYPE="ext4"</span><br></pre></td></tr></table></figure></li><li><p>修改<code>/etc/fstab</code>文件，添加如下行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=47905e0e-312b-49ff-b160-6eb550e1a6fa /data  ext4  defaults   1 2</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;第一步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;code&gt;fdisk -l&lt;/code&gt;查看当前挂载的数据盘，可以看到磁盘&lt;code&gt;/dev/sda&lt;/code&gt;尚未挂载到系统上&lt;/p&gt;
&lt;img src=&quot;/images/image-2
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Kafka进程总是在启动一段时间后自动停止</title>
    <link href="http://chuanyichuan.github.io/2020/11/05/kafka%E8%BF%9B%E7%A8%8B%E6%80%BB%E6%98%AF%E5%9C%A8%E5%90%AF%E5%8A%A8%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E8%87%AA%E5%8A%A8%E5%81%9C%E6%AD%A2/"/>
    <id>http://chuanyichuan.github.io/2020/11/05/kafka进程总是在启动一段时间后自动停止/</id>
    <published>2020-11-05T15:51:00.000Z</published>
    <updated>2020-11-05T16:01:46.726Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到了一个问题，集群中的每一台kafka节点总是在运行一段时间之后莫名其妙的“死”掉，查了<code>/var/log/message</code>没有发现相关的日志，也排查了<strong>kafka-server.log</strong>，也没发现异常停止的日志信息，都是正常的日志数据，查了一些资料，说是在启动的时候加上<code>-daemon</code>参数：</p><blockquote><p>原启动命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh ./config/server.properties &amp;</span><br></pre></td></tr></table></figure><blockquote><p>现启动命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh -daemon ./config/server.properties &amp;</span><br></pre></td></tr></table></figure><p>原因是在bin/kafka-run-class.sh文件中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Launch mode</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x$DAEMON_MODE"</span> = <span class="string">"xtrue"</span> ]; then</span><br><span class="line">  #加 daemon 会使用该命令</span><br><span class="line">  nohup $JAVA $KAFKA_HEAP_OPTS $KAFKA_JVM_PERFORMANCE_OPTS $KAFKA_GC_LOG_OPTS $KAFKA_JMX_OPTS $KAFKA_LOG4J_OPTS -cp $CLASSPATH $KAFKA_OPTS <span class="string">"$@"</span> &gt; <span class="string">"$CONSOLE_OUTPUT_FILE"</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &lt; /dev/null &amp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  #不加时使用的命令</span><br><span class="line">  exec $JAVA $KAFKA_HEAP_OPTS $KAFKA_JVM_PERFORMANCE_OPTS $KAFKA_GC_LOG_OPTS $KAFKA_JMX_OPTS $KAFKA_LOG4J_OPTS -cp $CLASSPATH $KAFKA_OPTS <span class="string">"$@"</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到了一个问题，集群中的每一台kafka节点总是在运行一段时间之后莫名其妙的“死”掉，查了&lt;code&gt;/var/log/message&lt;/code&gt;没有发现相关的日志，也排查了&lt;strong&gt;kafka-server.log&lt;/strong&gt;，也没发现异常停止的日志信息
      
    
    </summary>
    
    
      <category term="Kafka" scheme="http://chuanyichuan.github.io/categories/Kafka/"/>
    
    
  </entry>
  
  <entry>
    <title>ELK进行日志采集和展示</title>
    <link href="http://chuanyichuan.github.io/2020/11/04/ELK%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%92%8C%E5%B1%95%E7%A4%BA/"/>
    <id>http://chuanyichuan.github.io/2020/11/04/ELK进行日志采集和展示/</id>
    <published>2020-11-04T14:38:00.000Z</published>
    <updated>2020-11-04T15:57:16.604Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Tip</p></blockquote><p>最近遇到一个特别头疼的问题：某个服务出现了一个不怎么好复现的问题，服务一共部署在6台机器上，使用了Nginx做的负载均衡，并且负载均衡的策略为server轮询，因为不知道在哪一次请求中会将问题复现，所以需要同时将6台机器的日志全部打开并实时刷新，得以定位到问题，场面是这样的：</p><p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20201104230337902.png" alt="image-20201104230337902"></p><p>是不是看的眼睛都要花了？可能有人会问了：为什么不直接grep日志文件呢？原因就是不知道到底是出的什么异常，在哪一台机器上出异常，所以也不是很好排查。好在目前只有6台server，如果扩展到20台server，在负载策略不变的情况下，那么该如何去排查呢？想想都要头疼了。</p><blockquote><p>解决办法调研</p></blockquote><ol><li><p>方案一：创建一个共享磁盘，挂载到所有的server上，然后将日志全部输出到共享磁盘上，排查问题的时候轮询查看磁盘内的日志文件</p><p>改善：不需要每次都访问所有的server，只需要访问共享磁盘就可以了，省事</p><p>缺陷：会产生与server数量相等的日志文件，排查起来仍然困难</p></li><li><p>方案二：使用LogStash采集日志信息，并输出到Elasticsearch中，使用Kibana进行查询显示，也就是我们所说的ELK方案</p><p>改善：该方案相较于方案一，</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Tip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近遇到一个特别头疼的问题：某个服务出现了一个不怎么好复现的问题，服务一共部署在6台机器上，使用了Nginx做的负载均衡，并且负载均衡的策略为server轮询，因为不知道在哪一次请求中会将问题复现，
      
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://chuanyichuan.github.io/categories/Elasticsearch/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7.1安装docker</title>
    <link href="http://chuanyichuan.github.io/2020/10/30/CentOS7.1%E5%AE%89%E8%A3%85docker/"/>
    <id>http://chuanyichuan.github.io/2020/10/30/CentOS7.1安装docker/</id>
    <published>2020-10-29T16:23:00.000Z</published>
    <updated>2020-10-29T16:25:25.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看centos版本"><a class="markdownIt-Anchor" href="#查看centos版本"></a> 查看centos版本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h1 id="安装-docker"><a class="markdownIt-Anchor" href="#安装-docker"></a> 安装 docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line">yum install -y docker-selinux</span><br></pre></td></tr></table></figure><h1 id="查看docker版本"><a class="markdownIt-Anchor" href="#查看docker版本"></a> 查看docker版本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><h1 id="启动docker服务"><a class="markdownIt-Anchor" href="#启动docker服务"></a> 启动docker服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><h1 id="测试docker安装成功"><a class="markdownIt-Anchor" href="#测试docker安装成功"></a> 测试docker安装成功</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h1 id="配置docker开机自启动"><a class="markdownIt-Anchor" href="#配置docker开机自启动"></a> 配置Docker开机自启动：</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查看centos版本&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#查看centos版本&quot;&gt;&lt;/a&gt; 查看centos版本&lt;/h1&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://chuanyichuan.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>K8s运维命令</title>
    <link href="http://chuanyichuan.github.io/2020/10/26/k8s%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/"/>
    <id>http://chuanyichuan.github.io/2020/10/26/k8s运维命令/</id>
    <published>2020-10-25T16:00:00.000Z</published>
    <updated>2020-10-26T10:18:05.163Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>创建namespace.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">appVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f namespace.yaml</span><br></pre></td></tr></table></figure></li><li><p>重启pod</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">get</span> <span class="keyword">po</span> <span class="symbol">&lt;pod_name&gt;</span> -n <span class="symbol">&lt;namespace_name&gt;</span> -<span class="keyword">o</span> yaml | kubectl replace --force -<span class="keyword">f</span> -</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建namespace.yaml&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://chuanyichuan.github.io/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>K8s报错指南</title>
    <link href="http://chuanyichuan.github.io/2020/10/26/k8s%E6%8A%A5%E9%94%99%E6%8C%87%E5%8D%97/"/>
    <id>http://chuanyichuan.github.io/2020/10/26/k8s报错指南/</id>
    <published>2020-10-25T16:00:00.000Z</published>
    <updated>2020-10-26T05:52:16.626Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>no matches for kind “Ingress” in version “apps/v1”</p><p>主要是在apps/v1下没有了ingress，需要将appVersion修改为<code>networking.k8s.io/v1beta1</code></p></li><li><p>no matches for kind “DaemonSet“ in version “extensions/v1beta1“</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DaemonSet、Deployment、StatefulSet 和 ReplicaSet 在 v1.16 中将不再从 extensions/v1beta1、apps/v1beta1 或 apps/v1beta2 提供服务</span><br><span class="line"></span><br><span class="line">解决方法是：</span><br><span class="line">将yml配置文件内的api接口修改为 apps/v1 ，导致原因为之间使用的kubernetes 版本是1.14.x版本，1.16.x 版本放弃部分API支持</span><br></pre></td></tr></table></figure></li><li><p>Back-off restarting failed container</p><p>主要是容器内没有能够保持运行状态的命令，也就是容器启动之后就运行结束，如果再打包镜像的时候没有指定CMD，那么就在k8s的yaml文件中指定command：</p><p>在spec.containers下指定<code>command: [&quot;/bin/bash&quot;, &quot;-ce&quot;, &quot;tail -f /dev/null&quot;]</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  spec:</span></span><br><span class="line"><span class="attr">    containers:</span></span><br><span class="line"><span class="attr">    - image:</span> <span class="attr">xxx:v1</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">["/bin/bash",</span> <span class="string">"-ce"</span><span class="string">,</span> <span class="string">"tail -f /dev/null"</span><span class="string">]</span></span><br><span class="line"><span class="attr">    volumns:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;no matches for kind “Ingress” in version “apps/v1”&lt;/p&gt;
&lt;p&gt;主要是在apps/v1下没有了ingress，需要将appVersion修改为&lt;code&gt;networking.k8s.io/v1beta
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://chuanyichuan.github.io/categories/k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>Nacos如何是怎么实现将多个配置项注入到同一个工程中的？</title>
    <link href="http://chuanyichuan.github.io/2020/10/25/Nacos%E5%A6%82%E4%BD%95%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%B0%86%E5%A4%9A%E4%B8%AA%E9%85%8D%E7%BD%AE%E9%A1%B9%E6%B3%A8%E5%85%A5%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%EF%BC%9F/"/>
    <id>http://chuanyichuan.github.io/2020/10/25/Nacos如何是怎么实现将多个配置项注入到同一个工程中的？/</id>
    <published>2020-10-25T15:59:59.000Z</published>
    <updated>2020-11-05T16:43:12.009Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Nacos的时候，有没有想过如何将多个配置同时注入到一个工程中？比如下面的一个场景：</p><p>多个项目工程的数据库配置一致，但是又有不同的私有化配置，根据抽象原则，我们是否可以将重复的配置信息单独放到一个共享的配置文件里，然后再给一些项目配置一个独享的配置文件呢？</p><p>在使用本地配置的时候，可以给工程指定多个yaml或者xml等文件，然后加载器会根据路径将全部文件依次加载到项目运行环境中，那么使用Nacos怎么办呢？</p><p>在Nacos中，提供了<code>nacos.config.dataId</code>配置参数，他可以接收一个配置文件名称，如果名称写错的话，会找不到配置文件。翻看一下<code>com.alibaba.boot.nacos.config.properties.NacosConfigProperties</code>类的话，可以发现在dataId下方有一个变量名叫dataIds</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(NacosConfigConstants.PREFIX) <span class="comment">// NacosConfigConstants.PREFIX = "nacos.config"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String serverAddr = <span class="string">"127.0.0.1:8848"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String dataId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String dataIds;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK！看到这里，我们知道了Nacos是可以配置多个配置文件的，但是如何配置，且使用什么字符作为分隔符呢？源代码里竟然没有说明，说好的javadoc呢？</p><p>既然没有注释，我们就只能看一下<code>dataIds</code>字段的是如何被解析的吧，代码在<code>com.alibaba.boot.nacos.config.util.NacosConfigLoader#reqGlobalNacosConfig</code>中（至于如何知道在这里的，你细品）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;NacosPropertySource&gt; <span class="title">reqGlobalNacosConfig</span><span class="params">(Properties globalProperties, ConfigType type)</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; dataIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="comment">// 步骤1</span></span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isEmpty(nacosConfigProperties.getDataId())) &#123;</span><br><span class="line">    <span class="comment">// 步骤2</span></span><br><span class="line">    <span class="keyword">final</span> String ids = environment.resolvePlaceholders(nacosConfigProperties.getDataIds());</span><br><span class="line">    <span class="comment">// 步骤3</span></span><br><span class="line">    dataIds.addAll(Arrays.asList(ids.split(<span class="string">","</span>)));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 步骤4</span></span><br><span class="line">    dataIds.add(nacosConfigProperties.getDataId());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> String groupName = environment.resolvePlaceholders(nacosConfigProperties.getGroup());</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">boolean</span> isAutoRefresh = nacosConfigProperties.isAutoRefresh();</span><br><span class="line">  <span class="comment">// 步骤5</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(reqNacosConfig(globalProperties, dataIds.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]), groupName, type, isAutoRefresh)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码可以抽象为一个流程图：</p><img src="/images/image-20201028222225464.png" alt="image-20201028222225464" style="zoom:50%;"><p>关于本文中最核心的代码应属<code>ids.split(&quot;,&quot;)</code>，这句话告诉我们<code>dataIds</code>字段是以逗号<code>,</code>作为分隔符的，那么我们现在就可以潇洒的操作我们的配置了。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">nacos.config.namespace</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">nacos.config.data-ids</span>=<span class="string">starter_error,starter</span></span><br><span class="line"><span class="meta">nacos.config.auto-refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.config.type</span>=<span class="string">yaml</span></span><br><span class="line"><span class="meta">nacos.config.bootstrap.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>疑问：既然有了dataIds，为什么还需要dataId呢？</p><blockquote><p>拓展</p></blockquote><p>在<code>NacosConfigProperties</code>中发现一个<code>extConfig</code>属性，这个是做什么用的呢？我们找到解析该属性的方法，就在<code>reqGlobalNacosConfig</code>方法下方<code>com.alibaba.boot.nacos.config.util.NacosConfigLoader#reqSubNacosConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;NacosPropertySource&gt; <span class="title">reqSubNacosConfig</span><span class="params">(NacosConfigProperties.Config config, Properties globalProperties, ConfigType type)</span> </span>&#123;</span><br><span class="line">  Properties subConfigProperties = buildSubNacosProperties(globalProperties, config);</span><br><span class="line">  ArrayList&lt;String&gt; dataIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isEmpty(config.getDataId())) &#123;</span><br><span class="line">    <span class="keyword">final</span> String ids = environment.resolvePlaceholders(config.getDataIds());</span><br><span class="line">    dataIds.addAll(Arrays.asList(ids.split(<span class="string">","</span>)));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dataIds.add(config.getDataId());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> String groupName = environment.resolvePlaceholders(config.getGroup());</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">boolean</span> isAutoRefresh = config.isAutoRefresh();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(reqNacosConfig(subConfigProperties, dataIds.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]), groupName, type, isAutoRefresh)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从逻辑上发现和<code>reqGlobalNacosConfig</code>方法一样，那么解析出来的<code>NacosPropertySource</code>实例有什么用处呢？在方法调用处我们发现解析出来的实例和dataIds的配置信息同级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Properties globalProperties = buildGlobalNacosProperties();</span><br><span class="line">  MutablePropertySources mutablePropertySources = environment.getPropertySources();</span><br><span class="line">  <span class="comment">// 步骤1</span></span><br><span class="line">  List&lt;NacosPropertySource&gt; sources = reqGlobalNacosConfig(globalProperties, nacosConfigProperties.getType());</span><br><span class="line">  <span class="keyword">for</span> (NacosConfigProperties.Config config : nacosConfigProperties.getExtConfig()) &#123;</span><br><span class="line">    <span class="comment">// 步骤2</span></span><br><span class="line">    List&lt;NacosPropertySource&gt; elements = reqSubNacosConfig(config, globalProperties, config.getType());</span><br><span class="line">    <span class="comment">// 步骤3</span></span><br><span class="line">    sources.addAll(elements);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤1和步骤2都是解析相关的配置信息，步骤3是将<code>extConfig</code>属性指定的配置文件加入到步骤1的list中。那么我们来看一下<code>extConfig</code>属性的定义<code>com.alibaba.boot.nacos.config.properties.NacosConfigProperties.Config</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String serverAddr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String namespace;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String ramRoleName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String dataId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String dataIds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String group = Constants.DEFAULT_GROUP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigType type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String maxRetry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String configLongPollTimeout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String configRetryTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> autoRefresh = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> enableRemoteSyncConfig = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类的属性和外层<code>NacosConfigProperties</code>几乎一样，那么我们是否可以使用dataId和extConfig中的dataId来代替dataIds呢（有点脱裤子放x的感觉）？那么我们的配置就可以修改一下了。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">nacos.config.namespace</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">nacos.config.data-ids</span>=<span class="string">starter</span></span><br><span class="line"><span class="meta">nacos.config.auto-refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.config.type</span>=<span class="string">yaml</span></span><br><span class="line"><span class="meta">nacos.config.bootstrap.enable</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.config.ext-config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">nacos.config.ext-config.namespace</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">nacos.config.ext-config.data-id</span>=<span class="string">starter_error</span></span><br><span class="line"><span class="meta">nacos.config.ext-config.auto-refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.config.ext-config.type</span>=<span class="string">yaml</span></span><br></pre></td></tr></table></figure><p>然后启动服务，看下控制台的日志输出：</p><img src="/images/image-20201028232556099.png" alt="image-20201028232556099" style="zoom:50%;"><img src="/images/image-20201028232653686.png" alt="image-20201028232653686" style="zoom:50%;"><p>从日志中看出是先加载了外层的配置，然后再加载<code>extConfig</code>的配置，那注入时间是否有区别呢？我们把数据库配置文件放在ext中，看看启动是否正常：</p><p><img src="/images/image-20201028234429362.png" alt="image-20201028234429362"></p><p>哦吼~报错了，我们不能把核心配置放在extConfig中加载。</p><p>在上述配置中，我们发现extConfig中也有<code>serverAddr</code>等一系列配置属性，意思也就是我们可以同时将不同注册中心里的配置注入到一个项目工程里，比如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">nacos.config.namespace</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">nacos.config.data-ids</span>=<span class="string">starter</span></span><br><span class="line"><span class="meta">nacos.config.auto-refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.config.type</span>=<span class="string">yaml</span></span><br><span class="line"><span class="meta">nacos.config.bootstrap.enable</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.config.ext-config[0].server-addr</span>=<span class="string">127.0.0.2:8848</span></span><br><span class="line"><span class="meta">nacos.config.ext-config[0].namespace</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">nacos.config.ext-config[0].data-id</span>=<span class="string">starter_error</span></span><br><span class="line"><span class="meta">nacos.config.ext-config[0].auto-refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.config.ext-config[0].type</span>=<span class="string">yaml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.config.ext-config[1].server-addr</span>=<span class="string">127.0.0.3:8848</span></span><br><span class="line"><span class="meta">nacos.config.ext-config[1].namespace</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">nacos.config.ext-config[1].data-id</span>=<span class="string">starter_error_ext</span></span><br><span class="line"><span class="meta">nacos.config.ext-config[1].auto-refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.config.ext-config[1].type</span>=<span class="string">yaml</span></span><br></pre></td></tr></table></figure><p>哦吼~功能好强大，同时我们也可以在extConfig中使用<code>dataIds</code>注入该配置中心的多个配置了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用Nacos的时候，有没有想过如何将多个配置同时注入到一个工程中？比如下面的一个场景：&lt;/p&gt;
&lt;p&gt;多个项目工程的数据库配置一致，但是又有不同的私有化配置，根据抽象原则，我们是否可以将重复的配置信息单独放到一个共享的配置文件里，然后再给一些项目配置一个独享的配置文件呢
      
    
    </summary>
    
    
      <category term="Nacos" scheme="http://chuanyichuan.github.io/categories/Nacos/"/>
    
    
  </entry>
  
  <entry>
    <title>Nacos为Map和List注入数据</title>
    <link href="http://chuanyichuan.github.io/2020/10/22/Nacos%E4%B8%BAMap%E5%92%8CList%E6%B3%A8%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
    <id>http://chuanyichuan.github.io/2020/10/22/Nacos为Map和List注入数据/</id>
    <published>2020-10-22T10:10:00.000Z</published>
    <updated>2020-11-05T16:42:10.962Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发过程中遇到了一个棘手的问题：有一些配置信息，需要以键值对或者列表的形式从配置文件中注入到代码里，配置中心使用的是Nacos。在正常情况下，使用Nacos我们都是key-value的配置，那么我们要是想将配置注入到List或者Map中，应该怎么办呢？</p><p>我们在使用spring本地配置的时候，可以使用<code>@ConfigurationProperties</code>注解将一个文件中的所有内容注入到类的各个对应属性上，在Nacos中，也有类似的注解<code>@NacosConfigurationProperties</code>，我们看下该类的解析工具<code>com.alibaba.nacos.spring.context.properties.config.NacosConfigurationPropertiesBindingPostProcessor</code>，该类实现了<code>BeanPostProcessor</code>接口。</p><blockquote><p>拓展一下</p></blockquote><p>它是SpringIOC容器给我们提供的一个扩展接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>BeanPostProcessor</code>中有两个方法，当实现了该接口的类注册到SpringIOC容器后，在类实例初始化方法(afterProperties和自定义init等方法)调用之前，将会执行<code>BeanPostProcessor#postProcessBeforeInitialization</code>方法，在实例初始化方法执行完之后，会调用<code>BeanPostProcessor#postProcessAfterInitialization</code>方法，整个的调用顺序为：</p><img src="/images/image-20201029004452340.png" alt="image-20201029004452340" style="zoom:50%;"><blockquote><p>回归正题</p></blockquote><p>首先看一下<code>NacosConfigurationPropertiesBindingPostProcessor#postProcessBeforeInitialization</code>方法的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">  NacosConfigurationProperties nacosConfigurationProperties = findAnnotation(bean.getClass(), NacosConfigurationProperties.class);</span><br><span class="line">  <span class="keyword">if</span> (nacosConfigurationProperties != <span class="keyword">null</span>) &#123;</span><br><span class="line">    bind(bean, beanName, nacosConfigurationProperties);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在每一个bean被初始化之前，都会获取一下该类是否被<code>@NacosConfigurationProperties</code>所装饰，如果被装饰了则执行bind方法，为了省篇幅，我们直接看到最底层的bind方法的代码，在类<code>NacosBootConfigurationPropertiesBinder#doBind</code>方法中。</p><blockquote><p>为什么在这个类里呢？</p></blockquote><p>从<code>NacosConfigurationPropertiesBindingPostProcessor#postProcessBeforeInitialization</code>方法中跟进代码，是进入到了<code>NacosConfigurationPropertiesBinder#doBind</code>方法啊，这里就要看下<code>NacosBootConfigurationPropertiesBinder</code>类的定义了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosBootConfigurationPropertiesBinder</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">NacosConfigurationPropertiesBinder</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>该类是<code>NacosConfigurationPropertiesBinder</code>的子类，那么这个类是在哪里被注册到IOC容器里的呢？从代码中我们跟踪到<code>NacosConfigBootBeanDefinitionRegistrar</code>类中，该类使用注解<code>@Configuration</code>通知SpringIOC主动的将其加载到容器中，看一下该类的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigBootBeanDefinitionRegistrar</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">DefaultListableBeanFactory defaultListableBeanFactory = (DefaultListableBeanFactory) beanFactory;</span><br><span class="line">    <span class="comment">// 步骤1</span></span><br><span class="line">BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder</span><br><span class="line">.rootBeanDefinition(NacosBootConfigurationPropertiesBinder.class);</span><br><span class="line">    <span class="comment">// 步骤2</span></span><br><span class="line">defaultListableBeanFactory.registerBeanDefinition(</span><br><span class="line">NacosBootConfigurationPropertiesBinder.BEAN_NAME, beanDefinitionBuilder.getBeanDefinition());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">BeanDefinitionRegistry registry)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类实现了<code>BeanFactoryAware</code>和<code>ImportBeanDefinitionRegistrar</code>两个接口，这两个接口是干什么的呢？熟悉Spring的同学应该都狠清楚，这里简单的讲一下：<code>BeanFactoryAware</code>是一个可以将<code>BeanFactory</code>实例注入到当前类的一个接口，在类中可以通过实现<code>BeanFactoryAware#setBeanFactory</code>方法来注入<code>BeanFactory</code>实例，在Nacos中，通过在<code>setBeanFactory</code>方法中将<code>NacosBootConfigurationPropertiesBinder</code>类注入到IOC容器中；而<code>ImportBeanDefinitionRegistrar</code>接口是给Bean的注册提供了更加灵活的方式，实现了该接口的Bean并不是直接注册到IOC容器中，而是可以通过<code>@Import</code>注解动态的选择性的注入到容器中，让Bean的注册更加的灵活方便。</p><p>又说多了，现在我们来看<code>NacosBootConfigurationPropertiesBinder</code>中的<code>doBind</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBind</span><span class="params">(Object bean, String beanName, String dataId, String groupId,</span></span></span><br><span class="line"><span class="function"><span class="params">String configType, NacosConfigurationProperties properties, String content, ConfigService configService)</span> </span>&#123;</span><br><span class="line">  String name = <span class="string">"nacos-bootstrap-"</span> + beanName;</span><br><span class="line">  NacosPropertySource propertySource = <span class="keyword">new</span> NacosPropertySource(name, dataId, groupId, content, configType);</span><br><span class="line">  environment.getPropertySources().addLast(propertySource);</span><br><span class="line">  Binder binder = Binder.get(environment);</span><br><span class="line">  ResolvableType type = getBeanType(bean, beanName);</span><br><span class="line">  Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(bean);</span><br><span class="line">  <span class="comment">// important</span></span><br><span class="line">  binder.bind(properties.prefix(), target);</span><br><span class="line">  publishBoundEvent(bean, beanName, dataId, groupId, properties, content, configService);</span><br><span class="line">  publishMetadataEvent(bean, beanName, dataId, groupId, properties);</span><br><span class="line">  environment.getPropertySources().remove(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键的就在于<code>binder.bind(properties.prefix(), target)</code>方法，我们从debug到binder中，最终找到了<code>bindObject</code>方法，方法中有<code>AggregateBinder&lt;?&gt; aggregateBinder = getAggregateBinder(target, context);</code>代码，目的是什么呢？来看下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AggregateBinder&lt;?&gt; getAggregateBinder(Bindable&lt;?&gt; target, Context context) &#123;</span><br><span class="line">  Class&lt;?&gt; resolvedType = target.getType().resolve(Object.class);</span><br><span class="line">  <span class="keyword">if</span> (Map.class.isAssignableFrom(resolvedType)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MapBinder(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Collection.class.isAssignableFrom(resolvedType)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CollectionBinder(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (target.getType().isArray()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayBinder(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就很明显了，找出被注入熟悉的类型，然后迭代注入，所以我们的配置文件内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">error-code:</span></span><br><span class="line"><span class="attr">  code-map:</span></span><br><span class="line">    <span class="number">10001001</span><span class="string">:</span> <span class="string">问题标题必填</span></span><br><span class="line">    <span class="number">10001002</span><span class="string">:</span> <span class="string">问题ID必填</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  user-name:</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">2</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">3</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">4</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">5</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">6</span></span><br><span class="line"><span class="bullet">   -</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p>被注入类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@NacosConfigurationProperties</span>(prefix = <span class="string">"error-code"</span>, dataId = <span class="string">"starter_error"</span>, type = ConfigType.YAML)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsErrorCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; codeMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt;        userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>done!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在开发过程中遇到了一个棘手的问题：有一些配置信息，需要以键值对或者列表的形式从配置文件中注入到代码里，配置中心使用的是Nacos。在正常情况下，使用Nacos我们都是key-value的配置，那么我们要是想将配置注入到List或者Map中，应该怎么办呢？&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Nacos" scheme="http://chuanyichuan.github.io/categories/Nacos/"/>
    
    
  </entry>
  
  <entry>
    <title>初出茅庐的程序猿如何获取“入场券”？</title>
    <link href="http://chuanyichuan.github.io/2020/08/29/%E5%88%9D%E5%87%BA%E8%8C%85%E5%BA%90%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E2%80%9C%E5%85%A5%E5%9C%BA%E5%88%B8%E2%80%9D%EF%BC%9F/"/>
    <id>http://chuanyichuan.github.io/2020/08/29/初出茅庐的程序猿如何获取“入场券”？/</id>
    <published>2020-08-29T10:59:00.000Z</published>
    <updated>2020-08-30T05:05:11.333Z</updated>
    
    <content type="html"><![CDATA[<p>当今社会，互联网发展迅速，衍生出了很多普惠于民的互联网产品，因此也诞生了一大批“猿类生物”，并且每年也会有一大批萌新“猿人”进入社会，这些“猿类生物”也就是大家所谓的“程序猿”。程序员们是一个非常单纯可爱的群体，每一位萌新迈入社会之后，作为青铜选手都需要一路披荆斩棘才能进化为最强王者。但是对于即将进入职场的萌新来说，拿到职场的入场券则是晋级最强王者的第一步，今天串一串作为过来人，分享一些个人经验。</p><h4 id="技术理论基础"><a class="markdownIt-Anchor" href="#技术理论基础"></a> 技术理论基础</h4><p>作为程序员，基本的技术基础是必备技能，不管你是计算机专业科班出身，还是半路出家，刚进入职场时都是一张白纸，如果一开始不把基础夯实，将会极大的影响以后的进阶之路。但是在夯实基础的过程中，不要乱买书，也不要乱追新技术新名词，基础的东西是需要经过日积月累的，并且基础的内容可以牢固个人编程思想，所以理论基础很重要。</p><p>给大家分享一个案例。应届生小串去一家公司面试，在面试过程中，小串对面试官问的一些问题都回答的不是很好，最后，小串问面试官觉得自己是否符合用人要求，面试官却说挺好的。</p><p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/%E5%BE%88%E5%A4%9A%E9%97%AE%E5%8F%B7.png" alt></p><p>小串很疑惑，明明自己问题回答的都不怎么好，为什么对面的大佬却说挺好的呢？在他入职一个月之后，和熟络的同事聊起这件事，没想到同事的一番话解决了他的困惑。原来在面试的时候，面试官让小串聊一聊对JVM了解，他回答说：JVM我不是很了解，还没有研究过，但是我觉得从Java语言的write once,run anywhere的特点来分析的话，它应该是起到了一个中间适配器的作用，如果让我设计的话，我会将JVM分为两层，上层对Application，底层对操作系统，通过不同版本的JVM来适应不同的操作系统，而不同的JVM中，对Application的这一层保持不变，仅仅变化对操作系统的那一层，以此来实现我们写的Java代码可以不用考虑运行在什么操作系统上，因为JVM底层已经帮我们做了适配，我们只需要关注应用层代码编写即可，大致图示应该是这样的：</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20200829231947683.png" alt="image-20200829231947683" style="zoom:50%;"><p>原来小串大学里学过计算机组成原理和操作系统，然后用这两块的知识去推导出该结论，面试官听到他的这个回答后觉得他基础知识很扎实，所以让他通过了面试。</p><p>这个真实案例告诉我们基础知识的重要性。可能会有些同学会对基础有些疑惑：基础到底包括了哪些领域的基础？以Java工程师来说，主要包括：JDK基础、操作系统、数据结构、计算机组成原理、数据库原理、基本开发框架、编译原理、网络工程、专业英语等，扎扎实实走好第一步，基础打牢了，以后的路才会更好走。</p><h4 id="编码工具使用"><a class="markdownIt-Anchor" href="#编码工具使用"></a> 编码工具使用</h4><p>对于职场萌新来说，除了需要扎实的基础知识，还需要掌握日常工作中所需要使用到的工具，比如开发Java使用的IDEA、数据库操作使用的DataGrip、前端开发使用的WebStorm等等等等，熟练使用开发工具能极大的提升工作效率。</p><p>开发常用工具如下：</p><p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20200830113722340.png" alt="image-20200830113722340"></p><h4 id="基本项目经验"><a class="markdownIt-Anchor" href="#基本项目经验"></a> 基本项目经验</h4><p>大多数应届生都没有相应的项目经验，并且面试官更看重的是候选人的可塑性，如果求职者基础牢固、积极沟通，公司就会愿意花时间、花精力去培养。如果你在学校的时候跟着导师做过项目，有过少许的项目经验，那么在面试之前一定要做好项目总结，介绍项目主要包括项目背景、主要功能、项目中所使用的技术栈、在项目中负责的模块、解决的技术难点、项目所带来的成果等。</p><p>那么对于没有项目经验的同学，该怎么办呢？那就没办法了，把基础再夯实一点吧，毕竟在战场上，要有一技之能来补全短板。</p><h4 id="基本产品感"><a class="markdownIt-Anchor" href="#基本产品感"></a> 基本产品感</h4><p>产品感就是有产品的思维感觉，就像我们打篮球的时候说手感好是一个概念，那么对于萌新，面试官会从哪些方面考察候选人是否有产品感呢？</p><ol><li>是否有基本的理解能力和功能需求分析能力</li><li>逻辑思维是否条理清晰，能否通过需求分析出核心需求</li><li>是否有基本的交互设计能力，对于萌新，能够在介绍项目的时候提到交互设计方面的内容，会是一个加分项喔。</li></ol><p>说到这里，可能会有部分人感觉到很疑惑：作为开发，为什么要有产品感呢？</p><p>其实开发不仅仅是写代码，程序员写出的代码（尤其是前端程序员），程序员是天生的产品经理，因为程序员掌握数据结构和数据库原理，知道业务如何转换成最优的数据模型，且程序员也知道产品端和开发端的交互逻辑和步骤，并且程序员介入并主导产品设计是大势所趋，不懂技术的产品经理将会逐渐消失。</p><h4 id="行业前瞻性"><a class="markdownIt-Anchor" href="#行业前瞻性"></a> 行业前瞻性</h4><p>作为一名想要不断提升自我能力的程序员，需要具有独到的行业前瞻性，能够实时的掌握行业发展动态，尤其是热门编程语言排行榜，这里并不是说我们需要根据排行榜来改变自己的技术栈，而是要了解自己的技术栈在当前行业中的发展前景。但是为什么说具有行业前瞻性对于拿到入场券很重要呢？一个能够利用业余时间关注行业动态的猿人，在面试官眼中会是一个积极向上且有独立思考能力的人，当然在面试的时候，一定不要滔滔不绝的夸夸其谈，因为言多必失，对于新人来说，面试官更喜欢脑子灵活且能踏实干活和学习的人，甚至更有一些领导喜欢听话的新人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当今社会，互联网发展迅速，衍生出了很多普惠于民的互联网产品，因此也诞生了一大批“猿类生物”，并且每年也会有一大批萌新“猿人”进入社会，这些“猿类生物”也就是大家所谓的“程序猿”。程序员们是一个非常单纯可爱的群体，每一位萌新迈入社会之后，作为青铜选手都需要一路披荆斩棘才能进化
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://chuanyichuan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>使用fastjson将字符串转换为带泛型的Java对象</title>
    <link href="http://chuanyichuan.github.io/2020/08/17/%E4%BD%BF%E7%94%A8fastjson%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B8%A6%E6%B3%9B%E5%9E%8B%E7%9A%84Java%E5%AF%B9%E8%B1%A1/"/>
    <id>http://chuanyichuan.github.io/2020/08/17/使用fastjson将字符串转换为带泛型的Java对象/</id>
    <published>2020-08-17T11:04:00.000Z</published>
    <updated>2020-08-17T12:08:06.213Z</updated>
    
    <content type="html"><![CDATA[<p>正常情况下，我们使用<code>JSONObject.parseObject(String body, Class clazz)</code>方法就可以将字符串转换为一个Java对象，但是如果我们要转的Java对象是一个带泛型类，该咋整呢？</p><p>这个时候我们可以使用fastjson里面自带的<code>TypeReference</code>类进行转换，具体语句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String messageBody = <span class="string">""</span>;</span><br><span class="line">MessageBody&lt;Item&gt; messageItemBody = JSON.parseObject(messageBody, <span class="keyword">new</span> TypeReference&lt;MessageBody&lt;Item&gt;&gt;()&#123;&#125;)</span><br></pre></td></tr></table></figure><p>这样就可以了，是不是挺神奇的，下面我们来看下具体的实现逻辑，为什么我们使用<code>TypeReference</code>就可以转成泛型类的对象。</p><hr><ol><li>第一步当然是看下<code>JSON#parseObject</code>这个方法的内部实现，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String text, TypeReference&lt;T&gt; type, Feature... features)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (T) parseObject(text, type.getType(), ParserConfig.getGlobalInstance(), DEFAULT_PARSER_FEATURE, features);</span><br><span class="line">&#125;</span><br><span class="line">↓</span><br><span class="line"></span><br><span class="line"><span class="comment">// 底口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz, ParserConfig config, ParseProcess processor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          <span class="keyword">int</span> featureValues, Feature... features)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 省略转换和校验代码...</span></span><br><span class="line">  </span><br><span class="line">  T value = (T) parser.parseObject(clazz);</span><br><span class="line"></span><br><span class="line">  handleResovleTask(parser, value);</span><br><span class="line"></span><br><span class="line">  parser.close();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (T) value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在最底层的方法中发现了一句话<code>T value = (T) parser.parseObject(clazz);</code>这里传进来的<code>clazz</code>对象是<code>java.lang.reflect.Type</code>类型的，大家可以看一下这个类，很神奇，这里重点不是它，不做说明了。</p><p>在入口方法处，我们找到了<code>type.getType()</code>语句，那么可以断定，神奇的根本原因在<code>TypeReference</code>类中，既然如此，那就进到这个类中看一下。</p><ol start="2"><li>第二步就是查看<code>com.alibaba.fastjson.TypeReference</code>类的实现（版本1.2.16）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new type literal. Derives represented class from type</span></span><br><span class="line"><span class="comment"> * parameter.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Clients create an empty anonymous subclass. Doing so embeds the type</span></span><br><span class="line"><span class="comment"> * parameter in the anonymous class's type hierarchy so we can reconstitute it</span></span><br><span class="line"><span class="comment"> * at runtime despite erasure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TypeReference</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Type superClass = getClass().getGenericSuperclass();</span><br><span class="line"></span><br><span class="line">    Type type = ((ParameterizedType) superClass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    Type cachedType = classTypeCache.get(type);</span><br><span class="line">    <span class="keyword">if</span> (cachedType == <span class="keyword">null</span>) &#123;</span><br><span class="line">        classTypeCache.putIfAbsent(type, type);</span><br><span class="line">        cachedType = classTypeCache.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.type = cachedType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中最核心的一句是<code>Type type = ((ParameterizedType) superClass).getActualTypeArguments()[0];</code>，这句话的意思是获得超类的泛型参数的实际类型，也就是获得泛型T的实际类型type。看到这里有点懵，到底我们获取到的type是什么？简单写一个case看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.TypeReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ①</span></span><br><span class="line">        TypeReference reference = <span class="keyword">new</span> TypeReference&lt;ArrayList&lt;String&gt;&gt;() &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">        Type superClass = reference.getClass().getGenericSuperclass();</span><br><span class="line">        Type type = ((ParameterizedType) superClass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(type);</span><br><span class="line">        <span class="comment">// ②</span></span><br><span class="line">        System.out.println((Type) (ArrayList.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.util.ArrayList&lt;java.lang.String&gt;</span><br><span class="line">class java.util.ArrayList</span><br></pre></td></tr></table></figure><p>看得出，打印出的结果是完全不同的，也就是说，我们在反序列化的时候，代码①会保留泛型约束，代码②会抛弃泛型约束。</p><ol start="3"><li>再看一个案例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.TypeReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String json = <span class="string">"[\"abc\",\"def\",\"ghi\"]"</span>;</span><br><span class="line"><span class="comment">// ①</span></span><br><span class="line">        ArrayList&lt;System&gt; list1 = JSON.parseObject(json, ArrayList.class);</span><br><span class="line">        System.out.println(list1.get(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// ②</span></span><br><span class="line">        ArrayList&lt;System&gt; list2 = JSON.parseObject(json, <span class="keyword">new</span> TypeReference&lt;ArrayList&lt;String&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码①中，不论ArrayList中放置的泛型是什么类型，编译和运行都不会报错，且能正确的序列化，而代码②会在编译器进行校验，也就是说使用TypeReference会校验泛型是否匹配</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正常情况下，我们使用&lt;code&gt;JSONObject.parseObject(String body, Class clazz)&lt;/code&gt;方法就可以将字符串转换为一个Java对象，但是如果我们要转的Java对象是一个带泛型类，该咋整呢？&lt;/p&gt;
&lt;p&gt;这个时候我们可以使
      
    
    </summary>
    
    
      <category term="Java" scheme="http://chuanyichuan.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>BUG列表1</title>
    <link href="http://chuanyichuan.github.io/2020/07/13/BUG%E5%88%97%E8%A1%A81/"/>
    <id>http://chuanyichuan.github.io/2020/07/13/BUG列表1/</id>
    <published>2020-07-13T01:18:54.870Z</published>
    <updated>2020-07-24T06:11:52.916Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Consider defining a bean named ‘authorizer’ in your configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">  securityManager.setRealm(userAuthRealm);</span><br><span class="line">  <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的SecurityManager修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">  securityManager.setRealm(userAuthRealm);</span><br><span class="line">  <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就好了</p></li><li><p>docker服务假死，docker ps命令无响应</p><p>执行<code>docker ps</code>命令，直接卡死，使用<code>systemctl stop docker</code>也没有任何响应，这个时候最直接的办法就是将容器全部kill掉</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker kill <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">aq</span>)</span></span><br><span class="line"></span><br><span class="line">docker rm <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">aq</span>)</span></span><br></pre></td></tr></table></figure></li><li><p>pom must be one of [test, compile, runtime, system,  provided], but is import</p><p>在<code>&lt;dependency&gt;</code>标签中引入的依赖的scope设置成了import，所以报这个错误，import只能使用在<code>&lt;dependencyManagement&gt;</code>标签中。</p></li><li><p>java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</p><p>在使用BigDecimal的divide()方法进行计算的时候，抛出了这个异常，原因是出现了无限循环小数。</p><p>在使用divide方法的时候，指定小数位精度即可，devide(numObj, scale, scaleMode)</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Consider defining a bean named ‘authorizer’ in your configuration&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
      <category term="BUG" scheme="http://chuanyichuan.github.io/categories/BUG/"/>
    
    
  </entry>
  
  <entry>
    <title>一次线上故障排查</title>
    <link href="http://chuanyichuan.github.io/2020/07/11/%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/"/>
    <id>http://chuanyichuan.github.io/2020/07/11/一次线上故障排查/</id>
    <published>2020-07-10T18:32:00.000Z</published>
    <updated>2020-07-25T13:23:10.030Z</updated>
    
    <content type="html"><![CDATA[<p>滴滴滴~微信响了，串一串拿出手机一看，朋友的求助信息，马上回复一个：</p><p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20200711024117435.png" alt="image-20200711024117435" style="zoom: 45%; "><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20200711023951448.png" alt="image-20200711023951448" style="zoom: 46%;"></p><p>线上出了问题，平均每隔几个请求就会有一个延迟15分钟左右，并且每次都是很固定的延迟15分钟左右，这就奇怪了，难道是设置了延迟间隔时间？朋友说没有设置，并且全局都未搜索到延迟设置，并且延迟时间并不是固定的15分钟，总是在上下几秒钟浮动。</p><p>看到这些，好懵啊，尤其是知道他们没有链路监控的那一刻，整个人都疯了，我是谁？我在哪？我在干什么？我为什么要搭理他？但是既然搭理了，那就帮一下吧。</p><p>首先我们要查到具体那一个方法发生了延迟，既然没有链路监控，就一下想到了Arthas，生产bug排查利器，没用过的同学可以到官网学习学习。</p><ol><li><p>下载arthas-boot.jar文件，copy到pod中，然后执行<code>java -jar arthas-boot.jar</code>命令，突然报错了</p><p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20200711032330845.png" alt="image-20200711032330845"></p><p>原来是服务器不能连接外网，下载不了arthas所需的必须文件，下载文件https://maven.aliyun.com/repository/public/com/taobao/arthas/arthas-packaging/3.3.6/arthas-packaging-3.3.6-bin.zip，然后将其解压到目录<code>~/.arthas/lib/3.3.6/arthas</code>中：</p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20200711032448390.png" alt="image-20200711032448390" style="zoom:50%;"><p>此时再次执行<code>java -jar arthas-boot.jar</code></p><img src="/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-20200711032730484.png" alt="image-20200711032730484" style="zoom:50%;"></li><li><p>首先从方法入口查起，但是因为使用了activeMQ，并且是消费端产生了延迟，那么就从MQ的入口处开始查起，因为日志打印的信息很少，所以我使用arthas跟踪MQ Consumer方法的调用链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trace  com.xxx.MessageDispatcher onMessage -n 10</span><br></pre></td></tr></table></figure><p>模拟请求之后，MessageDispatcher#onMessage方法没有输出任何东西，然后15分钟之后，arthas控制台有所输出了：</p></li><li><p>1</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;滴滴滴~微信响了，串一串拿出手机一看，朋友的求助信息，马上回复一个：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Users/chuan/Documents/projects_code/git-project/github_blog/source/images/image-2020
      
    
    </summary>
    
    
      <category term="BUG" scheme="http://chuanyichuan.github.io/categories/BUG/"/>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch Health Check Failed</title>
    <link href="http://chuanyichuan.github.io/2020/07/08/Elasticsearch-health-check-failed/"/>
    <id>http://chuanyichuan.github.io/2020/07/08/Elasticsearch-health-check-failed/</id>
    <published>2020-07-08T15:32:00.000Z</published>
    <updated>2020-07-09T05:53:24.400Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用Elasticsearch的时候，突然报了一个错误信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.b.a.e.ElasticsearchRestHealthIndicator : Elasticsearch health check failed</span><br><span class="line">  Caused by: java.net.ConnectException: Connection refused</span><br></pre></td></tr></table></figure><p>这个信息在之前都没有跳出来过，刚修改了yml配置文件之后启动就报错了，难道是配置问题？看一下当前的配置文件es模块</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">data</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">elasticsearch</span>:<span class="string"></span></span><br><span class="line">        <span class="meta">cluster-nodes</span>: <span class="string">http://106.14.205.212:9300</span></span><br><span class="line">      <span class="attr">elasticsearch</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">rest</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">uris</span>: <span class="string">["http://106.14.205.212:9200"]</span></span><br></pre></td></tr></table></figure><p>看到这就知道了，原来spring.elasticsearch这个标签被写到了spring.data下面，然后在启动的时候没有读取到配置信息，所以报错。</p><p>将配置信息修改一下即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">data</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">elasticsearch</span>:<span class="string"></span></span><br><span class="line">        <span class="meta">cluster-nodes</span>: <span class="string">http://106.14.205.212:9300</span></span><br><span class="line">  <span class="attr">elasticsearch</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">rest</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">uris</span>: <span class="string">["http://106.14.205.212:9200"]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在使用Elasticsearch的时候，突然报了一个错误信息&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://chuanyichuan.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos升级Python2到Python3</title>
    <link href="http://chuanyichuan.github.io/2020/07/08/Centos%E5%8D%87%E7%BA%A7Python2%E5%88%B0Python3/"/>
    <id>http://chuanyichuan.github.io/2020/07/08/Centos升级Python2到Python3/</id>
    <published>2020-07-08T10:33:00.000Z</published>
    <updated>2020-07-08T10:40:34.150Z</updated>
    
    <content type="html"><![CDATA[<p>Centos默认安装了Python2，但是现在Python的版本在不断的升级，很多项目的开发环境都是基于Python3的了，所以在服务器上部署Python项目之前，我们需要先将服务器上的Python升级到3.x。</p><p>网上有很多升级办法，比如下载源码，自己make，比如使用yum，现在就说一下最简单的方式：yum安装</p><ol><li><p>使用yum安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python3</span><br></pre></td></tr></table></figure><p>然后会出现一大堆的安装过程日志，等待即可。安装完成之后通过命令<code>python3 -V</code>查看安装的版本。</p></li><li><p>设置软连接</p><ul><li>进入到<code>/usr/bin</code>目录下：<code>cd /usr/bin</code></li><li>备份当前python命令：<code>mv python python.bak</code></li><li>创建软连接：<code>ln -sf python3 python</code></li></ul></li></ol><p>然后使用<code>python -V</code>查看指令所指向的版本了，至此升级完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Centos默认安装了Python2，但是现在Python的版本在不断的升级，很多项目的开发环境都是基于Python3的了，所以在服务器上部署Python项目之前，我们需要先将服务器上的Python升级到3.x。&lt;/p&gt;
&lt;p&gt;网上有很多升级办法，比如下载源码，自己make
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chuanyichuan.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot使用Elasticsearch却扫描不到Repository</title>
    <link href="http://chuanyichuan.github.io/2020/07/07/SpringBoot%E4%BD%BF%E7%94%A8Elasticsearch%E5%8D%B4%E6%89%AB%E6%8F%8F%E4%B8%8D%E5%88%B0Repository/"/>
    <id>http://chuanyichuan.github.io/2020/07/07/SpringBoot使用Elasticsearch却扫描不到Repository/</id>
    <published>2020-07-06T17:01:00.000Z</published>
    <updated>2020-07-09T15:13:25.827Z</updated>
    
    <content type="html"><![CDATA[<p>在使用spring-data进行ES操作的时候，报找不到Repository错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.</span><br><span class="line">2020-07-06 18:34:07.085 ERROR 2364 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : </span><br><span class="line"></span><br><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Field bookRepository in com.xxximpl.BookServiceImpl required a bean of type 'com.xxximpl.repository.BookRepository' that could not be found.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider defining a bean of type 'com.xxximpl.repository.BookRepository' in your configuration.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>解决办法就是在启动类加上@EnableElasticsearchRepositories(basePackages = “com.xxximpl.repository”)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用spring-data进行ES操作的时候，报找不到Repository错误&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
      <category term="BUG" scheme="http://chuanyichuan.github.io/categories/BUG/"/>
    
    
  </entry>
  
</feed>
